// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tms {

namespace {

const ::google::protobuf::Descriptor* UTargetSelfparam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UTargetSelfparam_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserTargets_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserTargets_reflection_ = NULL;
const ::google::protobuf::Descriptor* UTargetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UTargetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UTargetInfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UTargetInfos_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserPrivateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserPrivateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_Old_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_Old_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserOnlineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserOnlineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginAnsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginAnsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfoReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserInfoReq_cmd_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TargetsQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetsQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetsAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetsAdd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TargetsAdd_cmd_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UpdateTargetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateTargetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetsAddNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetsAddNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetsNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetsNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileLoadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileLoadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileLoadData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileLoadData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalkMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalkMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalkMsgAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalkMsgAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* TmpTalkMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TmpTalkMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PullTalkMsgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PullTalkMsgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgInfoNotify_MsgInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgInfoNotify_MsgInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalkMsgInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalkMsgInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupPrivateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupPrivateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinGTalk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinGTalk_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnsJoinGTalk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnsJoinGTalk_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuitGTalk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuitGTalk_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysTargetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysTargetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysTargetInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysTargetInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysMemberInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysMemberInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysUserPrivateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysUserPrivateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysUserPrivateInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysUserPrivateInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysGroupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysGroupInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysGroupInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysGroupInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysGTalkInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysGTalkInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysTalkMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysTalkMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysTalkMsgList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysTalkMsgList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysTargetMsgInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysTargetMsgInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysTargetMsgInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysTargetMsgInfoList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_user_2eproto() {
  protobuf_AddDesc_user_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "user.proto");
  GOOGLE_CHECK(file != NULL);
  UTargetSelfparam_descriptor_ = file->message_type(0);
  static const int UTargetSelfparam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTargetSelfparam, strnickname_),
  };
  UTargetSelfparam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UTargetSelfparam_descriptor_,
      UTargetSelfparam::default_instance_,
      UTargetSelfparam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTargetSelfparam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTargetSelfparam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UTargetSelfparam));
  UserTargets_descriptor_ = file->message_type(1);
  static const int UserTargets_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTargets, utargets_),
  };
  UserTargets_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserTargets_descriptor_,
      UserTargets::default_instance_,
      UserTargets_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTargets, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTargets, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserTargets));
  UTargetInfo_descriptor_ = file->message_type(2);
  static const int UTargetInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTargetInfo, targets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTargetInfo, uright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTargetInfo, selfparam_),
  };
  UTargetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UTargetInfo_descriptor_,
      UTargetInfo::default_instance_,
      UTargetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTargetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTargetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UTargetInfo));
  UTargetInfos_descriptor_ = file->message_type(3);
  static const int UTargetInfos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTargetInfos, utargetinfos_),
  };
  UTargetInfos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UTargetInfos_descriptor_,
      UTargetInfos::default_instance_,
      UTargetInfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTargetInfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTargetInfos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UTargetInfos));
  UserPrivateInfo_descriptor_ = file->message_type(4);
  static const int UserPrivateInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, ngender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, ubirthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, utmregtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, nclienttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, strsigature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, strcountry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, strprovince_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, strcity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, strphone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, strmobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, stroccupation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, strcollege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, stremail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, strhomepage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, strpersonal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, nshengxiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, nconstel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, nblood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, strcustomface_),
  };
  UserPrivateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserPrivateInfo_descriptor_,
      UserPrivateInfo::default_instance_,
      UserPrivateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserPrivateInfo));
  UserInfo_descriptor_ = file->message_type(5);
  static const int UserInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, targetinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, privateinfos_),
  };
  UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo));
  UserInfo_Old_descriptor_ = file->message_type(6);
  static const int UserInfo_Old_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_Old, targetinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_Old, privateinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_Old, targetsnotifys_),
  };
  UserInfo_Old_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_Old_descriptor_,
      UserInfo_Old::default_instance_,
      UserInfo_Old_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_Old, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_Old, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo_Old));
  UserOnlineInfo_descriptor_ = file->message_type(7);
  static const int UserOnlineInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineInfo, uaccountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineInfo, uloginflag_),
  };
  UserOnlineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserOnlineInfo_descriptor_,
      UserOnlineInfo::default_instance_,
      UserOnlineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserOnlineInfo));
  LoginInfo_descriptor_ = file->message_type(8);
  static const int LoginInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, straccountno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, strpasswd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, uloginflags_),
  };
  LoginInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginInfo_descriptor_,
      LoginInfo::default_instance_,
      LoginInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginInfo));
  LoginAnsInfo_descriptor_ = file->message_type(9);
  static const int LoginAnsInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAnsInfo, uaccountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAnsInfo, usessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAnsInfo, nclienttype_),
  };
  LoginAnsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginAnsInfo_descriptor_,
      LoginAnsInfo::default_instance_,
      LoginAnsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAnsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAnsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginAnsInfo));
  RegisterInfo_descriptor_ = file->message_type(10);
  static const int RegisterInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInfo, straccountno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInfo, strpasswd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInfo, strnickname_),
  };
  RegisterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterInfo_descriptor_,
      RegisterInfo::default_instance_,
      RegisterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterInfo));
  UserInfoReq_descriptor_ = file->message_type(11);
  static const int UserInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoReq, ncmd_),
  };
  UserInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfoReq_descriptor_,
      UserInfoReq::default_instance_,
      UserInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfoReq));
  UserInfoReq_cmd_descriptor_ = UserInfoReq_descriptor_->enum_type(0);
  TargetsQuery_descriptor_ = file->message_type(12);
  static const int TargetsQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsQuery, straccountno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsQuery, strnickname_),
  };
  TargetsQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetsQuery_descriptor_,
      TargetsQuery::default_instance_,
      TargetsQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetsQuery));
  UpdateUserInfo_descriptor_ = file->message_type(13);
  static const int UpdateUserInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfo, strnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfo, nface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfo, privateinfos_),
  };
  UpdateUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateUserInfo_descriptor_,
      UpdateUserInfo::default_instance_,
      UpdateUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateUserInfo));
  TargetsAdd_descriptor_ = file->message_type(14);
  static const int TargetsAdd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsAdd, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsAdd, ncmd_),
  };
  TargetsAdd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetsAdd_descriptor_,
      TargetsAdd::default_instance_,
      TargetsAdd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsAdd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsAdd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetsAdd));
  TargetsAdd_cmd_descriptor_ = TargetsAdd_descriptor_->enum_type(0);
  UpdateTargetInfo_descriptor_ = file->message_type(15);
  static const int UpdateTargetInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTargetInfo, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTargetInfo, strnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTargetInfo, selfparam_),
  };
  UpdateTargetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateTargetInfo_descriptor_,
      UpdateTargetInfo::default_instance_,
      UpdateTargetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTargetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTargetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateTargetInfo));
  UserInfoNotify_descriptor_ = file->message_type(16);
  static const int UserInfoNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoNotify, uaccountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoNotify, straccountno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoNotify, strnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoNotify, nface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoNotify, privateinfos_),
  };
  UserInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfoNotify_descriptor_,
      UserInfoNotify::default_instance_,
      UserInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfoNotify));
  TargetsAddNotify_descriptor_ = file->message_type(17);
  static const int TargetsAddNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsAddNotify, targetsadds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsAddNotify, targetinfos_),
  };
  TargetsAddNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetsAddNotify_descriptor_,
      TargetsAddNotify::default_instance_,
      TargetsAddNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsAddNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsAddNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetsAddNotify));
  TargetsNotify_descriptor_ = file->message_type(18);
  static const int TargetsNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsNotify, targetss_),
  };
  TargetsNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetsNotify_descriptor_,
      TargetsNotify::default_instance_,
      TargetsNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetsNotify));
  ServerTime_descriptor_ = file->message_type(19);
  static const int ServerTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, uservertime_),
  };
  ServerTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerTime_descriptor_,
      ServerTime::default_instance_,
      ServerTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerTime));
  FileLoadInfo_descriptor_ = file->message_type(20);
  static const int FileLoadInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadInfo, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadInfo, uoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadInfo, udownsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadInfo, ulocalsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadInfo, ulocaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadInfo, bversion_),
  };
  FileLoadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileLoadInfo_descriptor_,
      FileLoadInfo::default_instance_,
      FileLoadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileLoadInfo));
  FileLoadData_descriptor_ = file->message_type(21);
  static const int FileLoadData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadData, uerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadData, ufilesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadData, uoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadData, udownsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadData, utmmodified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadData, szdata_),
  };
  FileLoadData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileLoadData_descriptor_,
      FileLoadData::default_instance_,
      FileLoadData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileLoadData));
  TalkMsg_descriptor_ = file->message_type(22);
  static const int TalkMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsg, usendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsg, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsg, umsgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsg, msg_),
  };
  TalkMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalkMsg_descriptor_,
      TalkMsg::default_instance_,
      TalkMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalkMsg));
  TalkMsgAns_descriptor_ = file->message_type(23);
  static const int TalkMsgAns_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgAns, uerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgAns, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgAns, umsgid_),
  };
  TalkMsgAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalkMsgAns_descriptor_,
      TalkMsgAns::default_instance_,
      TalkMsgAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalkMsgAns));
  TmpTalkMsg_descriptor_ = file->message_type(24);
  static const int TmpTalkMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmpTalkMsg, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmpTalkMsg, strnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmpTalkMsg, umsgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmpTalkMsg, msg_),
  };
  TmpTalkMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TmpTalkMsg_descriptor_,
      TmpTalkMsg::default_instance_,
      TmpTalkMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmpTalkMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmpTalkMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TmpTalkMsg));
  PullTalkMsgReq_descriptor_ = file->message_type(25);
  static const int PullTalkMsgReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullTalkMsgReq, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullTalkMsgReq, umsgid_),
  };
  PullTalkMsgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PullTalkMsgReq_descriptor_,
      PullTalkMsgReq::default_instance_,
      PullTalkMsgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullTalkMsgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullTalkMsgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PullTalkMsgReq));
  MsgInfoNotify_descriptor_ = file->message_type(26);
  static const int MsgInfoNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInfoNotify, msginfos_),
  };
  MsgInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgInfoNotify_descriptor_,
      MsgInfoNotify::default_instance_,
      MsgInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgInfoNotify));
  MsgInfoNotify_MsgInfo_descriptor_ = MsgInfoNotify_descriptor_->nested_type(0);
  static const int MsgInfoNotify_MsgInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInfoNotify_MsgInfo, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInfoNotify_MsgInfo, umsgid_),
  };
  MsgInfoNotify_MsgInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgInfoNotify_MsgInfo_descriptor_,
      MsgInfoNotify_MsgInfo::default_instance_,
      MsgInfoNotify_MsgInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInfoNotify_MsgInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInfoNotify_MsgInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgInfoNotify_MsgInfo));
  TalkMsgInfo_descriptor_ = file->message_type(27);
  static const int TalkMsgInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgInfo, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgInfo, talkmsgs_),
  };
  TalkMsgInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalkMsgInfo_descriptor_,
      TalkMsgInfo::default_instance_,
      TalkMsgInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalkMsgInfo));
  GroupPrivateInfo_descriptor_ = file->message_type(28);
  static const int GroupPrivateInfo_offsets_[1] = {
  };
  GroupPrivateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupPrivateInfo_descriptor_,
      GroupPrivateInfo::default_instance_,
      GroupPrivateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPrivateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPrivateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupPrivateInfo));
  JoinGTalk_descriptor_ = file->message_type(29);
  static const int JoinGTalk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGTalk, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGTalk, ugtalkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGTalk, targetinfos_),
  };
  JoinGTalk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinGTalk_descriptor_,
      JoinGTalk::default_instance_,
      JoinGTalk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGTalk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGTalk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinGTalk));
  AnsJoinGTalk_descriptor_ = file->message_type(30);
  static const int AnsJoinGTalk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnsJoinGTalk, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnsJoinGTalk, ugtalkid_),
  };
  AnsJoinGTalk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnsJoinGTalk_descriptor_,
      AnsJoinGTalk::default_instance_,
      AnsJoinGTalk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnsJoinGTalk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnsJoinGTalk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnsJoinGTalk));
  QuitGTalk_descriptor_ = file->message_type(31);
  static const int QuitGTalk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGTalk, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGTalk, ugtalkid_),
  };
  QuitGTalk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuitGTalk_descriptor_,
      QuitGTalk::default_instance_,
      QuitGTalk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGTalk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGTalk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuitGTalk));
  SysTargetInfo_descriptor_ = file->message_type(32);
  static const int SysTargetInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTargetInfo, uversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTargetInfo, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTargetInfo, objs_),
  };
  SysTargetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysTargetInfo_descriptor_,
      SysTargetInfo::default_instance_,
      SysTargetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTargetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTargetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysTargetInfo));
  SysTargetInfoList_descriptor_ = file->message_type(33);
  static const int SysTargetInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTargetInfoList, nodes_),
  };
  SysTargetInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysTargetInfoList_descriptor_,
      SysTargetInfoList::default_instance_,
      SysTargetInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTargetInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTargetInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysTargetInfoList));
  SysMemberInfo_descriptor_ = file->message_type(34);
  static const int SysMemberInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMemberInfo, uversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMemberInfo, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMemberInfo, objs_),
  };
  SysMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysMemberInfo_descriptor_,
      SysMemberInfo::default_instance_,
      SysMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysMemberInfo));
  SysMemberInfoList_descriptor_ = file->message_type(35);
  static const int SysMemberInfoList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMemberInfoList, uversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMemberInfoList, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMemberInfoList, nodes_),
  };
  SysMemberInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysMemberInfoList_descriptor_,
      SysMemberInfoList::default_instance_,
      SysMemberInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMemberInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMemberInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysMemberInfoList));
  SysUserPrivateInfo_descriptor_ = file->message_type(36);
  static const int SysUserPrivateInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysUserPrivateInfo, uversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysUserPrivateInfo, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysUserPrivateInfo, objs_),
  };
  SysUserPrivateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysUserPrivateInfo_descriptor_,
      SysUserPrivateInfo::default_instance_,
      SysUserPrivateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysUserPrivateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysUserPrivateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysUserPrivateInfo));
  SysUserPrivateInfoList_descriptor_ = file->message_type(37);
  static const int SysUserPrivateInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysUserPrivateInfoList, nodes_),
  };
  SysUserPrivateInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysUserPrivateInfoList_descriptor_,
      SysUserPrivateInfoList::default_instance_,
      SysUserPrivateInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysUserPrivateInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysUserPrivateInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysUserPrivateInfoList));
  SysGroupInfo_descriptor_ = file->message_type(38);
  static const int SysGroupInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysGroupInfo, uversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysGroupInfo, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysGroupInfo, objs_),
  };
  SysGroupInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysGroupInfo_descriptor_,
      SysGroupInfo::default_instance_,
      SysGroupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysGroupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysGroupInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysGroupInfo));
  SysGroupInfoList_descriptor_ = file->message_type(39);
  static const int SysGroupInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysGroupInfoList, nodes_),
  };
  SysGroupInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysGroupInfoList_descriptor_,
      SysGroupInfoList::default_instance_,
      SysGroupInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysGroupInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysGroupInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysGroupInfoList));
  SysGTalkInfoList_descriptor_ = file->message_type(40);
  static const int SysGTalkInfoList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysGTalkInfoList, uversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysGTalkInfoList, objs_),
  };
  SysGTalkInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysGTalkInfoList_descriptor_,
      SysGTalkInfoList::default_instance_,
      SysGTalkInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysGTalkInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysGTalkInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysGTalkInfoList));
  SysUserInfo_descriptor_ = file->message_type(41);
  static const int SysUserInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysUserInfo, uversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysUserInfo, privateinfos_),
  };
  SysUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysUserInfo_descriptor_,
      SysUserInfo::default_instance_,
      SysUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysUserInfo));
  SysTalkMsg_descriptor_ = file->message_type(42);
  static const int SysTalkMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTalkMsg, uversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTalkMsg, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTalkMsg, nodes_),
  };
  SysTalkMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysTalkMsg_descriptor_,
      SysTalkMsg::default_instance_,
      SysTalkMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTalkMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTalkMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysTalkMsg));
  SysTalkMsgList_descriptor_ = file->message_type(43);
  static const int SysTalkMsgList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTalkMsgList, nodes_),
  };
  SysTalkMsgList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysTalkMsgList_descriptor_,
      SysTalkMsgList::default_instance_,
      SysTalkMsgList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTalkMsgList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTalkMsgList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysTalkMsgList));
  SysTargetMsgInfo_descriptor_ = file->message_type(44);
  static const int SysTargetMsgInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTargetMsgInfo, uversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTargetMsgInfo, utargetid_),
  };
  SysTargetMsgInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysTargetMsgInfo_descriptor_,
      SysTargetMsgInfo::default_instance_,
      SysTargetMsgInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTargetMsgInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTargetMsgInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysTargetMsgInfo));
  SysTargetMsgInfoList_descriptor_ = file->message_type(45);
  static const int SysTargetMsgInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTargetMsgInfoList, nodes_),
  };
  SysTargetMsgInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysTargetMsgInfoList_descriptor_,
      SysTargetMsgInfoList::default_instance_,
      SysTargetMsgInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTargetMsgInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysTargetMsgInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysTargetMsgInfoList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_user_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UTargetSelfparam_descriptor_, &UTargetSelfparam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserTargets_descriptor_, &UserTargets::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UTargetInfo_descriptor_, &UTargetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UTargetInfos_descriptor_, &UTargetInfos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserPrivateInfo_descriptor_, &UserPrivateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_Old_descriptor_, &UserInfo_Old::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserOnlineInfo_descriptor_, &UserOnlineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginInfo_descriptor_, &LoginInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginAnsInfo_descriptor_, &LoginAnsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterInfo_descriptor_, &RegisterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfoReq_descriptor_, &UserInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetsQuery_descriptor_, &TargetsQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateUserInfo_descriptor_, &UpdateUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetsAdd_descriptor_, &TargetsAdd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateTargetInfo_descriptor_, &UpdateTargetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfoNotify_descriptor_, &UserInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetsAddNotify_descriptor_, &TargetsAddNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetsNotify_descriptor_, &TargetsNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerTime_descriptor_, &ServerTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileLoadInfo_descriptor_, &FileLoadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileLoadData_descriptor_, &FileLoadData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalkMsg_descriptor_, &TalkMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalkMsgAns_descriptor_, &TalkMsgAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TmpTalkMsg_descriptor_, &TmpTalkMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PullTalkMsgReq_descriptor_, &PullTalkMsgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgInfoNotify_descriptor_, &MsgInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgInfoNotify_MsgInfo_descriptor_, &MsgInfoNotify_MsgInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalkMsgInfo_descriptor_, &TalkMsgInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupPrivateInfo_descriptor_, &GroupPrivateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinGTalk_descriptor_, &JoinGTalk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnsJoinGTalk_descriptor_, &AnsJoinGTalk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuitGTalk_descriptor_, &QuitGTalk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysTargetInfo_descriptor_, &SysTargetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysTargetInfoList_descriptor_, &SysTargetInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysMemberInfo_descriptor_, &SysMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysMemberInfoList_descriptor_, &SysMemberInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysUserPrivateInfo_descriptor_, &SysUserPrivateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysUserPrivateInfoList_descriptor_, &SysUserPrivateInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysGroupInfo_descriptor_, &SysGroupInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysGroupInfoList_descriptor_, &SysGroupInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysGTalkInfoList_descriptor_, &SysGTalkInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysUserInfo_descriptor_, &SysUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysTalkMsg_descriptor_, &SysTalkMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysTalkMsgList_descriptor_, &SysTalkMsgList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysTargetMsgInfo_descriptor_, &SysTargetMsgInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysTargetMsgInfoList_descriptor_, &SysTargetMsgInfoList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_user_2eproto() {
  delete UTargetSelfparam::default_instance_;
  delete UTargetSelfparam_reflection_;
  delete UserTargets::default_instance_;
  delete UserTargets_reflection_;
  delete UTargetInfo::default_instance_;
  delete UTargetInfo_reflection_;
  delete UTargetInfos::default_instance_;
  delete UTargetInfos_reflection_;
  delete UserPrivateInfo::default_instance_;
  delete UserPrivateInfo_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete UserInfo_Old::default_instance_;
  delete UserInfo_Old_reflection_;
  delete UserOnlineInfo::default_instance_;
  delete UserOnlineInfo_reflection_;
  delete LoginInfo::default_instance_;
  delete LoginInfo_reflection_;
  delete LoginAnsInfo::default_instance_;
  delete LoginAnsInfo_reflection_;
  delete RegisterInfo::default_instance_;
  delete RegisterInfo_reflection_;
  delete UserInfoReq::default_instance_;
  delete UserInfoReq_reflection_;
  delete TargetsQuery::default_instance_;
  delete TargetsQuery_reflection_;
  delete UpdateUserInfo::default_instance_;
  delete UpdateUserInfo_reflection_;
  delete TargetsAdd::default_instance_;
  delete TargetsAdd_reflection_;
  delete UpdateTargetInfo::default_instance_;
  delete UpdateTargetInfo_reflection_;
  delete UserInfoNotify::default_instance_;
  delete UserInfoNotify_reflection_;
  delete TargetsAddNotify::default_instance_;
  delete TargetsAddNotify_reflection_;
  delete TargetsNotify::default_instance_;
  delete TargetsNotify_reflection_;
  delete ServerTime::default_instance_;
  delete ServerTime_reflection_;
  delete FileLoadInfo::default_instance_;
  delete FileLoadInfo_reflection_;
  delete FileLoadData::default_instance_;
  delete FileLoadData_reflection_;
  delete TalkMsg::default_instance_;
  delete TalkMsg_reflection_;
  delete TalkMsgAns::default_instance_;
  delete TalkMsgAns_reflection_;
  delete TmpTalkMsg::default_instance_;
  delete TmpTalkMsg_reflection_;
  delete PullTalkMsgReq::default_instance_;
  delete PullTalkMsgReq_reflection_;
  delete MsgInfoNotify::default_instance_;
  delete MsgInfoNotify_reflection_;
  delete MsgInfoNotify_MsgInfo::default_instance_;
  delete MsgInfoNotify_MsgInfo_reflection_;
  delete TalkMsgInfo::default_instance_;
  delete TalkMsgInfo_reflection_;
  delete GroupPrivateInfo::default_instance_;
  delete GroupPrivateInfo_reflection_;
  delete JoinGTalk::default_instance_;
  delete JoinGTalk_reflection_;
  delete AnsJoinGTalk::default_instance_;
  delete AnsJoinGTalk_reflection_;
  delete QuitGTalk::default_instance_;
  delete QuitGTalk_reflection_;
  delete SysTargetInfo::default_instance_;
  delete SysTargetInfo_reflection_;
  delete SysTargetInfoList::default_instance_;
  delete SysTargetInfoList_reflection_;
  delete SysMemberInfo::default_instance_;
  delete SysMemberInfo_reflection_;
  delete SysMemberInfoList::default_instance_;
  delete SysMemberInfoList_reflection_;
  delete SysUserPrivateInfo::default_instance_;
  delete SysUserPrivateInfo_reflection_;
  delete SysUserPrivateInfoList::default_instance_;
  delete SysUserPrivateInfoList_reflection_;
  delete SysGroupInfo::default_instance_;
  delete SysGroupInfo_reflection_;
  delete SysGroupInfoList::default_instance_;
  delete SysGroupInfoList_reflection_;
  delete SysGTalkInfoList::default_instance_;
  delete SysGTalkInfoList_reflection_;
  delete SysUserInfo::default_instance_;
  delete SysUserInfo_reflection_;
  delete SysTalkMsg::default_instance_;
  delete SysTalkMsg_reflection_;
  delete SysTalkMsgList::default_instance_;
  delete SysTalkMsgList_reflection_;
  delete SysTargetMsgInfo::default_instance_;
  delete SysTargetMsgInfo_reflection_;
  delete SysTargetMsgInfoList::default_instance_;
  delete SysTargetMsgInfoList_reflection_;
}

void protobuf_AddDesc_user_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tms::protobuf_AddDesc_base_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nuser.proto\022\003tms\032\nbase.proto\"\'\n\020UTarget"
    "Selfparam\022\023\n\013strNickName\030\001 \002(\014\"-\n\013UserTa"
    "rgets\022\036\n\010UTargets\030\001 \003(\0132\014.tms.UTarget\"R\n"
    "\013UTargetInfo\022\035\n\007Targets\030\001 \002(\0132\014.tms.Targ"
    "ets\022\021\n\006uRight\030\002 \001(\r:\0010\022\021\n\tselfparam\030\003 \001("
    "\014\"6\n\014UTargetInfos\022&\n\014UTargetInfos\030\001 \003(\0132"
    "\020.tms.UTargetInfo\"\222\003\n\017UserPrivateInfo\022\022\n"
    "\007nGender\030\001 \001(\r:\0010\022\024\n\tuBirthday\030\002 \001(\r:\0010\022"
    "\025\n\nutmRegtime\030\003 \001(\r:\0010\022\026\n\013nClientType\030\004 "
    "\001(\r:\0010\022\023\n\013strSigature\030\005 \001(\014\022\022\n\nstrCountr"
    "y\030\006 \001(\014\022\023\n\013strProvince\030\007 \001(\014\022\017\n\007strCity\030"
    "\010 \001(\014\022\020\n\010strPhone\030\t \001(\014\022\021\n\tstrMobile\030\n \001"
    "(\014\022\025\n\rstrOccupation\030\013 \001(\014\022\022\n\nstrCollege\030"
    "\014 \001(\014\022\020\n\010strEmail\030\r \001(\014\022\023\n\013strHomepage\030\016"
    " \001(\014\022\023\n\013strPersonal\030\017 \001(\014\022\022\n\nnShengXiao\030"
    "\020 \001(\r\022\020\n\010nConstel\030\021 \001(\r\022\016\n\006nBlood\030\022 \001(\r\022"
    "\025\n\rstrCustomFace\030\023 \001(\014\"\\\n\010UserInfo\022$\n\013Ta"
    "rgetInfos\030\002 \002(\0132\017.tms.TargetInfo\022*\n\014Priv"
    "ateInfos\030\003 \001(\0132\024.tms.UserPrivateInfo\"\214\001\n"
    "\014UserInfo_Old\022$\n\013TargetInfos\030\001 \002(\0132\017.tms"
    ".TargetInfo\022*\n\014PrivateInfos\030\002 \001(\0132\024.tms."
    "UserPrivateInfo\022*\n\016TargetsNotifys\030\003 \001(\0132"
    "\022.tms.TargetsNotify\">\n\016UserOnlineInfo\022\025\n"
    "\nuAccountID\030\001 \002(\r:\0010\022\025\n\nuLoginFlag\030\002 \002(\r"
    ":\0010\"L\n\tLoginInfo\022\024\n\014strAccountNo\030\001 \002(\t\022\021"
    "\n\tstrPasswd\030\002 \002(\t\022\026\n\013uLoginFlags\030\003 \001(\r:\001"
    "0\"N\n\014LoginAnsInfo\022\022\n\nuAccountID\030\001 \002(\r\022\022\n"
    "\nuSessionID\030\002 \002(\r\022\026\n\013nClientType\030\003 \002(\r:\001"
    "0\"L\n\014RegisterInfo\022\024\n\014strAccountNo\030\001 \002(\t\022"
    "\021\n\tstrPasswd\030\002 \002(\t\022\023\n\013strNickName\030\003 \002(\014\""
    "\251\001\n\013UserInfoReq\022,\n\004ncmd\030\001 \002(\0162\024.tms.User"
    "InfoReq.cmd:\010UserInfo\"l\n\003cmd\022\016\n\nPublicIn"
    "fo\020\000\022\016\n\nMemberList\020\001\022\023\n\017UserPrivateInfo\020"
    "\002\022\014\n\010UserInfo\020\003\022\020\n\014UserInfo_Old\020\004\022\020\n\014UTa"
    "rgetInfos\020\005\"9\n\014TargetsQuery\022\024\n\014strAccoun"
    "tNo\030\001 \002(\t\022\023\n\013strNickName\030\002 \002(\014\"c\n\016Update"
    "UserInfo\022\023\n\013strNickName\030\001 \001(\014\022\020\n\005nFace\030\002"
    " \001(\r:\0010\022*\n\014PrivateInfos\030\003 \001(\0132\024.tms.User"
    "PrivateInfo\"\276\001\n\nTargetsAdd\022\024\n\tuTargetID\030"
    "\001 \002(\r:\0010\022(\n\004ncmd\030\002 \002(\0162\023.tms.TargetsAdd."
    "cmd:\005Apply\"p\n\003cmd\022\t\n\005Apply\020\000\022\013\n\007Applied\020"
    "\001\022\t\n\005Agree\020\002\022\n\n\006Agreed\020\003\022\n\n\006Refuse\020\004\022\013\n\007"
    "Refused\020\005\022\n\n\006Delete\020\006\022\013\n\007Deleted\020\007\022\010\n\004Fa"
    "il\020\010\"P\n\020UpdateTargetInfo\022\024\n\tuTargetID\030\001 "
    "\002(\r:\0010\022\023\n\013strNickName\030\002 \001(\014\022\021\n\tselfparam"
    "\030\003 \001(\014\"\220\001\n\016UserInfoNotify\022\025\n\nuAccountID\030"
    "\001 \002(\r:\0010\022\024\n\014strAccountNo\030\002 \001(\t\022\023\n\013strNic"
    "kName\030\003 \001(\014\022\020\n\005nFace\030\004 \001(\r:\0010\022*\n\014Private"
    "Infos\030\005 \001(\0132\024.tms.UserPrivateInfo\"^\n\020Tar"
    "getsAddNotify\022$\n\013TargetsAdds\030\001 \002(\0132\017.tms"
    ".TargetsAdd\022$\n\013TargetInfos\030\003 \002(\0132\017.tms.T"
    "argetInfo\"/\n\rTargetsNotify\022\036\n\010Targetss\030\001"
    " \003(\0132\014.tms.Targets\"!\n\nServerTime\022\023\n\013uSer"
    "verTime\030\001 \002(\004\"}\n\014FileLoadInfo\022\017\n\007strName"
    "\030\001 \002(\014\022\017\n\007uOffset\030\002 \002(\r\022\021\n\tuDownsize\030\003 \002"
    "(\r\022\022\n\nuLocalsize\030\004 \002(\r\022\022\n\nuLocaltime\030\005 \002"
    "(\r\022\020\n\010bVersion\030\006 \002(\r\"z\n\014FileLoadData\022\016\n\006"
    "uError\030\001 \002(\r\022\021\n\tuFilesize\030\002 \002(\r\022\017\n\007uOffs"
    "et\030\003 \002(\r\022\021\n\tuDownsize\030\004 \002(\r\022\023\n\013uTmmodifi"
    "ed\030\005 \002(\r\022\016\n\006szData\030\006 \001(\014\"S\n\007TalkMsg\022\022\n\007u"
    "SendID\030\001 \002(\r:\0010\022\024\n\tuTargetID\030\002 \002(\r:\0010\022\021\n"
    "\006uMsgID\030\003 \001(\r:\0010\022\013\n\003msg\030\004 \002(\014\"H\n\nTalkMsg"
    "Ans\022\021\n\006uError\030\001 \002(\r:\0010\022\024\n\tuTargetID\030\002 \002("
    "\r:\0010\022\021\n\006uMsgID\030\003 \002(\r:\0010\"W\n\nTmpTalkMsg\022\024\n"
    "\tuTargetID\030\001 \002(\r:\0010\022\023\n\013strNickName\030\002 \002(\014"
    "\022\021\n\006uMsgID\030\003 \001(\r:\0010\022\013\n\003msg\030\004 \002(\014\"9\n\016Pull"
    "TalkMsgReq\022\024\n\tuTargetID\030\001 \002(\r:\0010\022\021\n\006uMsg"
    "ID\030\002 \002(\r:\0010\"q\n\rMsgInfoNotify\022,\n\010MsgInfos"
    "\030\001 \003(\0132\032.tms.MsgInfoNotify.MsgInfo\0322\n\007Ms"
    "gInfo\022\024\n\tuTargetID\030\001 \002(\r:\0010\022\021\n\006uMsgID\030\002 "
    "\002(\r:\0010\"C\n\013TalkMsgInfo\022\024\n\tuTargetID\030\002 \002(\r"
    ":\0010\022\036\n\010TalkMsgs\030\003 \003(\0132\014.tms.TalkMsg\"\022\n\020G"
    "roupPrivateInfo\"\\\n\tJoinGTalk\022\024\n\tuTargetI"
    "D\030\001 \002(\r:\0010\022\023\n\010uGTalkID\030\002 \002(\r:\0010\022$\n\013Targe"
    "tInfos\030\003 \001(\0132\017.tms.TargetInfo\"9\n\014AnsJoin"
    "GTalk\022\024\n\tuTargetID\030\001 \002(\r:\0010\022\023\n\010uGTalkID\030"
    "\002 \002(\r:\0010\"6\n\tQuitGTalk\022\024\n\tuTargetID\030\001 \002(\r"
    ":\0010\022\023\n\010uGTalkID\030\002 \002(\r:\0010\"Y\n\rSysTargetInf"
    "o\022\023\n\010uVersion\030\001 \002(\r:\0010\022\024\n\tuTargetID\030\002 \002("
    "\r:\0010\022\035\n\004objs\030\003 \001(\0132\017.tms.TargetInfo\"6\n\021S"
    "ysTargetInfoList\022!\n\005nodes\030\002 \003(\0132\022.tms.Sy"
    "sTargetInfo\"Y\n\rSysMemberInfo\022\023\n\010uVersion"
    "\030\001 \002(\r:\0010\022\024\n\tuTargetID\030\002 \002(\r:\0010\022\035\n\004objs\030"
    "\003 \001(\0132\017.tms.MemberInfo\"a\n\021SysMemberInfoL"
    "ist\022\023\n\010uVersion\030\001 \002(\r:\0010\022\024\n\tuTargetID\030\002 "
    "\002(\r:\0010\022!\n\005nodes\030\003 \003(\0132\022.tms.SysMemberInf"
    "o\"c\n\022SysUserPrivateInfo\022\023\n\010uVersion\030\001 \002("
    "\r:\0010\022\024\n\tuTargetID\030\002 \002(\r:\0010\022\"\n\004objs\030\003 \001(\013"
    "2\024.tms.UserPrivateInfo\"@\n\026SysUserPrivate"
    "InfoList\022&\n\005nodes\030\001 \003(\0132\027.tms.SysUserPri"
    "vateInfo\"^\n\014SysGroupInfo\022\023\n\010uVersion\030\001 \002"
    "(\r:\0010\022\024\n\tuTargetID\030\002 \002(\r:\0010\022#\n\004objs\030\004 \001("
    "\0132\025.tms.GroupPrivateInfo\"4\n\020SysGroupInfo"
    "List\022 \n\005nodes\030\003 \003(\0132\021.tms.SysGroupInfo\"L"
    "\n\020SysGTalkInfoList\022\023\n\010uVersion\030\001 \002(\r:\0010\022"
    "#\n\004objs\030\003 \001(\0132\025.tms.SysGroupInfoList\"J\n\013"
    "SysUserInfo\022\023\n\010uVersion\030\001 \002(\r:\0010\022&\n\014Priv"
    "ateInfos\030\003 \001(\0132\020.tms.PrivateInfo\"T\n\nSysT"
    "alkMsg\022\023\n\010uVersion\030\001 \002(\r:\0010\022\024\n\tuTargetID"
    "\030\002 \002(\r:\0010\022\033\n\005nodes\030\003 \003(\0132\014.tms.TalkMsg\"0"
    "\n\016SysTalkMsgList\022\036\n\005nodes\030\001 \003(\0132\017.tms.Sy"
    "sTalkMsg\"=\n\020SysTargetMsgInfo\022\023\n\010uVersion"
    "\030\001 \002(\r:\0010\022\024\n\tuTargetID\030\002 \002(\r:\0010\"<\n\024SysTa"
    "rgetMsgInfoList\022$\n\005nodes\030\001 \003(\0132\025.tms.Sys"
    "TargetMsgInfo", 4173);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "user.proto", &protobuf_RegisterTypes);
  UTargetSelfparam::default_instance_ = new UTargetSelfparam();
  UserTargets::default_instance_ = new UserTargets();
  UTargetInfo::default_instance_ = new UTargetInfo();
  UTargetInfos::default_instance_ = new UTargetInfos();
  UserPrivateInfo::default_instance_ = new UserPrivateInfo();
  UserInfo::default_instance_ = new UserInfo();
  UserInfo_Old::default_instance_ = new UserInfo_Old();
  UserOnlineInfo::default_instance_ = new UserOnlineInfo();
  LoginInfo::default_instance_ = new LoginInfo();
  LoginAnsInfo::default_instance_ = new LoginAnsInfo();
  RegisterInfo::default_instance_ = new RegisterInfo();
  UserInfoReq::default_instance_ = new UserInfoReq();
  TargetsQuery::default_instance_ = new TargetsQuery();
  UpdateUserInfo::default_instance_ = new UpdateUserInfo();
  TargetsAdd::default_instance_ = new TargetsAdd();
  UpdateTargetInfo::default_instance_ = new UpdateTargetInfo();
  UserInfoNotify::default_instance_ = new UserInfoNotify();
  TargetsAddNotify::default_instance_ = new TargetsAddNotify();
  TargetsNotify::default_instance_ = new TargetsNotify();
  ServerTime::default_instance_ = new ServerTime();
  FileLoadInfo::default_instance_ = new FileLoadInfo();
  FileLoadData::default_instance_ = new FileLoadData();
  TalkMsg::default_instance_ = new TalkMsg();
  TalkMsgAns::default_instance_ = new TalkMsgAns();
  TmpTalkMsg::default_instance_ = new TmpTalkMsg();
  PullTalkMsgReq::default_instance_ = new PullTalkMsgReq();
  MsgInfoNotify::default_instance_ = new MsgInfoNotify();
  MsgInfoNotify_MsgInfo::default_instance_ = new MsgInfoNotify_MsgInfo();
  TalkMsgInfo::default_instance_ = new TalkMsgInfo();
  GroupPrivateInfo::default_instance_ = new GroupPrivateInfo();
  JoinGTalk::default_instance_ = new JoinGTalk();
  AnsJoinGTalk::default_instance_ = new AnsJoinGTalk();
  QuitGTalk::default_instance_ = new QuitGTalk();
  SysTargetInfo::default_instance_ = new SysTargetInfo();
  SysTargetInfoList::default_instance_ = new SysTargetInfoList();
  SysMemberInfo::default_instance_ = new SysMemberInfo();
  SysMemberInfoList::default_instance_ = new SysMemberInfoList();
  SysUserPrivateInfo::default_instance_ = new SysUserPrivateInfo();
  SysUserPrivateInfoList::default_instance_ = new SysUserPrivateInfoList();
  SysGroupInfo::default_instance_ = new SysGroupInfo();
  SysGroupInfoList::default_instance_ = new SysGroupInfoList();
  SysGTalkInfoList::default_instance_ = new SysGTalkInfoList();
  SysUserInfo::default_instance_ = new SysUserInfo();
  SysTalkMsg::default_instance_ = new SysTalkMsg();
  SysTalkMsgList::default_instance_ = new SysTalkMsgList();
  SysTargetMsgInfo::default_instance_ = new SysTargetMsgInfo();
  SysTargetMsgInfoList::default_instance_ = new SysTargetMsgInfoList();
  UTargetSelfparam::default_instance_->InitAsDefaultInstance();
  UserTargets::default_instance_->InitAsDefaultInstance();
  UTargetInfo::default_instance_->InitAsDefaultInstance();
  UTargetInfos::default_instance_->InitAsDefaultInstance();
  UserPrivateInfo::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  UserInfo_Old::default_instance_->InitAsDefaultInstance();
  UserOnlineInfo::default_instance_->InitAsDefaultInstance();
  LoginInfo::default_instance_->InitAsDefaultInstance();
  LoginAnsInfo::default_instance_->InitAsDefaultInstance();
  RegisterInfo::default_instance_->InitAsDefaultInstance();
  UserInfoReq::default_instance_->InitAsDefaultInstance();
  TargetsQuery::default_instance_->InitAsDefaultInstance();
  UpdateUserInfo::default_instance_->InitAsDefaultInstance();
  TargetsAdd::default_instance_->InitAsDefaultInstance();
  UpdateTargetInfo::default_instance_->InitAsDefaultInstance();
  UserInfoNotify::default_instance_->InitAsDefaultInstance();
  TargetsAddNotify::default_instance_->InitAsDefaultInstance();
  TargetsNotify::default_instance_->InitAsDefaultInstance();
  ServerTime::default_instance_->InitAsDefaultInstance();
  FileLoadInfo::default_instance_->InitAsDefaultInstance();
  FileLoadData::default_instance_->InitAsDefaultInstance();
  TalkMsg::default_instance_->InitAsDefaultInstance();
  TalkMsgAns::default_instance_->InitAsDefaultInstance();
  TmpTalkMsg::default_instance_->InitAsDefaultInstance();
  PullTalkMsgReq::default_instance_->InitAsDefaultInstance();
  MsgInfoNotify::default_instance_->InitAsDefaultInstance();
  MsgInfoNotify_MsgInfo::default_instance_->InitAsDefaultInstance();
  TalkMsgInfo::default_instance_->InitAsDefaultInstance();
  GroupPrivateInfo::default_instance_->InitAsDefaultInstance();
  JoinGTalk::default_instance_->InitAsDefaultInstance();
  AnsJoinGTalk::default_instance_->InitAsDefaultInstance();
  QuitGTalk::default_instance_->InitAsDefaultInstance();
  SysTargetInfo::default_instance_->InitAsDefaultInstance();
  SysTargetInfoList::default_instance_->InitAsDefaultInstance();
  SysMemberInfo::default_instance_->InitAsDefaultInstance();
  SysMemberInfoList::default_instance_->InitAsDefaultInstance();
  SysUserPrivateInfo::default_instance_->InitAsDefaultInstance();
  SysUserPrivateInfoList::default_instance_->InitAsDefaultInstance();
  SysGroupInfo::default_instance_->InitAsDefaultInstance();
  SysGroupInfoList::default_instance_->InitAsDefaultInstance();
  SysGTalkInfoList::default_instance_->InitAsDefaultInstance();
  SysUserInfo::default_instance_->InitAsDefaultInstance();
  SysTalkMsg::default_instance_->InitAsDefaultInstance();
  SysTalkMsgList::default_instance_->InitAsDefaultInstance();
  SysTargetMsgInfo::default_instance_->InitAsDefaultInstance();
  SysTargetMsgInfoList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_user_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_user_2eproto {
  StaticDescriptorInitializer_user_2eproto() {
    protobuf_AddDesc_user_2eproto();
  }
} static_descriptor_initializer_user_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UTargetSelfparam::kStrNickNameFieldNumber;
#endif  // !_MSC_VER

UTargetSelfparam::UTargetSelfparam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UTargetSelfparam::InitAsDefaultInstance() {
}

UTargetSelfparam::UTargetSelfparam(const UTargetSelfparam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UTargetSelfparam::SharedCtor() {
  _cached_size_ = 0;
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UTargetSelfparam::~UTargetSelfparam() {
  SharedDtor();
}

void UTargetSelfparam::SharedDtor() {
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (this != default_instance_) {
  }
}

void UTargetSelfparam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UTargetSelfparam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UTargetSelfparam_descriptor_;
}

const UTargetSelfparam& UTargetSelfparam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UTargetSelfparam* UTargetSelfparam::default_instance_ = NULL;

UTargetSelfparam* UTargetSelfparam::New() const {
  return new UTargetSelfparam;
}

void UTargetSelfparam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UTargetSelfparam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes strNickName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strnickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UTargetSelfparam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes strNickName = 1;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->strnickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UTargetSelfparam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes strNickName = 1;
  if (has_strnickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->strnickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UTargetSelfparam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes strNickName = 1;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strnickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UTargetSelfparam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UTargetSelfparam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UTargetSelfparam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UTargetSelfparam::MergeFrom(const UTargetSelfparam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UTargetSelfparam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UTargetSelfparam::CopyFrom(const UTargetSelfparam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UTargetSelfparam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UTargetSelfparam::Swap(UTargetSelfparam* other) {
  if (other != this) {
    std::swap(strnickname_, other->strnickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UTargetSelfparam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UTargetSelfparam_descriptor_;
  metadata.reflection = UTargetSelfparam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserTargets::kUTargetsFieldNumber;
#endif  // !_MSC_VER

UserTargets::UserTargets()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserTargets::InitAsDefaultInstance() {
}

UserTargets::UserTargets(const UserTargets& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserTargets::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserTargets::~UserTargets() {
  SharedDtor();
}

void UserTargets::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserTargets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserTargets::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserTargets_descriptor_;
}

const UserTargets& UserTargets::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UserTargets* UserTargets::default_instance_ = NULL;

UserTargets* UserTargets::New() const {
  return new UserTargets;
}

void UserTargets::Clear() {
  utargets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserTargets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.UTarget UTargets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UTargets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_utargets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_UTargets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserTargets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.UTarget UTargets = 1;
  for (int i = 0; i < this->utargets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->utargets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserTargets::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.UTarget UTargets = 1;
  for (int i = 0; i < this->utargets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->utargets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserTargets::ByteSize() const {
  int total_size = 0;

  // repeated .tms.UTarget UTargets = 1;
  total_size += 1 * this->utargets_size();
  for (int i = 0; i < this->utargets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->utargets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserTargets::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserTargets* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserTargets*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserTargets::MergeFrom(const UserTargets& from) {
  GOOGLE_CHECK_NE(&from, this);
  utargets_.MergeFrom(from.utargets_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserTargets::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTargets::CopyFrom(const UserTargets& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTargets::IsInitialized() const {

  for (int i = 0; i < utargets_size(); i++) {
    if (!this->utargets(i).IsInitialized()) return false;
  }
  return true;
}

void UserTargets::Swap(UserTargets* other) {
  if (other != this) {
    utargets_.Swap(&other->utargets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserTargets::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserTargets_descriptor_;
  metadata.reflection = UserTargets_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UTargetInfo::kTargetsFieldNumber;
const int UTargetInfo::kURightFieldNumber;
const int UTargetInfo::kSelfparamFieldNumber;
#endif  // !_MSC_VER

UTargetInfo::UTargetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UTargetInfo::InitAsDefaultInstance() {
  targets_ = const_cast< ::tms::Targets*>(&::tms::Targets::default_instance());
}

UTargetInfo::UTargetInfo(const UTargetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UTargetInfo::SharedCtor() {
  _cached_size_ = 0;
  targets_ = NULL;
  uright_ = 0u;
  selfparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UTargetInfo::~UTargetInfo() {
  SharedDtor();
}

void UTargetInfo::SharedDtor() {
  if (selfparam_ != &::google::protobuf::internal::kEmptyString) {
    delete selfparam_;
  }
  if (this != default_instance_) {
    delete targets_;
  }
}

void UTargetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UTargetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UTargetInfo_descriptor_;
}

const UTargetInfo& UTargetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UTargetInfo* UTargetInfo::default_instance_ = NULL;

UTargetInfo* UTargetInfo::New() const {
  return new UTargetInfo;
}

void UTargetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_targets()) {
      if (targets_ != NULL) targets_->::tms::Targets::Clear();
    }
    uright_ = 0u;
    if (has_selfparam()) {
      if (selfparam_ != &::google::protobuf::internal::kEmptyString) {
        selfparam_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UTargetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tms.Targets Targets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uRight;
        break;
      }

      // optional uint32 uRight = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uright_)));
          set_has_uright();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_selfparam;
        break;
      }

      // optional bytes selfparam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfparam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_selfparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UTargetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .tms.Targets Targets = 1;
  if (has_targets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->targets(), output);
  }

  // optional uint32 uRight = 2 [default = 0];
  if (has_uright()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uright(), output);
  }

  // optional bytes selfparam = 3;
  if (has_selfparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->selfparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UTargetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .tms.Targets Targets = 1;
  if (has_targets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->targets(), target);
  }

  // optional uint32 uRight = 2 [default = 0];
  if (has_uright()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uright(), target);
  }

  // optional bytes selfparam = 3;
  if (has_selfparam()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->selfparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UTargetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tms.Targets Targets = 1;
    if (has_targets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targets());
    }

    // optional uint32 uRight = 2 [default = 0];
    if (has_uright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uright());
    }

    // optional bytes selfparam = 3;
    if (has_selfparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->selfparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UTargetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UTargetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UTargetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UTargetInfo::MergeFrom(const UTargetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targets()) {
      mutable_targets()->::tms::Targets::MergeFrom(from.targets());
    }
    if (from.has_uright()) {
      set_uright(from.uright());
    }
    if (from.has_selfparam()) {
      set_selfparam(from.selfparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UTargetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UTargetInfo::CopyFrom(const UTargetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UTargetInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_targets()) {
    if (!this->targets().IsInitialized()) return false;
  }
  return true;
}

void UTargetInfo::Swap(UTargetInfo* other) {
  if (other != this) {
    std::swap(targets_, other->targets_);
    std::swap(uright_, other->uright_);
    std::swap(selfparam_, other->selfparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UTargetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UTargetInfo_descriptor_;
  metadata.reflection = UTargetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UTargetInfos::kUTargetInfosFieldNumber;
#endif  // !_MSC_VER

UTargetInfos::UTargetInfos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UTargetInfos::InitAsDefaultInstance() {
}

UTargetInfos::UTargetInfos(const UTargetInfos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UTargetInfos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UTargetInfos::~UTargetInfos() {
  SharedDtor();
}

void UTargetInfos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UTargetInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UTargetInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UTargetInfos_descriptor_;
}

const UTargetInfos& UTargetInfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UTargetInfos* UTargetInfos::default_instance_ = NULL;

UTargetInfos* UTargetInfos::New() const {
  return new UTargetInfos;
}

void UTargetInfos::Clear() {
  utargetinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UTargetInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.UTargetInfo UTargetInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UTargetInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_utargetinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_UTargetInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UTargetInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.UTargetInfo UTargetInfos = 1;
  for (int i = 0; i < this->utargetinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->utargetinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UTargetInfos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.UTargetInfo UTargetInfos = 1;
  for (int i = 0; i < this->utargetinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->utargetinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UTargetInfos::ByteSize() const {
  int total_size = 0;

  // repeated .tms.UTargetInfo UTargetInfos = 1;
  total_size += 1 * this->utargetinfos_size();
  for (int i = 0; i < this->utargetinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->utargetinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UTargetInfos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UTargetInfos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UTargetInfos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UTargetInfos::MergeFrom(const UTargetInfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  utargetinfos_.MergeFrom(from.utargetinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UTargetInfos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UTargetInfos::CopyFrom(const UTargetInfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UTargetInfos::IsInitialized() const {

  for (int i = 0; i < utargetinfos_size(); i++) {
    if (!this->utargetinfos(i).IsInitialized()) return false;
  }
  return true;
}

void UTargetInfos::Swap(UTargetInfos* other) {
  if (other != this) {
    utargetinfos_.Swap(&other->utargetinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UTargetInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UTargetInfos_descriptor_;
  metadata.reflection = UTargetInfos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserPrivateInfo::kNGenderFieldNumber;
const int UserPrivateInfo::kUBirthdayFieldNumber;
const int UserPrivateInfo::kUtmRegtimeFieldNumber;
const int UserPrivateInfo::kNClientTypeFieldNumber;
const int UserPrivateInfo::kStrSigatureFieldNumber;
const int UserPrivateInfo::kStrCountryFieldNumber;
const int UserPrivateInfo::kStrProvinceFieldNumber;
const int UserPrivateInfo::kStrCityFieldNumber;
const int UserPrivateInfo::kStrPhoneFieldNumber;
const int UserPrivateInfo::kStrMobileFieldNumber;
const int UserPrivateInfo::kStrOccupationFieldNumber;
const int UserPrivateInfo::kStrCollegeFieldNumber;
const int UserPrivateInfo::kStrEmailFieldNumber;
const int UserPrivateInfo::kStrHomepageFieldNumber;
const int UserPrivateInfo::kStrPersonalFieldNumber;
const int UserPrivateInfo::kNShengXiaoFieldNumber;
const int UserPrivateInfo::kNConstelFieldNumber;
const int UserPrivateInfo::kNBloodFieldNumber;
const int UserPrivateInfo::kStrCustomFaceFieldNumber;
#endif  // !_MSC_VER

UserPrivateInfo::UserPrivateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserPrivateInfo::InitAsDefaultInstance() {
}

UserPrivateInfo::UserPrivateInfo(const UserPrivateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserPrivateInfo::SharedCtor() {
  _cached_size_ = 0;
  ngender_ = 0u;
  ubirthday_ = 0u;
  utmregtime_ = 0u;
  nclienttype_ = 0u;
  strsigature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strcountry_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strprovince_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strcity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strmobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stroccupation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strcollege_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stremail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strhomepage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strpersonal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nshengxiao_ = 0u;
  nconstel_ = 0u;
  nblood_ = 0u;
  strcustomface_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserPrivateInfo::~UserPrivateInfo() {
  SharedDtor();
}

void UserPrivateInfo::SharedDtor() {
  if (strsigature_ != &::google::protobuf::internal::kEmptyString) {
    delete strsigature_;
  }
  if (strcountry_ != &::google::protobuf::internal::kEmptyString) {
    delete strcountry_;
  }
  if (strprovince_ != &::google::protobuf::internal::kEmptyString) {
    delete strprovince_;
  }
  if (strcity_ != &::google::protobuf::internal::kEmptyString) {
    delete strcity_;
  }
  if (strphone_ != &::google::protobuf::internal::kEmptyString) {
    delete strphone_;
  }
  if (strmobile_ != &::google::protobuf::internal::kEmptyString) {
    delete strmobile_;
  }
  if (stroccupation_ != &::google::protobuf::internal::kEmptyString) {
    delete stroccupation_;
  }
  if (strcollege_ != &::google::protobuf::internal::kEmptyString) {
    delete strcollege_;
  }
  if (stremail_ != &::google::protobuf::internal::kEmptyString) {
    delete stremail_;
  }
  if (strhomepage_ != &::google::protobuf::internal::kEmptyString) {
    delete strhomepage_;
  }
  if (strpersonal_ != &::google::protobuf::internal::kEmptyString) {
    delete strpersonal_;
  }
  if (strcustomface_ != &::google::protobuf::internal::kEmptyString) {
    delete strcustomface_;
  }
  if (this != default_instance_) {
  }
}

void UserPrivateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserPrivateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserPrivateInfo_descriptor_;
}

const UserPrivateInfo& UserPrivateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UserPrivateInfo* UserPrivateInfo::default_instance_ = NULL;

UserPrivateInfo* UserPrivateInfo::New() const {
  return new UserPrivateInfo;
}

void UserPrivateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ngender_ = 0u;
    ubirthday_ = 0u;
    utmregtime_ = 0u;
    nclienttype_ = 0u;
    if (has_strsigature()) {
      if (strsigature_ != &::google::protobuf::internal::kEmptyString) {
        strsigature_->clear();
      }
    }
    if (has_strcountry()) {
      if (strcountry_ != &::google::protobuf::internal::kEmptyString) {
        strcountry_->clear();
      }
    }
    if (has_strprovince()) {
      if (strprovince_ != &::google::protobuf::internal::kEmptyString) {
        strprovince_->clear();
      }
    }
    if (has_strcity()) {
      if (strcity_ != &::google::protobuf::internal::kEmptyString) {
        strcity_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_strphone()) {
      if (strphone_ != &::google::protobuf::internal::kEmptyString) {
        strphone_->clear();
      }
    }
    if (has_strmobile()) {
      if (strmobile_ != &::google::protobuf::internal::kEmptyString) {
        strmobile_->clear();
      }
    }
    if (has_stroccupation()) {
      if (stroccupation_ != &::google::protobuf::internal::kEmptyString) {
        stroccupation_->clear();
      }
    }
    if (has_strcollege()) {
      if (strcollege_ != &::google::protobuf::internal::kEmptyString) {
        strcollege_->clear();
      }
    }
    if (has_stremail()) {
      if (stremail_ != &::google::protobuf::internal::kEmptyString) {
        stremail_->clear();
      }
    }
    if (has_strhomepage()) {
      if (strhomepage_ != &::google::protobuf::internal::kEmptyString) {
        strhomepage_->clear();
      }
    }
    if (has_strpersonal()) {
      if (strpersonal_ != &::google::protobuf::internal::kEmptyString) {
        strpersonal_->clear();
      }
    }
    nshengxiao_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    nconstel_ = 0u;
    nblood_ = 0u;
    if (has_strcustomface()) {
      if (strcustomface_ != &::google::protobuf::internal::kEmptyString) {
        strcustomface_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserPrivateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nGender = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ngender_)));
          set_has_ngender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uBirthday;
        break;
      }

      // optional uint32 uBirthday = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uBirthday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ubirthday_)));
          set_has_ubirthday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_utmRegtime;
        break;
      }

      // optional uint32 utmRegtime = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_utmRegtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utmregtime_)));
          set_has_utmregtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nClientType;
        break;
      }

      // optional uint32 nClientType = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nClientType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nclienttype_)));
          set_has_nclienttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strSigature;
        break;
      }

      // optional bytes strSigature = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strSigature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strsigature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_strCountry;
        break;
      }

      // optional bytes strCountry = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strCountry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strcountry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strProvince;
        break;
      }

      // optional bytes strProvince = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strProvince:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strprovince()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_strCity;
        break;
      }

      // optional bytes strCity = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strCity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strcity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_strPhone;
        break;
      }

      // optional bytes strPhone = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strphone()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_strMobile;
        break;
      }

      // optional bytes strMobile = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strMobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strmobile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_strOccupation;
        break;
      }

      // optional bytes strOccupation = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strOccupation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stroccupation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_strCollege;
        break;
      }

      // optional bytes strCollege = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strCollege:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strcollege()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_strEmail;
        break;
      }

      // optional bytes strEmail = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strEmail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stremail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_strHomepage;
        break;
      }

      // optional bytes strHomepage = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strHomepage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strhomepage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_strPersonal;
        break;
      }

      // optional bytes strPersonal = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPersonal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strpersonal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_nShengXiao;
        break;
      }

      // optional uint32 nShengXiao = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nShengXiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nshengxiao_)));
          set_has_nshengxiao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_nConstel;
        break;
      }

      // optional uint32 nConstel = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nConstel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nconstel_)));
          set_has_nconstel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_nBlood;
        break;
      }

      // optional uint32 nBlood = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nBlood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nblood_)));
          set_has_nblood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_strCustomFace;
        break;
      }

      // optional bytes strCustomFace = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strCustomFace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strcustomface()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserPrivateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 nGender = 1 [default = 0];
  if (has_ngender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ngender(), output);
  }

  // optional uint32 uBirthday = 2 [default = 0];
  if (has_ubirthday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ubirthday(), output);
  }

  // optional uint32 utmRegtime = 3 [default = 0];
  if (has_utmregtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->utmregtime(), output);
  }

  // optional uint32 nClientType = 4 [default = 0];
  if (has_nclienttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nclienttype(), output);
  }

  // optional bytes strSigature = 5;
  if (has_strsigature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->strsigature(), output);
  }

  // optional bytes strCountry = 6;
  if (has_strcountry()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->strcountry(), output);
  }

  // optional bytes strProvince = 7;
  if (has_strprovince()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->strprovince(), output);
  }

  // optional bytes strCity = 8;
  if (has_strcity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->strcity(), output);
  }

  // optional bytes strPhone = 9;
  if (has_strphone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->strphone(), output);
  }

  // optional bytes strMobile = 10;
  if (has_strmobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->strmobile(), output);
  }

  // optional bytes strOccupation = 11;
  if (has_stroccupation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->stroccupation(), output);
  }

  // optional bytes strCollege = 12;
  if (has_strcollege()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->strcollege(), output);
  }

  // optional bytes strEmail = 13;
  if (has_stremail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->stremail(), output);
  }

  // optional bytes strHomepage = 14;
  if (has_strhomepage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->strhomepage(), output);
  }

  // optional bytes strPersonal = 15;
  if (has_strpersonal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      15, this->strpersonal(), output);
  }

  // optional uint32 nShengXiao = 16;
  if (has_nshengxiao()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->nshengxiao(), output);
  }

  // optional uint32 nConstel = 17;
  if (has_nconstel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->nconstel(), output);
  }

  // optional uint32 nBlood = 18;
  if (has_nblood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->nblood(), output);
  }

  // optional bytes strCustomFace = 19;
  if (has_strcustomface()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      19, this->strcustomface(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserPrivateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 nGender = 1 [default = 0];
  if (has_ngender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ngender(), target);
  }

  // optional uint32 uBirthday = 2 [default = 0];
  if (has_ubirthday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ubirthday(), target);
  }

  // optional uint32 utmRegtime = 3 [default = 0];
  if (has_utmregtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->utmregtime(), target);
  }

  // optional uint32 nClientType = 4 [default = 0];
  if (has_nclienttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->nclienttype(), target);
  }

  // optional bytes strSigature = 5;
  if (has_strsigature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->strsigature(), target);
  }

  // optional bytes strCountry = 6;
  if (has_strcountry()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->strcountry(), target);
  }

  // optional bytes strProvince = 7;
  if (has_strprovince()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->strprovince(), target);
  }

  // optional bytes strCity = 8;
  if (has_strcity()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->strcity(), target);
  }

  // optional bytes strPhone = 9;
  if (has_strphone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->strphone(), target);
  }

  // optional bytes strMobile = 10;
  if (has_strmobile()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->strmobile(), target);
  }

  // optional bytes strOccupation = 11;
  if (has_stroccupation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->stroccupation(), target);
  }

  // optional bytes strCollege = 12;
  if (has_strcollege()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->strcollege(), target);
  }

  // optional bytes strEmail = 13;
  if (has_stremail()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->stremail(), target);
  }

  // optional bytes strHomepage = 14;
  if (has_strhomepage()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->strhomepage(), target);
  }

  // optional bytes strPersonal = 15;
  if (has_strpersonal()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->strpersonal(), target);
  }

  // optional uint32 nShengXiao = 16;
  if (has_nshengxiao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->nshengxiao(), target);
  }

  // optional uint32 nConstel = 17;
  if (has_nconstel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->nconstel(), target);
  }

  // optional uint32 nBlood = 18;
  if (has_nblood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->nblood(), target);
  }

  // optional bytes strCustomFace = 19;
  if (has_strcustomface()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->strcustomface(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserPrivateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 nGender = 1 [default = 0];
    if (has_ngender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ngender());
    }

    // optional uint32 uBirthday = 2 [default = 0];
    if (has_ubirthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ubirthday());
    }

    // optional uint32 utmRegtime = 3 [default = 0];
    if (has_utmregtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utmregtime());
    }

    // optional uint32 nClientType = 4 [default = 0];
    if (has_nclienttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nclienttype());
    }

    // optional bytes strSigature = 5;
    if (has_strsigature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strsigature());
    }

    // optional bytes strCountry = 6;
    if (has_strcountry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strcountry());
    }

    // optional bytes strProvince = 7;
    if (has_strprovince()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strprovince());
    }

    // optional bytes strCity = 8;
    if (has_strcity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strcity());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes strPhone = 9;
    if (has_strphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strphone());
    }

    // optional bytes strMobile = 10;
    if (has_strmobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strmobile());
    }

    // optional bytes strOccupation = 11;
    if (has_stroccupation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stroccupation());
    }

    // optional bytes strCollege = 12;
    if (has_strcollege()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strcollege());
    }

    // optional bytes strEmail = 13;
    if (has_stremail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stremail());
    }

    // optional bytes strHomepage = 14;
    if (has_strhomepage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strhomepage());
    }

    // optional bytes strPersonal = 15;
    if (has_strpersonal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strpersonal());
    }

    // optional uint32 nShengXiao = 16;
    if (has_nshengxiao()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nshengxiao());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 nConstel = 17;
    if (has_nconstel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nconstel());
    }

    // optional uint32 nBlood = 18;
    if (has_nblood()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nblood());
    }

    // optional bytes strCustomFace = 19;
    if (has_strcustomface()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strcustomface());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserPrivateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserPrivateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserPrivateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserPrivateInfo::MergeFrom(const UserPrivateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ngender()) {
      set_ngender(from.ngender());
    }
    if (from.has_ubirthday()) {
      set_ubirthday(from.ubirthday());
    }
    if (from.has_utmregtime()) {
      set_utmregtime(from.utmregtime());
    }
    if (from.has_nclienttype()) {
      set_nclienttype(from.nclienttype());
    }
    if (from.has_strsigature()) {
      set_strsigature(from.strsigature());
    }
    if (from.has_strcountry()) {
      set_strcountry(from.strcountry());
    }
    if (from.has_strprovince()) {
      set_strprovince(from.strprovince());
    }
    if (from.has_strcity()) {
      set_strcity(from.strcity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_strphone()) {
      set_strphone(from.strphone());
    }
    if (from.has_strmobile()) {
      set_strmobile(from.strmobile());
    }
    if (from.has_stroccupation()) {
      set_stroccupation(from.stroccupation());
    }
    if (from.has_strcollege()) {
      set_strcollege(from.strcollege());
    }
    if (from.has_stremail()) {
      set_stremail(from.stremail());
    }
    if (from.has_strhomepage()) {
      set_strhomepage(from.strhomepage());
    }
    if (from.has_strpersonal()) {
      set_strpersonal(from.strpersonal());
    }
    if (from.has_nshengxiao()) {
      set_nshengxiao(from.nshengxiao());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_nconstel()) {
      set_nconstel(from.nconstel());
    }
    if (from.has_nblood()) {
      set_nblood(from.nblood());
    }
    if (from.has_strcustomface()) {
      set_strcustomface(from.strcustomface());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserPrivateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPrivateInfo::CopyFrom(const UserPrivateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPrivateInfo::IsInitialized() const {

  return true;
}

void UserPrivateInfo::Swap(UserPrivateInfo* other) {
  if (other != this) {
    std::swap(ngender_, other->ngender_);
    std::swap(ubirthday_, other->ubirthday_);
    std::swap(utmregtime_, other->utmregtime_);
    std::swap(nclienttype_, other->nclienttype_);
    std::swap(strsigature_, other->strsigature_);
    std::swap(strcountry_, other->strcountry_);
    std::swap(strprovince_, other->strprovince_);
    std::swap(strcity_, other->strcity_);
    std::swap(strphone_, other->strphone_);
    std::swap(strmobile_, other->strmobile_);
    std::swap(stroccupation_, other->stroccupation_);
    std::swap(strcollege_, other->strcollege_);
    std::swap(stremail_, other->stremail_);
    std::swap(strhomepage_, other->strhomepage_);
    std::swap(strpersonal_, other->strpersonal_);
    std::swap(nshengxiao_, other->nshengxiao_);
    std::swap(nconstel_, other->nconstel_);
    std::swap(nblood_, other->nblood_);
    std::swap(strcustomface_, other->strcustomface_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserPrivateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserPrivateInfo_descriptor_;
  metadata.reflection = UserPrivateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kTargetInfosFieldNumber;
const int UserInfo::kPrivateInfosFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfo::InitAsDefaultInstance() {
  targetinfos_ = const_cast< ::tms::TargetInfo*>(&::tms::TargetInfo::default_instance());
  privateinfos_ = const_cast< ::tms::UserPrivateInfo*>(&::tms::UserPrivateInfo::default_instance());
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfo::SharedCtor() {
  _cached_size_ = 0;
  targetinfos_ = NULL;
  privateinfos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (this != default_instance_) {
    delete targetinfos_;
    delete privateinfos_;
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_targetinfos()) {
      if (targetinfos_ != NULL) targetinfos_->::tms::TargetInfo::Clear();
    }
    if (has_privateinfos()) {
      if (privateinfos_ != NULL) privateinfos_->::tms::UserPrivateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tms.TargetInfo TargetInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_PrivateInfos;
        break;
      }

      // optional .tms.UserPrivateInfo PrivateInfos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PrivateInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_privateinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .tms.TargetInfo TargetInfos = 2;
  if (has_targetinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targetinfos(), output);
  }

  // optional .tms.UserPrivateInfo PrivateInfos = 3;
  if (has_privateinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->privateinfos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .tms.TargetInfo TargetInfos = 2;
  if (has_targetinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->targetinfos(), target);
  }

  // optional .tms.UserPrivateInfo PrivateInfos = 3;
  if (has_privateinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->privateinfos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tms.TargetInfo TargetInfos = 2;
    if (has_targetinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetinfos());
    }

    // optional .tms.UserPrivateInfo PrivateInfos = 3;
    if (has_privateinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->privateinfos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetinfos()) {
      mutable_targetinfos()->::tms::TargetInfo::MergeFrom(from.targetinfos());
    }
    if (from.has_privateinfos()) {
      mutable_privateinfos()->::tms::UserPrivateInfo::MergeFrom(from.privateinfos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_targetinfos()) {
    if (!this->targetinfos().IsInitialized()) return false;
  }
  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(targetinfos_, other->targetinfos_);
    std::swap(privateinfos_, other->privateinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo_Old::kTargetInfosFieldNumber;
const int UserInfo_Old::kPrivateInfosFieldNumber;
const int UserInfo_Old::kTargetsNotifysFieldNumber;
#endif  // !_MSC_VER

UserInfo_Old::UserInfo_Old()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfo_Old::InitAsDefaultInstance() {
  targetinfos_ = const_cast< ::tms::TargetInfo*>(&::tms::TargetInfo::default_instance());
  privateinfos_ = const_cast< ::tms::UserPrivateInfo*>(&::tms::UserPrivateInfo::default_instance());
  targetsnotifys_ = const_cast< ::tms::TargetsNotify*>(&::tms::TargetsNotify::default_instance());
}

UserInfo_Old::UserInfo_Old(const UserInfo_Old& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfo_Old::SharedCtor() {
  _cached_size_ = 0;
  targetinfos_ = NULL;
  privateinfos_ = NULL;
  targetsnotifys_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo_Old::~UserInfo_Old() {
  SharedDtor();
}

void UserInfo_Old::SharedDtor() {
  if (this != default_instance_) {
    delete targetinfos_;
    delete privateinfos_;
    delete targetsnotifys_;
  }
}

void UserInfo_Old::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo_Old::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_Old_descriptor_;
}

const UserInfo_Old& UserInfo_Old::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UserInfo_Old* UserInfo_Old::default_instance_ = NULL;

UserInfo_Old* UserInfo_Old::New() const {
  return new UserInfo_Old;
}

void UserInfo_Old::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_targetinfos()) {
      if (targetinfos_ != NULL) targetinfos_->::tms::TargetInfo::Clear();
    }
    if (has_privateinfos()) {
      if (privateinfos_ != NULL) privateinfos_->::tms::UserPrivateInfo::Clear();
    }
    if (has_targetsnotifys()) {
      if (targetsnotifys_ != NULL) targetsnotifys_->::tms::TargetsNotify::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo_Old::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tms.TargetInfo TargetInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PrivateInfos;
        break;
      }

      // optional .tms.UserPrivateInfo PrivateInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PrivateInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_privateinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_TargetsNotifys;
        break;
      }

      // optional .tms.TargetsNotify TargetsNotifys = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TargetsNotifys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetsnotifys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfo_Old::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .tms.TargetInfo TargetInfos = 1;
  if (has_targetinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->targetinfos(), output);
  }

  // optional .tms.UserPrivateInfo PrivateInfos = 2;
  if (has_privateinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->privateinfos(), output);
  }

  // optional .tms.TargetsNotify TargetsNotifys = 3;
  if (has_targetsnotifys()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->targetsnotifys(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfo_Old::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .tms.TargetInfo TargetInfos = 1;
  if (has_targetinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->targetinfos(), target);
  }

  // optional .tms.UserPrivateInfo PrivateInfos = 2;
  if (has_privateinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->privateinfos(), target);
  }

  // optional .tms.TargetsNotify TargetsNotifys = 3;
  if (has_targetsnotifys()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->targetsnotifys(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfo_Old::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tms.TargetInfo TargetInfos = 1;
    if (has_targetinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetinfos());
    }

    // optional .tms.UserPrivateInfo PrivateInfos = 2;
    if (has_privateinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->privateinfos());
    }

    // optional .tms.TargetsNotify TargetsNotifys = 3;
    if (has_targetsnotifys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetsnotifys());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo_Old::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo_Old* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo_Old*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo_Old::MergeFrom(const UserInfo_Old& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetinfos()) {
      mutable_targetinfos()->::tms::TargetInfo::MergeFrom(from.targetinfos());
    }
    if (from.has_privateinfos()) {
      mutable_privateinfos()->::tms::UserPrivateInfo::MergeFrom(from.privateinfos());
    }
    if (from.has_targetsnotifys()) {
      mutable_targetsnotifys()->::tms::TargetsNotify::MergeFrom(from.targetsnotifys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo_Old::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo_Old::CopyFrom(const UserInfo_Old& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo_Old::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_targetinfos()) {
    if (!this->targetinfos().IsInitialized()) return false;
  }
  if (has_targetsnotifys()) {
    if (!this->targetsnotifys().IsInitialized()) return false;
  }
  return true;
}

void UserInfo_Old::Swap(UserInfo_Old* other) {
  if (other != this) {
    std::swap(targetinfos_, other->targetinfos_);
    std::swap(privateinfos_, other->privateinfos_);
    std::swap(targetsnotifys_, other->targetsnotifys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo_Old::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_Old_descriptor_;
  metadata.reflection = UserInfo_Old_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserOnlineInfo::kUAccountIDFieldNumber;
const int UserOnlineInfo::kULoginFlagFieldNumber;
#endif  // !_MSC_VER

UserOnlineInfo::UserOnlineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserOnlineInfo::InitAsDefaultInstance() {
}

UserOnlineInfo::UserOnlineInfo(const UserOnlineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserOnlineInfo::SharedCtor() {
  _cached_size_ = 0;
  uaccountid_ = 0u;
  uloginflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserOnlineInfo::~UserOnlineInfo() {
  SharedDtor();
}

void UserOnlineInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserOnlineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserOnlineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserOnlineInfo_descriptor_;
}

const UserOnlineInfo& UserOnlineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UserOnlineInfo* UserOnlineInfo::default_instance_ = NULL;

UserOnlineInfo* UserOnlineInfo::New() const {
  return new UserOnlineInfo;
}

void UserOnlineInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uaccountid_ = 0u;
    uloginflag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserOnlineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uAccountID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uaccountid_)));
          set_has_uaccountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uLoginFlag;
        break;
      }

      // required uint32 uLoginFlag = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uLoginFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uloginflag_)));
          set_has_uloginflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserOnlineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uAccountID = 1 [default = 0];
  if (has_uaccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uaccountid(), output);
  }

  // required uint32 uLoginFlag = 2 [default = 0];
  if (has_uloginflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uloginflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserOnlineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uAccountID = 1 [default = 0];
  if (has_uaccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uaccountid(), target);
  }

  // required uint32 uLoginFlag = 2 [default = 0];
  if (has_uloginflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uloginflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserOnlineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uAccountID = 1 [default = 0];
    if (has_uaccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uaccountid());
    }

    // required uint32 uLoginFlag = 2 [default = 0];
    if (has_uloginflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uloginflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserOnlineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserOnlineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserOnlineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserOnlineInfo::MergeFrom(const UserOnlineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uaccountid()) {
      set_uaccountid(from.uaccountid());
    }
    if (from.has_uloginflag()) {
      set_uloginflag(from.uloginflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserOnlineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserOnlineInfo::CopyFrom(const UserOnlineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOnlineInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserOnlineInfo::Swap(UserOnlineInfo* other) {
  if (other != this) {
    std::swap(uaccountid_, other->uaccountid_);
    std::swap(uloginflag_, other->uloginflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserOnlineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserOnlineInfo_descriptor_;
  metadata.reflection = UserOnlineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginInfo::kStrAccountNoFieldNumber;
const int LoginInfo::kStrPasswdFieldNumber;
const int LoginInfo::kULoginFlagsFieldNumber;
#endif  // !_MSC_VER

LoginInfo::LoginInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginInfo::InitAsDefaultInstance() {
}

LoginInfo::LoginInfo(const LoginInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginInfo::SharedCtor() {
  _cached_size_ = 0;
  straccountno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strpasswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uloginflags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginInfo::~LoginInfo() {
  SharedDtor();
}

void LoginInfo::SharedDtor() {
  if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
    delete straccountno_;
  }
  if (strpasswd_ != &::google::protobuf::internal::kEmptyString) {
    delete strpasswd_;
  }
  if (this != default_instance_) {
  }
}

void LoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginInfo_descriptor_;
}

const LoginInfo& LoginInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

LoginInfo* LoginInfo::default_instance_ = NULL;

LoginInfo* LoginInfo::New() const {
  return new LoginInfo;
}

void LoginInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_straccountno()) {
      if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
        straccountno_->clear();
      }
    }
    if (has_strpasswd()) {
      if (strpasswd_ != &::google::protobuf::internal::kEmptyString) {
        strpasswd_->clear();
      }
    }
    uloginflags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string strAccountNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccountno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccountno().data(), this->straccountno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strPasswd;
        break;
      }

      // required string strPasswd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPasswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpasswd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strpasswd().data(), this->strpasswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uLoginFlags;
        break;
      }

      // optional uint32 uLoginFlags = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uLoginFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uloginflags_)));
          set_has_uloginflags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string strAccountNo = 1;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->straccountno(), output);
  }

  // required string strPasswd = 2;
  if (has_strpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpasswd().data(), this->strpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strpasswd(), output);
  }

  // optional uint32 uLoginFlags = 3 [default = 0];
  if (has_uloginflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uloginflags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string strAccountNo = 1;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->straccountno(), target);
  }

  // required string strPasswd = 2;
  if (has_strpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpasswd().data(), this->strpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strpasswd(), target);
  }

  // optional uint32 uLoginFlags = 3 [default = 0];
  if (has_uloginflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uloginflags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string strAccountNo = 1;
    if (has_straccountno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccountno());
    }

    // required string strPasswd = 2;
    if (has_strpasswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strpasswd());
    }

    // optional uint32 uLoginFlags = 3 [default = 0];
    if (has_uloginflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uloginflags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginInfo::MergeFrom(const LoginInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_straccountno()) {
      set_straccountno(from.straccountno());
    }
    if (from.has_strpasswd()) {
      set_strpasswd(from.strpasswd());
    }
    if (from.has_uloginflags()) {
      set_uloginflags(from.uloginflags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginInfo::CopyFrom(const LoginInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LoginInfo::Swap(LoginInfo* other) {
  if (other != this) {
    std::swap(straccountno_, other->straccountno_);
    std::swap(strpasswd_, other->strpasswd_);
    std::swap(uloginflags_, other->uloginflags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginInfo_descriptor_;
  metadata.reflection = LoginInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginAnsInfo::kUAccountIDFieldNumber;
const int LoginAnsInfo::kUSessionIDFieldNumber;
const int LoginAnsInfo::kNClientTypeFieldNumber;
#endif  // !_MSC_VER

LoginAnsInfo::LoginAnsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginAnsInfo::InitAsDefaultInstance() {
}

LoginAnsInfo::LoginAnsInfo(const LoginAnsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginAnsInfo::SharedCtor() {
  _cached_size_ = 0;
  uaccountid_ = 0u;
  usessionid_ = 0u;
  nclienttype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginAnsInfo::~LoginAnsInfo() {
  SharedDtor();
}

void LoginAnsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginAnsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginAnsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginAnsInfo_descriptor_;
}

const LoginAnsInfo& LoginAnsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

LoginAnsInfo* LoginAnsInfo::default_instance_ = NULL;

LoginAnsInfo* LoginAnsInfo::New() const {
  return new LoginAnsInfo;
}

void LoginAnsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uaccountid_ = 0u;
    usessionid_ = 0u;
    nclienttype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginAnsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uAccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uaccountid_)));
          set_has_uaccountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uSessionID;
        break;
      }

      // required uint32 uSessionID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uSessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usessionid_)));
          set_has_usessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nClientType;
        break;
      }

      // required uint32 nClientType = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nClientType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nclienttype_)));
          set_has_nclienttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginAnsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uAccountID = 1;
  if (has_uaccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uaccountid(), output);
  }

  // required uint32 uSessionID = 2;
  if (has_usessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usessionid(), output);
  }

  // required uint32 nClientType = 3 [default = 0];
  if (has_nclienttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nclienttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginAnsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uAccountID = 1;
  if (has_uaccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uaccountid(), target);
  }

  // required uint32 uSessionID = 2;
  if (has_usessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usessionid(), target);
  }

  // required uint32 nClientType = 3 [default = 0];
  if (has_nclienttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nclienttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginAnsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uAccountID = 1;
    if (has_uaccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uaccountid());
    }

    // required uint32 uSessionID = 2;
    if (has_usessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usessionid());
    }

    // required uint32 nClientType = 3 [default = 0];
    if (has_nclienttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nclienttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAnsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginAnsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginAnsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginAnsInfo::MergeFrom(const LoginAnsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uaccountid()) {
      set_uaccountid(from.uaccountid());
    }
    if (from.has_usessionid()) {
      set_usessionid(from.usessionid());
    }
    if (from.has_nclienttype()) {
      set_nclienttype(from.nclienttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginAnsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAnsInfo::CopyFrom(const LoginAnsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAnsInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LoginAnsInfo::Swap(LoginAnsInfo* other) {
  if (other != this) {
    std::swap(uaccountid_, other->uaccountid_);
    std::swap(usessionid_, other->usessionid_);
    std::swap(nclienttype_, other->nclienttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginAnsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginAnsInfo_descriptor_;
  metadata.reflection = LoginAnsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterInfo::kStrAccountNoFieldNumber;
const int RegisterInfo::kStrPasswdFieldNumber;
const int RegisterInfo::kStrNickNameFieldNumber;
#endif  // !_MSC_VER

RegisterInfo::RegisterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterInfo::InitAsDefaultInstance() {
}

RegisterInfo::RegisterInfo(const RegisterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterInfo::SharedCtor() {
  _cached_size_ = 0;
  straccountno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strpasswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterInfo::~RegisterInfo() {
  SharedDtor();
}

void RegisterInfo::SharedDtor() {
  if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
    delete straccountno_;
  }
  if (strpasswd_ != &::google::protobuf::internal::kEmptyString) {
    delete strpasswd_;
  }
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (this != default_instance_) {
  }
}

void RegisterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterInfo_descriptor_;
}

const RegisterInfo& RegisterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

RegisterInfo* RegisterInfo::default_instance_ = NULL;

RegisterInfo* RegisterInfo::New() const {
  return new RegisterInfo;
}

void RegisterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_straccountno()) {
      if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
        straccountno_->clear();
      }
    }
    if (has_strpasswd()) {
      if (strpasswd_ != &::google::protobuf::internal::kEmptyString) {
        strpasswd_->clear();
      }
    }
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string strAccountNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccountno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccountno().data(), this->straccountno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strPasswd;
        break;
      }

      // required string strPasswd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPasswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpasswd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strpasswd().data(), this->strpasswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strNickName;
        break;
      }

      // required bytes strNickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strnickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string strAccountNo = 1;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->straccountno(), output);
  }

  // required string strPasswd = 2;
  if (has_strpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpasswd().data(), this->strpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strpasswd(), output);
  }

  // required bytes strNickName = 3;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->strnickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string strAccountNo = 1;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->straccountno(), target);
  }

  // required string strPasswd = 2;
  if (has_strpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpasswd().data(), this->strpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strpasswd(), target);
  }

  // required bytes strNickName = 3;
  if (has_strnickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->strnickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string strAccountNo = 1;
    if (has_straccountno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccountno());
    }

    // required string strPasswd = 2;
    if (has_strpasswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strpasswd());
    }

    // required bytes strNickName = 3;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strnickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterInfo::MergeFrom(const RegisterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_straccountno()) {
      set_straccountno(from.straccountno());
    }
    if (from.has_strpasswd()) {
      set_strpasswd(from.strpasswd());
    }
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterInfo::CopyFrom(const RegisterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RegisterInfo::Swap(RegisterInfo* other) {
  if (other != this) {
    std::swap(straccountno_, other->straccountno_);
    std::swap(strpasswd_, other->strpasswd_);
    std::swap(strnickname_, other->strnickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterInfo_descriptor_;
  metadata.reflection = RegisterInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UserInfoReq_cmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoReq_cmd_descriptor_;
}
bool UserInfoReq_cmd_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UserInfoReq_cmd UserInfoReq::PublicInfo;
const UserInfoReq_cmd UserInfoReq::MemberList;
const UserInfoReq_cmd UserInfoReq::UserPrivateInfo;
const UserInfoReq_cmd UserInfoReq::UserInfo;
const UserInfoReq_cmd UserInfoReq::UserInfo_Old;
const UserInfoReq_cmd UserInfoReq::UTargetInfos;
const UserInfoReq_cmd UserInfoReq::cmd_MIN;
const UserInfoReq_cmd UserInfoReq::cmd_MAX;
const int UserInfoReq::cmd_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UserInfoReq::kNcmdFieldNumber;
#endif  // !_MSC_VER

UserInfoReq::UserInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfoReq::InitAsDefaultInstance() {
}

UserInfoReq::UserInfoReq(const UserInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ncmd_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfoReq::~UserInfoReq() {
  SharedDtor();
}

void UserInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoReq_descriptor_;
}

const UserInfoReq& UserInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UserInfoReq* UserInfoReq::default_instance_ = NULL;

UserInfoReq* UserInfoReq::New() const {
  return new UserInfoReq;
}

void UserInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ncmd_ = 3;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tms.UserInfoReq.cmd ncmd = 1 [default = UserInfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tms::UserInfoReq_cmd_IsValid(value)) {
            set_ncmd(static_cast< ::tms::UserInfoReq_cmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .tms.UserInfoReq.cmd ncmd = 1 [default = UserInfo];
  if (has_ncmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ncmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .tms.UserInfoReq.cmd ncmd = 1 [default = UserInfo];
  if (has_ncmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ncmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tms.UserInfoReq.cmd ncmd = 1 [default = UserInfo];
    if (has_ncmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ncmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfoReq::MergeFrom(const UserInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ncmd()) {
      set_ncmd(from.ncmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoReq::CopyFrom(const UserInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserInfoReq::Swap(UserInfoReq* other) {
  if (other != this) {
    std::swap(ncmd_, other->ncmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfoReq_descriptor_;
  metadata.reflection = UserInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargetsQuery::kStrAccountNoFieldNumber;
const int TargetsQuery::kStrNickNameFieldNumber;
#endif  // !_MSC_VER

TargetsQuery::TargetsQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargetsQuery::InitAsDefaultInstance() {
}

TargetsQuery::TargetsQuery(const TargetsQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargetsQuery::SharedCtor() {
  _cached_size_ = 0;
  straccountno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetsQuery::~TargetsQuery() {
  SharedDtor();
}

void TargetsQuery::SharedDtor() {
  if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
    delete straccountno_;
  }
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (this != default_instance_) {
  }
}

void TargetsQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetsQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetsQuery_descriptor_;
}

const TargetsQuery& TargetsQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

TargetsQuery* TargetsQuery::default_instance_ = NULL;

TargetsQuery* TargetsQuery::New() const {
  return new TargetsQuery;
}

void TargetsQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_straccountno()) {
      if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
        straccountno_->clear();
      }
    }
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargetsQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string strAccountNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccountno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccountno().data(), this->straccountno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strNickName;
        break;
      }

      // required bytes strNickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strnickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargetsQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string strAccountNo = 1;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->straccountno(), output);
  }

  // required bytes strNickName = 2;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->strnickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargetsQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string strAccountNo = 1;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->straccountno(), target);
  }

  // required bytes strNickName = 2;
  if (has_strnickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->strnickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargetsQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string strAccountNo = 1;
    if (has_straccountno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccountno());
    }

    // required bytes strNickName = 2;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strnickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetsQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetsQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetsQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargetsQuery::MergeFrom(const TargetsQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_straccountno()) {
      set_straccountno(from.straccountno());
    }
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargetsQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetsQuery::CopyFrom(const TargetsQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetsQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TargetsQuery::Swap(TargetsQuery* other) {
  if (other != this) {
    std::swap(straccountno_, other->straccountno_);
    std::swap(strnickname_, other->strnickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargetsQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetsQuery_descriptor_;
  metadata.reflection = TargetsQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUserInfo::kStrNickNameFieldNumber;
const int UpdateUserInfo::kNFaceFieldNumber;
const int UpdateUserInfo::kPrivateInfosFieldNumber;
#endif  // !_MSC_VER

UpdateUserInfo::UpdateUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateUserInfo::InitAsDefaultInstance() {
  privateinfos_ = const_cast< ::tms::UserPrivateInfo*>(&::tms::UserPrivateInfo::default_instance());
}

UpdateUserInfo::UpdateUserInfo(const UpdateUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateUserInfo::SharedCtor() {
  _cached_size_ = 0;
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nface_ = 0u;
  privateinfos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserInfo::~UpdateUserInfo() {
  SharedDtor();
}

void UpdateUserInfo::SharedDtor() {
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (this != default_instance_) {
    delete privateinfos_;
  }
}

void UpdateUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateUserInfo_descriptor_;
}

const UpdateUserInfo& UpdateUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UpdateUserInfo* UpdateUserInfo::default_instance_ = NULL;

UpdateUserInfo* UpdateUserInfo::New() const {
  return new UpdateUserInfo;
}

void UpdateUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
    nface_ = 0u;
    if (has_privateinfos()) {
      if (privateinfos_ != NULL) privateinfos_->::tms::UserPrivateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes strNickName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strnickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nFace;
        break;
      }

      // optional uint32 nFace = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nface_)));
          set_has_nface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_PrivateInfos;
        break;
      }

      // optional .tms.UserPrivateInfo PrivateInfos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PrivateInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_privateinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes strNickName = 1;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->strnickname(), output);
  }

  // optional uint32 nFace = 2 [default = 0];
  if (has_nface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nface(), output);
  }

  // optional .tms.UserPrivateInfo PrivateInfos = 3;
  if (has_privateinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->privateinfos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes strNickName = 1;
  if (has_strnickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->strnickname(), target);
  }

  // optional uint32 nFace = 2 [default = 0];
  if (has_nface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nface(), target);
  }

  // optional .tms.UserPrivateInfo PrivateInfos = 3;
  if (has_privateinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->privateinfos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes strNickName = 1;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strnickname());
    }

    // optional uint32 nFace = 2 [default = 0];
    if (has_nface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nface());
    }

    // optional .tms.UserPrivateInfo PrivateInfos = 3;
    if (has_privateinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->privateinfos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateUserInfo::MergeFrom(const UpdateUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
    if (from.has_nface()) {
      set_nface(from.nface());
    }
    if (from.has_privateinfos()) {
      mutable_privateinfos()->::tms::UserPrivateInfo::MergeFrom(from.privateinfos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserInfo::CopyFrom(const UpdateUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserInfo::IsInitialized() const {

  return true;
}

void UpdateUserInfo::Swap(UpdateUserInfo* other) {
  if (other != this) {
    std::swap(strnickname_, other->strnickname_);
    std::swap(nface_, other->nface_);
    std::swap(privateinfos_, other->privateinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateUserInfo_descriptor_;
  metadata.reflection = UpdateUserInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TargetsAdd_cmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetsAdd_cmd_descriptor_;
}
bool TargetsAdd_cmd_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TargetsAdd_cmd TargetsAdd::Apply;
const TargetsAdd_cmd TargetsAdd::Applied;
const TargetsAdd_cmd TargetsAdd::Agree;
const TargetsAdd_cmd TargetsAdd::Agreed;
const TargetsAdd_cmd TargetsAdd::Refuse;
const TargetsAdd_cmd TargetsAdd::Refused;
const TargetsAdd_cmd TargetsAdd::Delete;
const TargetsAdd_cmd TargetsAdd::Deleted;
const TargetsAdd_cmd TargetsAdd::Fail;
const TargetsAdd_cmd TargetsAdd::cmd_MIN;
const TargetsAdd_cmd TargetsAdd::cmd_MAX;
const int TargetsAdd::cmd_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TargetsAdd::kUTargetIDFieldNumber;
const int TargetsAdd::kNcmdFieldNumber;
#endif  // !_MSC_VER

TargetsAdd::TargetsAdd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargetsAdd::InitAsDefaultInstance() {
}

TargetsAdd::TargetsAdd(const TargetsAdd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargetsAdd::SharedCtor() {
  _cached_size_ = 0;
  utargetid_ = 0u;
  ncmd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetsAdd::~TargetsAdd() {
  SharedDtor();
}

void TargetsAdd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TargetsAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetsAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetsAdd_descriptor_;
}

const TargetsAdd& TargetsAdd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

TargetsAdd* TargetsAdd::default_instance_ = NULL;

TargetsAdd* TargetsAdd::New() const {
  return new TargetsAdd;
}

void TargetsAdd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utargetid_ = 0u;
    ncmd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargetsAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uTargetID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ncmd;
        break;
      }

      // required .tms.TargetsAdd.cmd ncmd = 2 [default = Apply];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ncmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tms::TargetsAdd_cmd_IsValid(value)) {
            set_ncmd(static_cast< ::tms::TargetsAdd_cmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargetsAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->utargetid(), output);
  }

  // required .tms.TargetsAdd.cmd ncmd = 2 [default = Apply];
  if (has_ncmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ncmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargetsAdd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->utargetid(), target);
  }

  // required .tms.TargetsAdd.cmd ncmd = 2 [default = Apply];
  if (has_ncmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ncmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargetsAdd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uTargetID = 1 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // required .tms.TargetsAdd.cmd ncmd = 2 [default = Apply];
    if (has_ncmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ncmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetsAdd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetsAdd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetsAdd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargetsAdd::MergeFrom(const TargetsAdd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_ncmd()) {
      set_ncmd(from.ncmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargetsAdd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetsAdd::CopyFrom(const TargetsAdd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetsAdd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TargetsAdd::Swap(TargetsAdd* other) {
  if (other != this) {
    std::swap(utargetid_, other->utargetid_);
    std::swap(ncmd_, other->ncmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargetsAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetsAdd_descriptor_;
  metadata.reflection = TargetsAdd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateTargetInfo::kUTargetIDFieldNumber;
const int UpdateTargetInfo::kStrNickNameFieldNumber;
const int UpdateTargetInfo::kSelfparamFieldNumber;
#endif  // !_MSC_VER

UpdateTargetInfo::UpdateTargetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateTargetInfo::InitAsDefaultInstance() {
}

UpdateTargetInfo::UpdateTargetInfo(const UpdateTargetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateTargetInfo::SharedCtor() {
  _cached_size_ = 0;
  utargetid_ = 0u;
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  selfparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateTargetInfo::~UpdateTargetInfo() {
  SharedDtor();
}

void UpdateTargetInfo::SharedDtor() {
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (selfparam_ != &::google::protobuf::internal::kEmptyString) {
    delete selfparam_;
  }
  if (this != default_instance_) {
  }
}

void UpdateTargetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateTargetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateTargetInfo_descriptor_;
}

const UpdateTargetInfo& UpdateTargetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UpdateTargetInfo* UpdateTargetInfo::default_instance_ = NULL;

UpdateTargetInfo* UpdateTargetInfo::New() const {
  return new UpdateTargetInfo;
}

void UpdateTargetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utargetid_ = 0u;
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
    if (has_selfparam()) {
      if (selfparam_ != &::google::protobuf::internal::kEmptyString) {
        selfparam_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateTargetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uTargetID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strNickName;
        break;
      }

      // optional bytes strNickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strnickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_selfparam;
        break;
      }

      // optional bytes selfparam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfparam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_selfparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateTargetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->utargetid(), output);
  }

  // optional bytes strNickName = 2;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->strnickname(), output);
  }

  // optional bytes selfparam = 3;
  if (has_selfparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->selfparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateTargetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->utargetid(), target);
  }

  // optional bytes strNickName = 2;
  if (has_strnickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->strnickname(), target);
  }

  // optional bytes selfparam = 3;
  if (has_selfparam()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->selfparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateTargetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uTargetID = 1 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // optional bytes strNickName = 2;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strnickname());
    }

    // optional bytes selfparam = 3;
    if (has_selfparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->selfparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateTargetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateTargetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateTargetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateTargetInfo::MergeFrom(const UpdateTargetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
    if (from.has_selfparam()) {
      set_selfparam(from.selfparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateTargetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTargetInfo::CopyFrom(const UpdateTargetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTargetInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateTargetInfo::Swap(UpdateTargetInfo* other) {
  if (other != this) {
    std::swap(utargetid_, other->utargetid_);
    std::swap(strnickname_, other->strnickname_);
    std::swap(selfparam_, other->selfparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateTargetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateTargetInfo_descriptor_;
  metadata.reflection = UpdateTargetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfoNotify::kUAccountIDFieldNumber;
const int UserInfoNotify::kStrAccountNoFieldNumber;
const int UserInfoNotify::kStrNickNameFieldNumber;
const int UserInfoNotify::kNFaceFieldNumber;
const int UserInfoNotify::kPrivateInfosFieldNumber;
#endif  // !_MSC_VER

UserInfoNotify::UserInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfoNotify::InitAsDefaultInstance() {
  privateinfos_ = const_cast< ::tms::UserPrivateInfo*>(&::tms::UserPrivateInfo::default_instance());
}

UserInfoNotify::UserInfoNotify(const UserInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  uaccountid_ = 0u;
  straccountno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nface_ = 0u;
  privateinfos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfoNotify::~UserInfoNotify() {
  SharedDtor();
}

void UserInfoNotify::SharedDtor() {
  if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
    delete straccountno_;
  }
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (this != default_instance_) {
    delete privateinfos_;
  }
}

void UserInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoNotify_descriptor_;
}

const UserInfoNotify& UserInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UserInfoNotify* UserInfoNotify::default_instance_ = NULL;

UserInfoNotify* UserInfoNotify::New() const {
  return new UserInfoNotify;
}

void UserInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uaccountid_ = 0u;
    if (has_straccountno()) {
      if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
        straccountno_->clear();
      }
    }
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
    nface_ = 0u;
    if (has_privateinfos()) {
      if (privateinfos_ != NULL) privateinfos_->::tms::UserPrivateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uAccountID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uaccountid_)));
          set_has_uaccountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strAccountNo;
        break;
      }

      // optional string strAccountNo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strAccountNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccountno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccountno().data(), this->straccountno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strNickName;
        break;
      }

      // optional bytes strNickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strnickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nFace;
        break;
      }

      // optional uint32 nFace = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nface_)));
          set_has_nface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_PrivateInfos;
        break;
      }

      // optional .tms.UserPrivateInfo PrivateInfos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PrivateInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_privateinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uAccountID = 1 [default = 0];
  if (has_uaccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uaccountid(), output);
  }

  // optional string strAccountNo = 2;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->straccountno(), output);
  }

  // optional bytes strNickName = 3;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->strnickname(), output);
  }

  // optional uint32 nFace = 4 [default = 0];
  if (has_nface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nface(), output);
  }

  // optional .tms.UserPrivateInfo PrivateInfos = 5;
  if (has_privateinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->privateinfos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uAccountID = 1 [default = 0];
  if (has_uaccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uaccountid(), target);
  }

  // optional string strAccountNo = 2;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->straccountno(), target);
  }

  // optional bytes strNickName = 3;
  if (has_strnickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->strnickname(), target);
  }

  // optional uint32 nFace = 4 [default = 0];
  if (has_nface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->nface(), target);
  }

  // optional .tms.UserPrivateInfo PrivateInfos = 5;
  if (has_privateinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->privateinfos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uAccountID = 1 [default = 0];
    if (has_uaccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uaccountid());
    }

    // optional string strAccountNo = 2;
    if (has_straccountno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccountno());
    }

    // optional bytes strNickName = 3;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strnickname());
    }

    // optional uint32 nFace = 4 [default = 0];
    if (has_nface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nface());
    }

    // optional .tms.UserPrivateInfo PrivateInfos = 5;
    if (has_privateinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->privateinfos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfoNotify::MergeFrom(const UserInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uaccountid()) {
      set_uaccountid(from.uaccountid());
    }
    if (from.has_straccountno()) {
      set_straccountno(from.straccountno());
    }
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
    if (from.has_nface()) {
      set_nface(from.nface());
    }
    if (from.has_privateinfos()) {
      mutable_privateinfos()->::tms::UserPrivateInfo::MergeFrom(from.privateinfos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoNotify::CopyFrom(const UserInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserInfoNotify::Swap(UserInfoNotify* other) {
  if (other != this) {
    std::swap(uaccountid_, other->uaccountid_);
    std::swap(straccountno_, other->straccountno_);
    std::swap(strnickname_, other->strnickname_);
    std::swap(nface_, other->nface_);
    std::swap(privateinfos_, other->privateinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfoNotify_descriptor_;
  metadata.reflection = UserInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargetsAddNotify::kTargetsAddsFieldNumber;
const int TargetsAddNotify::kTargetInfosFieldNumber;
#endif  // !_MSC_VER

TargetsAddNotify::TargetsAddNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargetsAddNotify::InitAsDefaultInstance() {
  targetsadds_ = const_cast< ::tms::TargetsAdd*>(&::tms::TargetsAdd::default_instance());
  targetinfos_ = const_cast< ::tms::TargetInfo*>(&::tms::TargetInfo::default_instance());
}

TargetsAddNotify::TargetsAddNotify(const TargetsAddNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargetsAddNotify::SharedCtor() {
  _cached_size_ = 0;
  targetsadds_ = NULL;
  targetinfos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetsAddNotify::~TargetsAddNotify() {
  SharedDtor();
}

void TargetsAddNotify::SharedDtor() {
  if (this != default_instance_) {
    delete targetsadds_;
    delete targetinfos_;
  }
}

void TargetsAddNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetsAddNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetsAddNotify_descriptor_;
}

const TargetsAddNotify& TargetsAddNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

TargetsAddNotify* TargetsAddNotify::default_instance_ = NULL;

TargetsAddNotify* TargetsAddNotify::New() const {
  return new TargetsAddNotify;
}

void TargetsAddNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_targetsadds()) {
      if (targetsadds_ != NULL) targetsadds_->::tms::TargetsAdd::Clear();
    }
    if (has_targetinfos()) {
      if (targetinfos_ != NULL) targetinfos_->::tms::TargetInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargetsAddNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tms.TargetsAdd TargetsAdds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetsadds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_TargetInfos;
        break;
      }

      // required .tms.TargetInfo TargetInfos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TargetInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargetsAddNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .tms.TargetsAdd TargetsAdds = 1;
  if (has_targetsadds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->targetsadds(), output);
  }

  // required .tms.TargetInfo TargetInfos = 3;
  if (has_targetinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->targetinfos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargetsAddNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .tms.TargetsAdd TargetsAdds = 1;
  if (has_targetsadds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->targetsadds(), target);
  }

  // required .tms.TargetInfo TargetInfos = 3;
  if (has_targetinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->targetinfos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargetsAddNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tms.TargetsAdd TargetsAdds = 1;
    if (has_targetsadds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetsadds());
    }

    // required .tms.TargetInfo TargetInfos = 3;
    if (has_targetinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetinfos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetsAddNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetsAddNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetsAddNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargetsAddNotify::MergeFrom(const TargetsAddNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetsadds()) {
      mutable_targetsadds()->::tms::TargetsAdd::MergeFrom(from.targetsadds());
    }
    if (from.has_targetinfos()) {
      mutable_targetinfos()->::tms::TargetInfo::MergeFrom(from.targetinfos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargetsAddNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetsAddNotify::CopyFrom(const TargetsAddNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetsAddNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_targetsadds()) {
    if (!this->targetsadds().IsInitialized()) return false;
  }
  if (has_targetinfos()) {
    if (!this->targetinfos().IsInitialized()) return false;
  }
  return true;
}

void TargetsAddNotify::Swap(TargetsAddNotify* other) {
  if (other != this) {
    std::swap(targetsadds_, other->targetsadds_);
    std::swap(targetinfos_, other->targetinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargetsAddNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetsAddNotify_descriptor_;
  metadata.reflection = TargetsAddNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargetsNotify::kTargetssFieldNumber;
#endif  // !_MSC_VER

TargetsNotify::TargetsNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargetsNotify::InitAsDefaultInstance() {
}

TargetsNotify::TargetsNotify(const TargetsNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargetsNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetsNotify::~TargetsNotify() {
  SharedDtor();
}

void TargetsNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TargetsNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetsNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetsNotify_descriptor_;
}

const TargetsNotify& TargetsNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

TargetsNotify* TargetsNotify::default_instance_ = NULL;

TargetsNotify* TargetsNotify::New() const {
  return new TargetsNotify;
}

void TargetsNotify::Clear() {
  targetss_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargetsNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.Targets Targetss = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Targetss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targetss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Targetss;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargetsNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.Targets Targetss = 1;
  for (int i = 0; i < this->targetss_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->targetss(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargetsNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.Targets Targetss = 1;
  for (int i = 0; i < this->targetss_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->targetss(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargetsNotify::ByteSize() const {
  int total_size = 0;

  // repeated .tms.Targets Targetss = 1;
  total_size += 1 * this->targetss_size();
  for (int i = 0; i < this->targetss_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targetss(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetsNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetsNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetsNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargetsNotify::MergeFrom(const TargetsNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  targetss_.MergeFrom(from.targetss_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargetsNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetsNotify::CopyFrom(const TargetsNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetsNotify::IsInitialized() const {

  for (int i = 0; i < targetss_size(); i++) {
    if (!this->targetss(i).IsInitialized()) return false;
  }
  return true;
}

void TargetsNotify::Swap(TargetsNotify* other) {
  if (other != this) {
    targetss_.Swap(&other->targetss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargetsNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetsNotify_descriptor_;
  metadata.reflection = TargetsNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerTime::kUServerTimeFieldNumber;
#endif  // !_MSC_VER

ServerTime::ServerTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerTime::InitAsDefaultInstance() {
}

ServerTime::ServerTime(const ServerTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerTime::SharedCtor() {
  _cached_size_ = 0;
  uservertime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerTime::~ServerTime() {
  SharedDtor();
}

void ServerTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerTime_descriptor_;
}

const ServerTime& ServerTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

ServerTime* ServerTime::default_instance_ = NULL;

ServerTime* ServerTime::New() const {
  return new ServerTime;
}

void ServerTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uservertime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uServerTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uservertime_)));
          set_has_uservertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uServerTime = 1;
  if (has_uservertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uservertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uServerTime = 1;
  if (has_uservertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uservertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uServerTime = 1;
    if (has_uservertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uservertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerTime::MergeFrom(const ServerTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uservertime()) {
      set_uservertime(from.uservertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerTime::CopyFrom(const ServerTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerTime::Swap(ServerTime* other) {
  if (other != this) {
    std::swap(uservertime_, other->uservertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerTime_descriptor_;
  metadata.reflection = ServerTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileLoadInfo::kStrNameFieldNumber;
const int FileLoadInfo::kUOffsetFieldNumber;
const int FileLoadInfo::kUDownsizeFieldNumber;
const int FileLoadInfo::kULocalsizeFieldNumber;
const int FileLoadInfo::kULocaltimeFieldNumber;
const int FileLoadInfo::kBVersionFieldNumber;
#endif  // !_MSC_VER

FileLoadInfo::FileLoadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileLoadInfo::InitAsDefaultInstance() {
}

FileLoadInfo::FileLoadInfo(const FileLoadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileLoadInfo::SharedCtor() {
  _cached_size_ = 0;
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uoffset_ = 0u;
  udownsize_ = 0u;
  ulocalsize_ = 0u;
  ulocaltime_ = 0u;
  bversion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileLoadInfo::~FileLoadInfo() {
  SharedDtor();
}

void FileLoadInfo::SharedDtor() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (this != default_instance_) {
  }
}

void FileLoadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileLoadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileLoadInfo_descriptor_;
}

const FileLoadInfo& FileLoadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

FileLoadInfo* FileLoadInfo::default_instance_ = NULL;

FileLoadInfo* FileLoadInfo::New() const {
  return new FileLoadInfo;
}

void FileLoadInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
    uoffset_ = 0u;
    udownsize_ = 0u;
    ulocalsize_ = 0u;
    ulocaltime_ = 0u;
    bversion_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileLoadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes strName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uOffset;
        break;
      }

      // required uint32 uOffset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uoffset_)));
          set_has_uoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uDownsize;
        break;
      }

      // required uint32 uDownsize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uDownsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &udownsize_)));
          set_has_udownsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uLocalsize;
        break;
      }

      // required uint32 uLocalsize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uLocalsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ulocalsize_)));
          set_has_ulocalsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uLocaltime;
        break;
      }

      // required uint32 uLocaltime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uLocaltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ulocaltime_)));
          set_has_ulocaltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bVersion;
        break;
      }

      // required uint32 bVersion = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bversion_)));
          set_has_bversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileLoadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes strName = 1;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->strname(), output);
  }

  // required uint32 uOffset = 2;
  if (has_uoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uoffset(), output);
  }

  // required uint32 uDownsize = 3;
  if (has_udownsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->udownsize(), output);
  }

  // required uint32 uLocalsize = 4;
  if (has_ulocalsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ulocalsize(), output);
  }

  // required uint32 uLocaltime = 5;
  if (has_ulocaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ulocaltime(), output);
  }

  // required uint32 bVersion = 6;
  if (has_bversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bversion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileLoadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes strName = 1;
  if (has_strname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->strname(), target);
  }

  // required uint32 uOffset = 2;
  if (has_uoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uoffset(), target);
  }

  // required uint32 uDownsize = 3;
  if (has_udownsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->udownsize(), target);
  }

  // required uint32 uLocalsize = 4;
  if (has_ulocalsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ulocalsize(), target);
  }

  // required uint32 uLocaltime = 5;
  if (has_ulocaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ulocaltime(), target);
  }

  // required uint32 bVersion = 6;
  if (has_bversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bversion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileLoadInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes strName = 1;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strname());
    }

    // required uint32 uOffset = 2;
    if (has_uoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uoffset());
    }

    // required uint32 uDownsize = 3;
    if (has_udownsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->udownsize());
    }

    // required uint32 uLocalsize = 4;
    if (has_ulocalsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ulocalsize());
    }

    // required uint32 uLocaltime = 5;
    if (has_ulocaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ulocaltime());
    }

    // required uint32 bVersion = 6;
    if (has_bversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bversion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileLoadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileLoadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileLoadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileLoadInfo::MergeFrom(const FileLoadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_uoffset()) {
      set_uoffset(from.uoffset());
    }
    if (from.has_udownsize()) {
      set_udownsize(from.udownsize());
    }
    if (from.has_ulocalsize()) {
      set_ulocalsize(from.ulocalsize());
    }
    if (from.has_ulocaltime()) {
      set_ulocaltime(from.ulocaltime());
    }
    if (from.has_bversion()) {
      set_bversion(from.bversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileLoadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileLoadInfo::CopyFrom(const FileLoadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileLoadInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void FileLoadInfo::Swap(FileLoadInfo* other) {
  if (other != this) {
    std::swap(strname_, other->strname_);
    std::swap(uoffset_, other->uoffset_);
    std::swap(udownsize_, other->udownsize_);
    std::swap(ulocalsize_, other->ulocalsize_);
    std::swap(ulocaltime_, other->ulocaltime_);
    std::swap(bversion_, other->bversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileLoadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileLoadInfo_descriptor_;
  metadata.reflection = FileLoadInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileLoadData::kUErrorFieldNumber;
const int FileLoadData::kUFilesizeFieldNumber;
const int FileLoadData::kUOffsetFieldNumber;
const int FileLoadData::kUDownsizeFieldNumber;
const int FileLoadData::kUTmmodifiedFieldNumber;
const int FileLoadData::kSzDataFieldNumber;
#endif  // !_MSC_VER

FileLoadData::FileLoadData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileLoadData::InitAsDefaultInstance() {
}

FileLoadData::FileLoadData(const FileLoadData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileLoadData::SharedCtor() {
  _cached_size_ = 0;
  uerror_ = 0u;
  ufilesize_ = 0u;
  uoffset_ = 0u;
  udownsize_ = 0u;
  utmmodified_ = 0u;
  szdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileLoadData::~FileLoadData() {
  SharedDtor();
}

void FileLoadData::SharedDtor() {
  if (szdata_ != &::google::protobuf::internal::kEmptyString) {
    delete szdata_;
  }
  if (this != default_instance_) {
  }
}

void FileLoadData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileLoadData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileLoadData_descriptor_;
}

const FileLoadData& FileLoadData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

FileLoadData* FileLoadData::default_instance_ = NULL;

FileLoadData* FileLoadData::New() const {
  return new FileLoadData;
}

void FileLoadData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uerror_ = 0u;
    ufilesize_ = 0u;
    uoffset_ = 0u;
    udownsize_ = 0u;
    utmmodified_ = 0u;
    if (has_szdata()) {
      if (szdata_ != &::google::protobuf::internal::kEmptyString) {
        szdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileLoadData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uError = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uerror_)));
          set_has_uerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uFilesize;
        break;
      }

      // required uint32 uFilesize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uFilesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ufilesize_)));
          set_has_ufilesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uOffset;
        break;
      }

      // required uint32 uOffset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uoffset_)));
          set_has_uoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uDownsize;
        break;
      }

      // required uint32 uDownsize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uDownsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &udownsize_)));
          set_has_udownsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uTmmodified;
        break;
      }

      // required uint32 uTmmodified = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uTmmodified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utmmodified_)));
          set_has_utmmodified();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_szData;
        break;
      }

      // optional bytes szData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_szdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileLoadData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uError = 1;
  if (has_uerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uerror(), output);
  }

  // required uint32 uFilesize = 2;
  if (has_ufilesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ufilesize(), output);
  }

  // required uint32 uOffset = 3;
  if (has_uoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uoffset(), output);
  }

  // required uint32 uDownsize = 4;
  if (has_udownsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->udownsize(), output);
  }

  // required uint32 uTmmodified = 5;
  if (has_utmmodified()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->utmmodified(), output);
  }

  // optional bytes szData = 6;
  if (has_szdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->szdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileLoadData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uError = 1;
  if (has_uerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uerror(), target);
  }

  // required uint32 uFilesize = 2;
  if (has_ufilesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ufilesize(), target);
  }

  // required uint32 uOffset = 3;
  if (has_uoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uoffset(), target);
  }

  // required uint32 uDownsize = 4;
  if (has_udownsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->udownsize(), target);
  }

  // required uint32 uTmmodified = 5;
  if (has_utmmodified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->utmmodified(), target);
  }

  // optional bytes szData = 6;
  if (has_szdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->szdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileLoadData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uError = 1;
    if (has_uerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uerror());
    }

    // required uint32 uFilesize = 2;
    if (has_ufilesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ufilesize());
    }

    // required uint32 uOffset = 3;
    if (has_uoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uoffset());
    }

    // required uint32 uDownsize = 4;
    if (has_udownsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->udownsize());
    }

    // required uint32 uTmmodified = 5;
    if (has_utmmodified()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utmmodified());
    }

    // optional bytes szData = 6;
    if (has_szdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->szdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileLoadData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileLoadData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileLoadData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileLoadData::MergeFrom(const FileLoadData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uerror()) {
      set_uerror(from.uerror());
    }
    if (from.has_ufilesize()) {
      set_ufilesize(from.ufilesize());
    }
    if (from.has_uoffset()) {
      set_uoffset(from.uoffset());
    }
    if (from.has_udownsize()) {
      set_udownsize(from.udownsize());
    }
    if (from.has_utmmodified()) {
      set_utmmodified(from.utmmodified());
    }
    if (from.has_szdata()) {
      set_szdata(from.szdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileLoadData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileLoadData::CopyFrom(const FileLoadData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileLoadData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void FileLoadData::Swap(FileLoadData* other) {
  if (other != this) {
    std::swap(uerror_, other->uerror_);
    std::swap(ufilesize_, other->ufilesize_);
    std::swap(uoffset_, other->uoffset_);
    std::swap(udownsize_, other->udownsize_);
    std::swap(utmmodified_, other->utmmodified_);
    std::swap(szdata_, other->szdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileLoadData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileLoadData_descriptor_;
  metadata.reflection = FileLoadData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalkMsg::kUSendIDFieldNumber;
const int TalkMsg::kUTargetIDFieldNumber;
const int TalkMsg::kUMsgIDFieldNumber;
const int TalkMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

TalkMsg::TalkMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalkMsg::InitAsDefaultInstance() {
}

TalkMsg::TalkMsg(const TalkMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalkMsg::SharedCtor() {
  _cached_size_ = 0;
  usendid_ = 0u;
  utargetid_ = 0u;
  umsgid_ = 0u;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalkMsg::~TalkMsg() {
  SharedDtor();
}

void TalkMsg::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void TalkMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalkMsg_descriptor_;
}

const TalkMsg& TalkMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

TalkMsg* TalkMsg::default_instance_ = NULL;

TalkMsg* TalkMsg::New() const {
  return new TalkMsg;
}

void TalkMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usendid_ = 0u;
    utargetid_ = 0u;
    umsgid_ = 0u;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalkMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uSendID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usendid_)));
          set_has_usendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uTargetID;
        break;
      }

      // required uint32 uTargetID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uTargetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uMsgID;
        break;
      }

      // optional uint32 uMsgID = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uMsgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &umsgid_)));
          set_has_umsgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // required bytes msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalkMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uSendID = 1 [default = 0];
  if (has_usendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->usendid(), output);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->utargetid(), output);
  }

  // optional uint32 uMsgID = 3 [default = 0];
  if (has_umsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->umsgid(), output);
  }

  // required bytes msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalkMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uSendID = 1 [default = 0];
  if (has_usendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->usendid(), target);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->utargetid(), target);
  }

  // optional uint32 uMsgID = 3 [default = 0];
  if (has_umsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->umsgid(), target);
  }

  // required bytes msg = 4;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalkMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uSendID = 1 [default = 0];
    if (has_usendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usendid());
    }

    // required uint32 uTargetID = 2 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // optional uint32 uMsgID = 3 [default = 0];
    if (has_umsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->umsgid());
    }

    // required bytes msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalkMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalkMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalkMsg::MergeFrom(const TalkMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usendid()) {
      set_usendid(from.usendid());
    }
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_umsgid()) {
      set_umsgid(from.umsgid());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalkMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkMsg::CopyFrom(const TalkMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void TalkMsg::Swap(TalkMsg* other) {
  if (other != this) {
    std::swap(usendid_, other->usendid_);
    std::swap(utargetid_, other->utargetid_);
    std::swap(umsgid_, other->umsgid_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalkMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalkMsg_descriptor_;
  metadata.reflection = TalkMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalkMsgAns::kUErrorFieldNumber;
const int TalkMsgAns::kUTargetIDFieldNumber;
const int TalkMsgAns::kUMsgIDFieldNumber;
#endif  // !_MSC_VER

TalkMsgAns::TalkMsgAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalkMsgAns::InitAsDefaultInstance() {
}

TalkMsgAns::TalkMsgAns(const TalkMsgAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalkMsgAns::SharedCtor() {
  _cached_size_ = 0;
  uerror_ = 0u;
  utargetid_ = 0u;
  umsgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalkMsgAns::~TalkMsgAns() {
  SharedDtor();
}

void TalkMsgAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TalkMsgAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkMsgAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalkMsgAns_descriptor_;
}

const TalkMsgAns& TalkMsgAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

TalkMsgAns* TalkMsgAns::default_instance_ = NULL;

TalkMsgAns* TalkMsgAns::New() const {
  return new TalkMsgAns;
}

void TalkMsgAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uerror_ = 0u;
    utargetid_ = 0u;
    umsgid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalkMsgAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uError = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uerror_)));
          set_has_uerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uTargetID;
        break;
      }

      // required uint32 uTargetID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uTargetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uMsgID;
        break;
      }

      // required uint32 uMsgID = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uMsgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &umsgid_)));
          set_has_umsgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalkMsgAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uError = 1 [default = 0];
  if (has_uerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uerror(), output);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->utargetid(), output);
  }

  // required uint32 uMsgID = 3 [default = 0];
  if (has_umsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->umsgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalkMsgAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uError = 1 [default = 0];
  if (has_uerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uerror(), target);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->utargetid(), target);
  }

  // required uint32 uMsgID = 3 [default = 0];
  if (has_umsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->umsgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalkMsgAns::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uError = 1 [default = 0];
    if (has_uerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uerror());
    }

    // required uint32 uTargetID = 2 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // required uint32 uMsgID = 3 [default = 0];
    if (has_umsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->umsgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkMsgAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalkMsgAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalkMsgAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalkMsgAns::MergeFrom(const TalkMsgAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uerror()) {
      set_uerror(from.uerror());
    }
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_umsgid()) {
      set_umsgid(from.umsgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalkMsgAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkMsgAns::CopyFrom(const TalkMsgAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkMsgAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TalkMsgAns::Swap(TalkMsgAns* other) {
  if (other != this) {
    std::swap(uerror_, other->uerror_);
    std::swap(utargetid_, other->utargetid_);
    std::swap(umsgid_, other->umsgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalkMsgAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalkMsgAns_descriptor_;
  metadata.reflection = TalkMsgAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TmpTalkMsg::kUTargetIDFieldNumber;
const int TmpTalkMsg::kStrNickNameFieldNumber;
const int TmpTalkMsg::kUMsgIDFieldNumber;
const int TmpTalkMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

TmpTalkMsg::TmpTalkMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TmpTalkMsg::InitAsDefaultInstance() {
}

TmpTalkMsg::TmpTalkMsg(const TmpTalkMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TmpTalkMsg::SharedCtor() {
  _cached_size_ = 0;
  utargetid_ = 0u;
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  umsgid_ = 0u;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TmpTalkMsg::~TmpTalkMsg() {
  SharedDtor();
}

void TmpTalkMsg::SharedDtor() {
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void TmpTalkMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TmpTalkMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TmpTalkMsg_descriptor_;
}

const TmpTalkMsg& TmpTalkMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

TmpTalkMsg* TmpTalkMsg::default_instance_ = NULL;

TmpTalkMsg* TmpTalkMsg::New() const {
  return new TmpTalkMsg;
}

void TmpTalkMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utargetid_ = 0u;
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
    umsgid_ = 0u;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TmpTalkMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uTargetID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strNickName;
        break;
      }

      // required bytes strNickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strnickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uMsgID;
        break;
      }

      // optional uint32 uMsgID = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uMsgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &umsgid_)));
          set_has_umsgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // required bytes msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TmpTalkMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->utargetid(), output);
  }

  // required bytes strNickName = 2;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->strnickname(), output);
  }

  // optional uint32 uMsgID = 3 [default = 0];
  if (has_umsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->umsgid(), output);
  }

  // required bytes msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TmpTalkMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->utargetid(), target);
  }

  // required bytes strNickName = 2;
  if (has_strnickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->strnickname(), target);
  }

  // optional uint32 uMsgID = 3 [default = 0];
  if (has_umsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->umsgid(), target);
  }

  // required bytes msg = 4;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TmpTalkMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uTargetID = 1 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // required bytes strNickName = 2;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strnickname());
    }

    // optional uint32 uMsgID = 3 [default = 0];
    if (has_umsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->umsgid());
    }

    // required bytes msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TmpTalkMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TmpTalkMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TmpTalkMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TmpTalkMsg::MergeFrom(const TmpTalkMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
    if (from.has_umsgid()) {
      set_umsgid(from.umsgid());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TmpTalkMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmpTalkMsg::CopyFrom(const TmpTalkMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmpTalkMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void TmpTalkMsg::Swap(TmpTalkMsg* other) {
  if (other != this) {
    std::swap(utargetid_, other->utargetid_);
    std::swap(strnickname_, other->strnickname_);
    std::swap(umsgid_, other->umsgid_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TmpTalkMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TmpTalkMsg_descriptor_;
  metadata.reflection = TmpTalkMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PullTalkMsgReq::kUTargetIDFieldNumber;
const int PullTalkMsgReq::kUMsgIDFieldNumber;
#endif  // !_MSC_VER

PullTalkMsgReq::PullTalkMsgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PullTalkMsgReq::InitAsDefaultInstance() {
}

PullTalkMsgReq::PullTalkMsgReq(const PullTalkMsgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PullTalkMsgReq::SharedCtor() {
  _cached_size_ = 0;
  utargetid_ = 0u;
  umsgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PullTalkMsgReq::~PullTalkMsgReq() {
  SharedDtor();
}

void PullTalkMsgReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PullTalkMsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PullTalkMsgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PullTalkMsgReq_descriptor_;
}

const PullTalkMsgReq& PullTalkMsgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

PullTalkMsgReq* PullTalkMsgReq::default_instance_ = NULL;

PullTalkMsgReq* PullTalkMsgReq::New() const {
  return new PullTalkMsgReq;
}

void PullTalkMsgReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utargetid_ = 0u;
    umsgid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PullTalkMsgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uTargetID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uMsgID;
        break;
      }

      // required uint32 uMsgID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uMsgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &umsgid_)));
          set_has_umsgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PullTalkMsgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->utargetid(), output);
  }

  // required uint32 uMsgID = 2 [default = 0];
  if (has_umsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->umsgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PullTalkMsgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->utargetid(), target);
  }

  // required uint32 uMsgID = 2 [default = 0];
  if (has_umsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->umsgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PullTalkMsgReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uTargetID = 1 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // required uint32 uMsgID = 2 [default = 0];
    if (has_umsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->umsgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PullTalkMsgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PullTalkMsgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PullTalkMsgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PullTalkMsgReq::MergeFrom(const PullTalkMsgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_umsgid()) {
      set_umsgid(from.umsgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PullTalkMsgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullTalkMsgReq::CopyFrom(const PullTalkMsgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullTalkMsgReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PullTalkMsgReq::Swap(PullTalkMsgReq* other) {
  if (other != this) {
    std::swap(utargetid_, other->utargetid_);
    std::swap(umsgid_, other->umsgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PullTalkMsgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PullTalkMsgReq_descriptor_;
  metadata.reflection = PullTalkMsgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgInfoNotify_MsgInfo::kUTargetIDFieldNumber;
const int MsgInfoNotify_MsgInfo::kUMsgIDFieldNumber;
#endif  // !_MSC_VER

MsgInfoNotify_MsgInfo::MsgInfoNotify_MsgInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgInfoNotify_MsgInfo::InitAsDefaultInstance() {
}

MsgInfoNotify_MsgInfo::MsgInfoNotify_MsgInfo(const MsgInfoNotify_MsgInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgInfoNotify_MsgInfo::SharedCtor() {
  _cached_size_ = 0;
  utargetid_ = 0u;
  umsgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgInfoNotify_MsgInfo::~MsgInfoNotify_MsgInfo() {
  SharedDtor();
}

void MsgInfoNotify_MsgInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgInfoNotify_MsgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgInfoNotify_MsgInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgInfoNotify_MsgInfo_descriptor_;
}

const MsgInfoNotify_MsgInfo& MsgInfoNotify_MsgInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

MsgInfoNotify_MsgInfo* MsgInfoNotify_MsgInfo::default_instance_ = NULL;

MsgInfoNotify_MsgInfo* MsgInfoNotify_MsgInfo::New() const {
  return new MsgInfoNotify_MsgInfo;
}

void MsgInfoNotify_MsgInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utargetid_ = 0u;
    umsgid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgInfoNotify_MsgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uTargetID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uMsgID;
        break;
      }

      // required uint32 uMsgID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uMsgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &umsgid_)));
          set_has_umsgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgInfoNotify_MsgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->utargetid(), output);
  }

  // required uint32 uMsgID = 2 [default = 0];
  if (has_umsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->umsgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgInfoNotify_MsgInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->utargetid(), target);
  }

  // required uint32 uMsgID = 2 [default = 0];
  if (has_umsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->umsgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgInfoNotify_MsgInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uTargetID = 1 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // required uint32 uMsgID = 2 [default = 0];
    if (has_umsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->umsgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgInfoNotify_MsgInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgInfoNotify_MsgInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgInfoNotify_MsgInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgInfoNotify_MsgInfo::MergeFrom(const MsgInfoNotify_MsgInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_umsgid()) {
      set_umsgid(from.umsgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgInfoNotify_MsgInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgInfoNotify_MsgInfo::CopyFrom(const MsgInfoNotify_MsgInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInfoNotify_MsgInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgInfoNotify_MsgInfo::Swap(MsgInfoNotify_MsgInfo* other) {
  if (other != this) {
    std::swap(utargetid_, other->utargetid_);
    std::swap(umsgid_, other->umsgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgInfoNotify_MsgInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgInfoNotify_MsgInfo_descriptor_;
  metadata.reflection = MsgInfoNotify_MsgInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgInfoNotify::kMsgInfosFieldNumber;
#endif  // !_MSC_VER

MsgInfoNotify::MsgInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgInfoNotify::InitAsDefaultInstance() {
}

MsgInfoNotify::MsgInfoNotify(const MsgInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgInfoNotify::~MsgInfoNotify() {
  SharedDtor();
}

void MsgInfoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgInfoNotify_descriptor_;
}

const MsgInfoNotify& MsgInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

MsgInfoNotify* MsgInfoNotify::default_instance_ = NULL;

MsgInfoNotify* MsgInfoNotify::New() const {
  return new MsgInfoNotify;
}

void MsgInfoNotify::Clear() {
  msginfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.MsgInfoNotify.MsgInfo MsgInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MsgInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msginfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_MsgInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.MsgInfoNotify.MsgInfo MsgInfos = 1;
  for (int i = 0; i < this->msginfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msginfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.MsgInfoNotify.MsgInfo MsgInfos = 1;
  for (int i = 0; i < this->msginfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msginfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgInfoNotify::ByteSize() const {
  int total_size = 0;

  // repeated .tms.MsgInfoNotify.MsgInfo MsgInfos = 1;
  total_size += 1 * this->msginfos_size();
  for (int i = 0; i < this->msginfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msginfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgInfoNotify::MergeFrom(const MsgInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  msginfos_.MergeFrom(from.msginfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgInfoNotify::CopyFrom(const MsgInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInfoNotify::IsInitialized() const {

  for (int i = 0; i < msginfos_size(); i++) {
    if (!this->msginfos(i).IsInitialized()) return false;
  }
  return true;
}

void MsgInfoNotify::Swap(MsgInfoNotify* other) {
  if (other != this) {
    msginfos_.Swap(&other->msginfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgInfoNotify_descriptor_;
  metadata.reflection = MsgInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalkMsgInfo::kUTargetIDFieldNumber;
const int TalkMsgInfo::kTalkMsgsFieldNumber;
#endif  // !_MSC_VER

TalkMsgInfo::TalkMsgInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalkMsgInfo::InitAsDefaultInstance() {
}

TalkMsgInfo::TalkMsgInfo(const TalkMsgInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalkMsgInfo::SharedCtor() {
  _cached_size_ = 0;
  utargetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalkMsgInfo::~TalkMsgInfo() {
  SharedDtor();
}

void TalkMsgInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TalkMsgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkMsgInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalkMsgInfo_descriptor_;
}

const TalkMsgInfo& TalkMsgInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

TalkMsgInfo* TalkMsgInfo::default_instance_ = NULL;

TalkMsgInfo* TalkMsgInfo::New() const {
  return new TalkMsgInfo;
}

void TalkMsgInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utargetid_ = 0u;
  }
  talkmsgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalkMsgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uTargetID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_TalkMsgs;
        break;
      }

      // repeated .tms.TalkMsg TalkMsgs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TalkMsgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_talkmsgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_TalkMsgs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalkMsgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->utargetid(), output);
  }

  // repeated .tms.TalkMsg TalkMsgs = 3;
  for (int i = 0; i < this->talkmsgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->talkmsgs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalkMsgInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->utargetid(), target);
  }

  // repeated .tms.TalkMsg TalkMsgs = 3;
  for (int i = 0; i < this->talkmsgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->talkmsgs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalkMsgInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uTargetID = 2 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

  }
  // repeated .tms.TalkMsg TalkMsgs = 3;
  total_size += 1 * this->talkmsgs_size();
  for (int i = 0; i < this->talkmsgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->talkmsgs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkMsgInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalkMsgInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalkMsgInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalkMsgInfo::MergeFrom(const TalkMsgInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  talkmsgs_.MergeFrom(from.talkmsgs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalkMsgInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkMsgInfo::CopyFrom(const TalkMsgInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkMsgInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < talkmsgs_size(); i++) {
    if (!this->talkmsgs(i).IsInitialized()) return false;
  }
  return true;
}

void TalkMsgInfo::Swap(TalkMsgInfo* other) {
  if (other != this) {
    std::swap(utargetid_, other->utargetid_);
    talkmsgs_.Swap(&other->talkmsgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalkMsgInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalkMsgInfo_descriptor_;
  metadata.reflection = TalkMsgInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GroupPrivateInfo::GroupPrivateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupPrivateInfo::InitAsDefaultInstance() {
}

GroupPrivateInfo::GroupPrivateInfo(const GroupPrivateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupPrivateInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupPrivateInfo::~GroupPrivateInfo() {
  SharedDtor();
}

void GroupPrivateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupPrivateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupPrivateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupPrivateInfo_descriptor_;
}

const GroupPrivateInfo& GroupPrivateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

GroupPrivateInfo* GroupPrivateInfo::default_instance_ = NULL;

GroupPrivateInfo* GroupPrivateInfo::New() const {
  return new GroupPrivateInfo;
}

void GroupPrivateInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupPrivateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GroupPrivateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupPrivateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupPrivateInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupPrivateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupPrivateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupPrivateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupPrivateInfo::MergeFrom(const GroupPrivateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupPrivateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupPrivateInfo::CopyFrom(const GroupPrivateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupPrivateInfo::IsInitialized() const {

  return true;
}

void GroupPrivateInfo::Swap(GroupPrivateInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupPrivateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupPrivateInfo_descriptor_;
  metadata.reflection = GroupPrivateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinGTalk::kUTargetIDFieldNumber;
const int JoinGTalk::kUGTalkIDFieldNumber;
const int JoinGTalk::kTargetInfosFieldNumber;
#endif  // !_MSC_VER

JoinGTalk::JoinGTalk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinGTalk::InitAsDefaultInstance() {
  targetinfos_ = const_cast< ::tms::TargetInfo*>(&::tms::TargetInfo::default_instance());
}

JoinGTalk::JoinGTalk(const JoinGTalk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinGTalk::SharedCtor() {
  _cached_size_ = 0;
  utargetid_ = 0u;
  ugtalkid_ = 0u;
  targetinfos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinGTalk::~JoinGTalk() {
  SharedDtor();
}

void JoinGTalk::SharedDtor() {
  if (this != default_instance_) {
    delete targetinfos_;
  }
}

void JoinGTalk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGTalk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinGTalk_descriptor_;
}

const JoinGTalk& JoinGTalk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

JoinGTalk* JoinGTalk::default_instance_ = NULL;

JoinGTalk* JoinGTalk::New() const {
  return new JoinGTalk;
}

void JoinGTalk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utargetid_ = 0u;
    ugtalkid_ = 0u;
    if (has_targetinfos()) {
      if (targetinfos_ != NULL) targetinfos_->::tms::TargetInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinGTalk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uTargetID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uGTalkID;
        break;
      }

      // required uint32 uGTalkID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uGTalkID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ugtalkid_)));
          set_has_ugtalkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_TargetInfos;
        break;
      }

      // optional .tms.TargetInfo TargetInfos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TargetInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinGTalk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->utargetid(), output);
  }

  // required uint32 uGTalkID = 2 [default = 0];
  if (has_ugtalkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ugtalkid(), output);
  }

  // optional .tms.TargetInfo TargetInfos = 3;
  if (has_targetinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->targetinfos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinGTalk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->utargetid(), target);
  }

  // required uint32 uGTalkID = 2 [default = 0];
  if (has_ugtalkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ugtalkid(), target);
  }

  // optional .tms.TargetInfo TargetInfos = 3;
  if (has_targetinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->targetinfos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinGTalk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uTargetID = 1 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // required uint32 uGTalkID = 2 [default = 0];
    if (has_ugtalkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ugtalkid());
    }

    // optional .tms.TargetInfo TargetInfos = 3;
    if (has_targetinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetinfos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGTalk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinGTalk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinGTalk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinGTalk::MergeFrom(const JoinGTalk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_ugtalkid()) {
      set_ugtalkid(from.ugtalkid());
    }
    if (from.has_targetinfos()) {
      mutable_targetinfos()->::tms::TargetInfo::MergeFrom(from.targetinfos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinGTalk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGTalk::CopyFrom(const JoinGTalk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGTalk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_targetinfos()) {
    if (!this->targetinfos().IsInitialized()) return false;
  }
  return true;
}

void JoinGTalk::Swap(JoinGTalk* other) {
  if (other != this) {
    std::swap(utargetid_, other->utargetid_);
    std::swap(ugtalkid_, other->ugtalkid_);
    std::swap(targetinfos_, other->targetinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinGTalk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinGTalk_descriptor_;
  metadata.reflection = JoinGTalk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnsJoinGTalk::kUTargetIDFieldNumber;
const int AnsJoinGTalk::kUGTalkIDFieldNumber;
#endif  // !_MSC_VER

AnsJoinGTalk::AnsJoinGTalk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnsJoinGTalk::InitAsDefaultInstance() {
}

AnsJoinGTalk::AnsJoinGTalk(const AnsJoinGTalk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnsJoinGTalk::SharedCtor() {
  _cached_size_ = 0;
  utargetid_ = 0u;
  ugtalkid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnsJoinGTalk::~AnsJoinGTalk() {
  SharedDtor();
}

void AnsJoinGTalk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnsJoinGTalk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnsJoinGTalk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnsJoinGTalk_descriptor_;
}

const AnsJoinGTalk& AnsJoinGTalk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

AnsJoinGTalk* AnsJoinGTalk::default_instance_ = NULL;

AnsJoinGTalk* AnsJoinGTalk::New() const {
  return new AnsJoinGTalk;
}

void AnsJoinGTalk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utargetid_ = 0u;
    ugtalkid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnsJoinGTalk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uTargetID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uGTalkID;
        break;
      }

      // required uint32 uGTalkID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uGTalkID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ugtalkid_)));
          set_has_ugtalkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnsJoinGTalk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->utargetid(), output);
  }

  // required uint32 uGTalkID = 2 [default = 0];
  if (has_ugtalkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ugtalkid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnsJoinGTalk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->utargetid(), target);
  }

  // required uint32 uGTalkID = 2 [default = 0];
  if (has_ugtalkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ugtalkid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnsJoinGTalk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uTargetID = 1 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // required uint32 uGTalkID = 2 [default = 0];
    if (has_ugtalkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ugtalkid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnsJoinGTalk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnsJoinGTalk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnsJoinGTalk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnsJoinGTalk::MergeFrom(const AnsJoinGTalk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_ugtalkid()) {
      set_ugtalkid(from.ugtalkid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnsJoinGTalk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnsJoinGTalk::CopyFrom(const AnsJoinGTalk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnsJoinGTalk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AnsJoinGTalk::Swap(AnsJoinGTalk* other) {
  if (other != this) {
    std::swap(utargetid_, other->utargetid_);
    std::swap(ugtalkid_, other->ugtalkid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnsJoinGTalk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnsJoinGTalk_descriptor_;
  metadata.reflection = AnsJoinGTalk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuitGTalk::kUTargetIDFieldNumber;
const int QuitGTalk::kUGTalkIDFieldNumber;
#endif  // !_MSC_VER

QuitGTalk::QuitGTalk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuitGTalk::InitAsDefaultInstance() {
}

QuitGTalk::QuitGTalk(const QuitGTalk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuitGTalk::SharedCtor() {
  _cached_size_ = 0;
  utargetid_ = 0u;
  ugtalkid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuitGTalk::~QuitGTalk() {
  SharedDtor();
}

void QuitGTalk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuitGTalk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitGTalk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuitGTalk_descriptor_;
}

const QuitGTalk& QuitGTalk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

QuitGTalk* QuitGTalk::default_instance_ = NULL;

QuitGTalk* QuitGTalk::New() const {
  return new QuitGTalk;
}

void QuitGTalk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utargetid_ = 0u;
    ugtalkid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuitGTalk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uTargetID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uGTalkID;
        break;
      }

      // required uint32 uGTalkID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uGTalkID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ugtalkid_)));
          set_has_ugtalkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuitGTalk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->utargetid(), output);
  }

  // required uint32 uGTalkID = 2 [default = 0];
  if (has_ugtalkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ugtalkid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuitGTalk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->utargetid(), target);
  }

  // required uint32 uGTalkID = 2 [default = 0];
  if (has_ugtalkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ugtalkid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuitGTalk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uTargetID = 1 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // required uint32 uGTalkID = 2 [default = 0];
    if (has_ugtalkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ugtalkid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitGTalk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuitGTalk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuitGTalk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuitGTalk::MergeFrom(const QuitGTalk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_ugtalkid()) {
      set_ugtalkid(from.ugtalkid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuitGTalk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitGTalk::CopyFrom(const QuitGTalk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitGTalk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void QuitGTalk::Swap(QuitGTalk* other) {
  if (other != this) {
    std::swap(utargetid_, other->utargetid_);
    std::swap(ugtalkid_, other->ugtalkid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuitGTalk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuitGTalk_descriptor_;
  metadata.reflection = QuitGTalk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysTargetInfo::kUVersionFieldNumber;
const int SysTargetInfo::kUTargetIDFieldNumber;
const int SysTargetInfo::kObjsFieldNumber;
#endif  // !_MSC_VER

SysTargetInfo::SysTargetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysTargetInfo::InitAsDefaultInstance() {
  objs_ = const_cast< ::tms::TargetInfo*>(&::tms::TargetInfo::default_instance());
}

SysTargetInfo::SysTargetInfo(const SysTargetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysTargetInfo::SharedCtor() {
  _cached_size_ = 0;
  uversion_ = 0u;
  utargetid_ = 0u;
  objs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysTargetInfo::~SysTargetInfo() {
  SharedDtor();
}

void SysTargetInfo::SharedDtor() {
  if (this != default_instance_) {
    delete objs_;
  }
}

void SysTargetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysTargetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysTargetInfo_descriptor_;
}

const SysTargetInfo& SysTargetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

SysTargetInfo* SysTargetInfo::default_instance_ = NULL;

SysTargetInfo* SysTargetInfo::New() const {
  return new SysTargetInfo;
}

void SysTargetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uversion_ = 0u;
    utargetid_ = 0u;
    if (has_objs()) {
      if (objs_ != NULL) objs_->::tms::TargetInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysTargetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uVersion = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uversion_)));
          set_has_uversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uTargetID;
        break;
      }

      // required uint32 uTargetID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uTargetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_objs;
        break;
      }

      // optional .tms.TargetInfo objs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysTargetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uVersion = 1 [default = 0];
  if (has_uversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uversion(), output);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->utargetid(), output);
  }

  // optional .tms.TargetInfo objs = 3;
  if (has_objs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->objs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysTargetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uVersion = 1 [default = 0];
  if (has_uversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uversion(), target);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->utargetid(), target);
  }

  // optional .tms.TargetInfo objs = 3;
  if (has_objs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->objs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysTargetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uVersion = 1 [default = 0];
    if (has_uversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uversion());
    }

    // required uint32 uTargetID = 2 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // optional .tms.TargetInfo objs = 3;
    if (has_objs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysTargetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysTargetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysTargetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysTargetInfo::MergeFrom(const SysTargetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uversion()) {
      set_uversion(from.uversion());
    }
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_objs()) {
      mutable_objs()->::tms::TargetInfo::MergeFrom(from.objs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysTargetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysTargetInfo::CopyFrom(const SysTargetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysTargetInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_objs()) {
    if (!this->objs().IsInitialized()) return false;
  }
  return true;
}

void SysTargetInfo::Swap(SysTargetInfo* other) {
  if (other != this) {
    std::swap(uversion_, other->uversion_);
    std::swap(utargetid_, other->utargetid_);
    std::swap(objs_, other->objs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysTargetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysTargetInfo_descriptor_;
  metadata.reflection = SysTargetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysTargetInfoList::kNodesFieldNumber;
#endif  // !_MSC_VER

SysTargetInfoList::SysTargetInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysTargetInfoList::InitAsDefaultInstance() {
}

SysTargetInfoList::SysTargetInfoList(const SysTargetInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysTargetInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysTargetInfoList::~SysTargetInfoList() {
  SharedDtor();
}

void SysTargetInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SysTargetInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysTargetInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysTargetInfoList_descriptor_;
}

const SysTargetInfoList& SysTargetInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

SysTargetInfoList* SysTargetInfoList::default_instance_ = NULL;

SysTargetInfoList* SysTargetInfoList::New() const {
  return new SysTargetInfoList;
}

void SysTargetInfoList::Clear() {
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysTargetInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.SysTargetInfo nodes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysTargetInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.SysTargetInfo nodes = 2;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysTargetInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.SysTargetInfo nodes = 2;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysTargetInfoList::ByteSize() const {
  int total_size = 0;

  // repeated .tms.SysTargetInfo nodes = 2;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysTargetInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysTargetInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysTargetInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysTargetInfoList::MergeFrom(const SysTargetInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysTargetInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysTargetInfoList::CopyFrom(const SysTargetInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysTargetInfoList::IsInitialized() const {

  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void SysTargetInfoList::Swap(SysTargetInfoList* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysTargetInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysTargetInfoList_descriptor_;
  metadata.reflection = SysTargetInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysMemberInfo::kUVersionFieldNumber;
const int SysMemberInfo::kUTargetIDFieldNumber;
const int SysMemberInfo::kObjsFieldNumber;
#endif  // !_MSC_VER

SysMemberInfo::SysMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysMemberInfo::InitAsDefaultInstance() {
  objs_ = const_cast< ::tms::MemberInfo*>(&::tms::MemberInfo::default_instance());
}

SysMemberInfo::SysMemberInfo(const SysMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  uversion_ = 0u;
  utargetid_ = 0u;
  objs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysMemberInfo::~SysMemberInfo() {
  SharedDtor();
}

void SysMemberInfo::SharedDtor() {
  if (this != default_instance_) {
    delete objs_;
  }
}

void SysMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysMemberInfo_descriptor_;
}

const SysMemberInfo& SysMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

SysMemberInfo* SysMemberInfo::default_instance_ = NULL;

SysMemberInfo* SysMemberInfo::New() const {
  return new SysMemberInfo;
}

void SysMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uversion_ = 0u;
    utargetid_ = 0u;
    if (has_objs()) {
      if (objs_ != NULL) objs_->::tms::MemberInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uVersion = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uversion_)));
          set_has_uversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uTargetID;
        break;
      }

      // required uint32 uTargetID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uTargetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_objs;
        break;
      }

      // optional .tms.MemberInfo objs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uVersion = 1 [default = 0];
  if (has_uversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uversion(), output);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->utargetid(), output);
  }

  // optional .tms.MemberInfo objs = 3;
  if (has_objs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->objs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uVersion = 1 [default = 0];
  if (has_uversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uversion(), target);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->utargetid(), target);
  }

  // optional .tms.MemberInfo objs = 3;
  if (has_objs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->objs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysMemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uVersion = 1 [default = 0];
    if (has_uversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uversion());
    }

    // required uint32 uTargetID = 2 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // optional .tms.MemberInfo objs = 3;
    if (has_objs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysMemberInfo::MergeFrom(const SysMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uversion()) {
      set_uversion(from.uversion());
    }
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_objs()) {
      mutable_objs()->::tms::MemberInfo::MergeFrom(from.objs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysMemberInfo::CopyFrom(const SysMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysMemberInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SysMemberInfo::Swap(SysMemberInfo* other) {
  if (other != this) {
    std::swap(uversion_, other->uversion_);
    std::swap(utargetid_, other->utargetid_);
    std::swap(objs_, other->objs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysMemberInfo_descriptor_;
  metadata.reflection = SysMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysMemberInfoList::kUVersionFieldNumber;
const int SysMemberInfoList::kUTargetIDFieldNumber;
const int SysMemberInfoList::kNodesFieldNumber;
#endif  // !_MSC_VER

SysMemberInfoList::SysMemberInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysMemberInfoList::InitAsDefaultInstance() {
}

SysMemberInfoList::SysMemberInfoList(const SysMemberInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysMemberInfoList::SharedCtor() {
  _cached_size_ = 0;
  uversion_ = 0u;
  utargetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysMemberInfoList::~SysMemberInfoList() {
  SharedDtor();
}

void SysMemberInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SysMemberInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysMemberInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysMemberInfoList_descriptor_;
}

const SysMemberInfoList& SysMemberInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

SysMemberInfoList* SysMemberInfoList::default_instance_ = NULL;

SysMemberInfoList* SysMemberInfoList::New() const {
  return new SysMemberInfoList;
}

void SysMemberInfoList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uversion_ = 0u;
    utargetid_ = 0u;
  }
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysMemberInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uVersion = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uversion_)));
          set_has_uversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uTargetID;
        break;
      }

      // required uint32 uTargetID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uTargetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nodes;
        break;
      }

      // repeated .tms.SysMemberInfo nodes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysMemberInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uVersion = 1 [default = 0];
  if (has_uversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uversion(), output);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->utargetid(), output);
  }

  // repeated .tms.SysMemberInfo nodes = 3;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysMemberInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uVersion = 1 [default = 0];
  if (has_uversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uversion(), target);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->utargetid(), target);
  }

  // repeated .tms.SysMemberInfo nodes = 3;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysMemberInfoList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uVersion = 1 [default = 0];
    if (has_uversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uversion());
    }

    // required uint32 uTargetID = 2 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

  }
  // repeated .tms.SysMemberInfo nodes = 3;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysMemberInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysMemberInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysMemberInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysMemberInfoList::MergeFrom(const SysMemberInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uversion()) {
      set_uversion(from.uversion());
    }
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysMemberInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysMemberInfoList::CopyFrom(const SysMemberInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysMemberInfoList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void SysMemberInfoList::Swap(SysMemberInfoList* other) {
  if (other != this) {
    std::swap(uversion_, other->uversion_);
    std::swap(utargetid_, other->utargetid_);
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysMemberInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysMemberInfoList_descriptor_;
  metadata.reflection = SysMemberInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysUserPrivateInfo::kUVersionFieldNumber;
const int SysUserPrivateInfo::kUTargetIDFieldNumber;
const int SysUserPrivateInfo::kObjsFieldNumber;
#endif  // !_MSC_VER

SysUserPrivateInfo::SysUserPrivateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysUserPrivateInfo::InitAsDefaultInstance() {
  objs_ = const_cast< ::tms::UserPrivateInfo*>(&::tms::UserPrivateInfo::default_instance());
}

SysUserPrivateInfo::SysUserPrivateInfo(const SysUserPrivateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysUserPrivateInfo::SharedCtor() {
  _cached_size_ = 0;
  uversion_ = 0u;
  utargetid_ = 0u;
  objs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysUserPrivateInfo::~SysUserPrivateInfo() {
  SharedDtor();
}

void SysUserPrivateInfo::SharedDtor() {
  if (this != default_instance_) {
    delete objs_;
  }
}

void SysUserPrivateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysUserPrivateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysUserPrivateInfo_descriptor_;
}

const SysUserPrivateInfo& SysUserPrivateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

SysUserPrivateInfo* SysUserPrivateInfo::default_instance_ = NULL;

SysUserPrivateInfo* SysUserPrivateInfo::New() const {
  return new SysUserPrivateInfo;
}

void SysUserPrivateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uversion_ = 0u;
    utargetid_ = 0u;
    if (has_objs()) {
      if (objs_ != NULL) objs_->::tms::UserPrivateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysUserPrivateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uVersion = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uversion_)));
          set_has_uversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uTargetID;
        break;
      }

      // required uint32 uTargetID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uTargetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_objs;
        break;
      }

      // optional .tms.UserPrivateInfo objs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysUserPrivateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uVersion = 1 [default = 0];
  if (has_uversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uversion(), output);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->utargetid(), output);
  }

  // optional .tms.UserPrivateInfo objs = 3;
  if (has_objs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->objs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysUserPrivateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uVersion = 1 [default = 0];
  if (has_uversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uversion(), target);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->utargetid(), target);
  }

  // optional .tms.UserPrivateInfo objs = 3;
  if (has_objs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->objs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysUserPrivateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uVersion = 1 [default = 0];
    if (has_uversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uversion());
    }

    // required uint32 uTargetID = 2 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // optional .tms.UserPrivateInfo objs = 3;
    if (has_objs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysUserPrivateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysUserPrivateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysUserPrivateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysUserPrivateInfo::MergeFrom(const SysUserPrivateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uversion()) {
      set_uversion(from.uversion());
    }
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_objs()) {
      mutable_objs()->::tms::UserPrivateInfo::MergeFrom(from.objs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysUserPrivateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysUserPrivateInfo::CopyFrom(const SysUserPrivateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysUserPrivateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SysUserPrivateInfo::Swap(SysUserPrivateInfo* other) {
  if (other != this) {
    std::swap(uversion_, other->uversion_);
    std::swap(utargetid_, other->utargetid_);
    std::swap(objs_, other->objs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysUserPrivateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysUserPrivateInfo_descriptor_;
  metadata.reflection = SysUserPrivateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysUserPrivateInfoList::kNodesFieldNumber;
#endif  // !_MSC_VER

SysUserPrivateInfoList::SysUserPrivateInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysUserPrivateInfoList::InitAsDefaultInstance() {
}

SysUserPrivateInfoList::SysUserPrivateInfoList(const SysUserPrivateInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysUserPrivateInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysUserPrivateInfoList::~SysUserPrivateInfoList() {
  SharedDtor();
}

void SysUserPrivateInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SysUserPrivateInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysUserPrivateInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysUserPrivateInfoList_descriptor_;
}

const SysUserPrivateInfoList& SysUserPrivateInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

SysUserPrivateInfoList* SysUserPrivateInfoList::default_instance_ = NULL;

SysUserPrivateInfoList* SysUserPrivateInfoList::New() const {
  return new SysUserPrivateInfoList;
}

void SysUserPrivateInfoList::Clear() {
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysUserPrivateInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.SysUserPrivateInfo nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysUserPrivateInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.SysUserPrivateInfo nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysUserPrivateInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.SysUserPrivateInfo nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysUserPrivateInfoList::ByteSize() const {
  int total_size = 0;

  // repeated .tms.SysUserPrivateInfo nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysUserPrivateInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysUserPrivateInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysUserPrivateInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysUserPrivateInfoList::MergeFrom(const SysUserPrivateInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysUserPrivateInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysUserPrivateInfoList::CopyFrom(const SysUserPrivateInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysUserPrivateInfoList::IsInitialized() const {

  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void SysUserPrivateInfoList::Swap(SysUserPrivateInfoList* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysUserPrivateInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysUserPrivateInfoList_descriptor_;
  metadata.reflection = SysUserPrivateInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysGroupInfo::kUVersionFieldNumber;
const int SysGroupInfo::kUTargetIDFieldNumber;
const int SysGroupInfo::kObjsFieldNumber;
#endif  // !_MSC_VER

SysGroupInfo::SysGroupInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysGroupInfo::InitAsDefaultInstance() {
  objs_ = const_cast< ::tms::GroupPrivateInfo*>(&::tms::GroupPrivateInfo::default_instance());
}

SysGroupInfo::SysGroupInfo(const SysGroupInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysGroupInfo::SharedCtor() {
  _cached_size_ = 0;
  uversion_ = 0u;
  utargetid_ = 0u;
  objs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysGroupInfo::~SysGroupInfo() {
  SharedDtor();
}

void SysGroupInfo::SharedDtor() {
  if (this != default_instance_) {
    delete objs_;
  }
}

void SysGroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysGroupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysGroupInfo_descriptor_;
}

const SysGroupInfo& SysGroupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

SysGroupInfo* SysGroupInfo::default_instance_ = NULL;

SysGroupInfo* SysGroupInfo::New() const {
  return new SysGroupInfo;
}

void SysGroupInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uversion_ = 0u;
    utargetid_ = 0u;
    if (has_objs()) {
      if (objs_ != NULL) objs_->::tms::GroupPrivateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysGroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uVersion = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uversion_)));
          set_has_uversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uTargetID;
        break;
      }

      // required uint32 uTargetID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uTargetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_objs;
        break;
      }

      // optional .tms.GroupPrivateInfo objs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysGroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uVersion = 1 [default = 0];
  if (has_uversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uversion(), output);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->utargetid(), output);
  }

  // optional .tms.GroupPrivateInfo objs = 4;
  if (has_objs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->objs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysGroupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uVersion = 1 [default = 0];
  if (has_uversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uversion(), target);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->utargetid(), target);
  }

  // optional .tms.GroupPrivateInfo objs = 4;
  if (has_objs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->objs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysGroupInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uVersion = 1 [default = 0];
    if (has_uversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uversion());
    }

    // required uint32 uTargetID = 2 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // optional .tms.GroupPrivateInfo objs = 4;
    if (has_objs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysGroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysGroupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysGroupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysGroupInfo::MergeFrom(const SysGroupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uversion()) {
      set_uversion(from.uversion());
    }
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_objs()) {
      mutable_objs()->::tms::GroupPrivateInfo::MergeFrom(from.objs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysGroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysGroupInfo::CopyFrom(const SysGroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysGroupInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SysGroupInfo::Swap(SysGroupInfo* other) {
  if (other != this) {
    std::swap(uversion_, other->uversion_);
    std::swap(utargetid_, other->utargetid_);
    std::swap(objs_, other->objs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysGroupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysGroupInfo_descriptor_;
  metadata.reflection = SysGroupInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysGroupInfoList::kNodesFieldNumber;
#endif  // !_MSC_VER

SysGroupInfoList::SysGroupInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysGroupInfoList::InitAsDefaultInstance() {
}

SysGroupInfoList::SysGroupInfoList(const SysGroupInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysGroupInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysGroupInfoList::~SysGroupInfoList() {
  SharedDtor();
}

void SysGroupInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SysGroupInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysGroupInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysGroupInfoList_descriptor_;
}

const SysGroupInfoList& SysGroupInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

SysGroupInfoList* SysGroupInfoList::default_instance_ = NULL;

SysGroupInfoList* SysGroupInfoList::New() const {
  return new SysGroupInfoList;
}

void SysGroupInfoList::Clear() {
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysGroupInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.SysGroupInfo nodes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysGroupInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.SysGroupInfo nodes = 3;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysGroupInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.SysGroupInfo nodes = 3;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysGroupInfoList::ByteSize() const {
  int total_size = 0;

  // repeated .tms.SysGroupInfo nodes = 3;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysGroupInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysGroupInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysGroupInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysGroupInfoList::MergeFrom(const SysGroupInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysGroupInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysGroupInfoList::CopyFrom(const SysGroupInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysGroupInfoList::IsInitialized() const {

  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void SysGroupInfoList::Swap(SysGroupInfoList* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysGroupInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysGroupInfoList_descriptor_;
  metadata.reflection = SysGroupInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysGTalkInfoList::kUVersionFieldNumber;
const int SysGTalkInfoList::kObjsFieldNumber;
#endif  // !_MSC_VER

SysGTalkInfoList::SysGTalkInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysGTalkInfoList::InitAsDefaultInstance() {
  objs_ = const_cast< ::tms::SysGroupInfoList*>(&::tms::SysGroupInfoList::default_instance());
}

SysGTalkInfoList::SysGTalkInfoList(const SysGTalkInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysGTalkInfoList::SharedCtor() {
  _cached_size_ = 0;
  uversion_ = 0u;
  objs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysGTalkInfoList::~SysGTalkInfoList() {
  SharedDtor();
}

void SysGTalkInfoList::SharedDtor() {
  if (this != default_instance_) {
    delete objs_;
  }
}

void SysGTalkInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysGTalkInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysGTalkInfoList_descriptor_;
}

const SysGTalkInfoList& SysGTalkInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

SysGTalkInfoList* SysGTalkInfoList::default_instance_ = NULL;

SysGTalkInfoList* SysGTalkInfoList::New() const {
  return new SysGTalkInfoList;
}

void SysGTalkInfoList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uversion_ = 0u;
    if (has_objs()) {
      if (objs_ != NULL) objs_->::tms::SysGroupInfoList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysGTalkInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uVersion = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uversion_)));
          set_has_uversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_objs;
        break;
      }

      // optional .tms.SysGroupInfoList objs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysGTalkInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uVersion = 1 [default = 0];
  if (has_uversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uversion(), output);
  }

  // optional .tms.SysGroupInfoList objs = 3;
  if (has_objs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->objs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysGTalkInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uVersion = 1 [default = 0];
  if (has_uversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uversion(), target);
  }

  // optional .tms.SysGroupInfoList objs = 3;
  if (has_objs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->objs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysGTalkInfoList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uVersion = 1 [default = 0];
    if (has_uversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uversion());
    }

    // optional .tms.SysGroupInfoList objs = 3;
    if (has_objs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysGTalkInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysGTalkInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysGTalkInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysGTalkInfoList::MergeFrom(const SysGTalkInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uversion()) {
      set_uversion(from.uversion());
    }
    if (from.has_objs()) {
      mutable_objs()->::tms::SysGroupInfoList::MergeFrom(from.objs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysGTalkInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysGTalkInfoList::CopyFrom(const SysGTalkInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysGTalkInfoList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_objs()) {
    if (!this->objs().IsInitialized()) return false;
  }
  return true;
}

void SysGTalkInfoList::Swap(SysGTalkInfoList* other) {
  if (other != this) {
    std::swap(uversion_, other->uversion_);
    std::swap(objs_, other->objs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysGTalkInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysGTalkInfoList_descriptor_;
  metadata.reflection = SysGTalkInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysUserInfo::kUVersionFieldNumber;
const int SysUserInfo::kPrivateInfosFieldNumber;
#endif  // !_MSC_VER

SysUserInfo::SysUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysUserInfo::InitAsDefaultInstance() {
  privateinfos_ = const_cast< ::tms::PrivateInfo*>(&::tms::PrivateInfo::default_instance());
}

SysUserInfo::SysUserInfo(const SysUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysUserInfo::SharedCtor() {
  _cached_size_ = 0;
  uversion_ = 0u;
  privateinfos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysUserInfo::~SysUserInfo() {
  SharedDtor();
}

void SysUserInfo::SharedDtor() {
  if (this != default_instance_) {
    delete privateinfos_;
  }
}

void SysUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysUserInfo_descriptor_;
}

const SysUserInfo& SysUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

SysUserInfo* SysUserInfo::default_instance_ = NULL;

SysUserInfo* SysUserInfo::New() const {
  return new SysUserInfo;
}

void SysUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uversion_ = 0u;
    if (has_privateinfos()) {
      if (privateinfos_ != NULL) privateinfos_->::tms::PrivateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uVersion = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uversion_)));
          set_has_uversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_PrivateInfos;
        break;
      }

      // optional .tms.PrivateInfo PrivateInfos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PrivateInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_privateinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uVersion = 1 [default = 0];
  if (has_uversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uversion(), output);
  }

  // optional .tms.PrivateInfo PrivateInfos = 3;
  if (has_privateinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->privateinfos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uVersion = 1 [default = 0];
  if (has_uversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uversion(), target);
  }

  // optional .tms.PrivateInfo PrivateInfos = 3;
  if (has_privateinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->privateinfos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uVersion = 1 [default = 0];
    if (has_uversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uversion());
    }

    // optional .tms.PrivateInfo PrivateInfos = 3;
    if (has_privateinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->privateinfos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysUserInfo::MergeFrom(const SysUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uversion()) {
      set_uversion(from.uversion());
    }
    if (from.has_privateinfos()) {
      mutable_privateinfos()->::tms::PrivateInfo::MergeFrom(from.privateinfos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysUserInfo::CopyFrom(const SysUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SysUserInfo::Swap(SysUserInfo* other) {
  if (other != this) {
    std::swap(uversion_, other->uversion_);
    std::swap(privateinfos_, other->privateinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysUserInfo_descriptor_;
  metadata.reflection = SysUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysTalkMsg::kUVersionFieldNumber;
const int SysTalkMsg::kUTargetIDFieldNumber;
const int SysTalkMsg::kNodesFieldNumber;
#endif  // !_MSC_VER

SysTalkMsg::SysTalkMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysTalkMsg::InitAsDefaultInstance() {
}

SysTalkMsg::SysTalkMsg(const SysTalkMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysTalkMsg::SharedCtor() {
  _cached_size_ = 0;
  uversion_ = 0u;
  utargetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysTalkMsg::~SysTalkMsg() {
  SharedDtor();
}

void SysTalkMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SysTalkMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysTalkMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysTalkMsg_descriptor_;
}

const SysTalkMsg& SysTalkMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

SysTalkMsg* SysTalkMsg::default_instance_ = NULL;

SysTalkMsg* SysTalkMsg::New() const {
  return new SysTalkMsg;
}

void SysTalkMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uversion_ = 0u;
    utargetid_ = 0u;
  }
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysTalkMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uVersion = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uversion_)));
          set_has_uversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uTargetID;
        break;
      }

      // required uint32 uTargetID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uTargetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nodes;
        break;
      }

      // repeated .tms.TalkMsg nodes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysTalkMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uVersion = 1 [default = 0];
  if (has_uversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uversion(), output);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->utargetid(), output);
  }

  // repeated .tms.TalkMsg nodes = 3;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysTalkMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uVersion = 1 [default = 0];
  if (has_uversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uversion(), target);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->utargetid(), target);
  }

  // repeated .tms.TalkMsg nodes = 3;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysTalkMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uVersion = 1 [default = 0];
    if (has_uversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uversion());
    }

    // required uint32 uTargetID = 2 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

  }
  // repeated .tms.TalkMsg nodes = 3;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysTalkMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysTalkMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysTalkMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysTalkMsg::MergeFrom(const SysTalkMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uversion()) {
      set_uversion(from.uversion());
    }
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysTalkMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysTalkMsg::CopyFrom(const SysTalkMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysTalkMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void SysTalkMsg::Swap(SysTalkMsg* other) {
  if (other != this) {
    std::swap(uversion_, other->uversion_);
    std::swap(utargetid_, other->utargetid_);
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysTalkMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysTalkMsg_descriptor_;
  metadata.reflection = SysTalkMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysTalkMsgList::kNodesFieldNumber;
#endif  // !_MSC_VER

SysTalkMsgList::SysTalkMsgList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysTalkMsgList::InitAsDefaultInstance() {
}

SysTalkMsgList::SysTalkMsgList(const SysTalkMsgList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysTalkMsgList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysTalkMsgList::~SysTalkMsgList() {
  SharedDtor();
}

void SysTalkMsgList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SysTalkMsgList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysTalkMsgList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysTalkMsgList_descriptor_;
}

const SysTalkMsgList& SysTalkMsgList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

SysTalkMsgList* SysTalkMsgList::default_instance_ = NULL;

SysTalkMsgList* SysTalkMsgList::New() const {
  return new SysTalkMsgList;
}

void SysTalkMsgList::Clear() {
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysTalkMsgList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.SysTalkMsg nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysTalkMsgList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.SysTalkMsg nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysTalkMsgList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.SysTalkMsg nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysTalkMsgList::ByteSize() const {
  int total_size = 0;

  // repeated .tms.SysTalkMsg nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysTalkMsgList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysTalkMsgList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysTalkMsgList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysTalkMsgList::MergeFrom(const SysTalkMsgList& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysTalkMsgList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysTalkMsgList::CopyFrom(const SysTalkMsgList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysTalkMsgList::IsInitialized() const {

  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void SysTalkMsgList::Swap(SysTalkMsgList* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysTalkMsgList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysTalkMsgList_descriptor_;
  metadata.reflection = SysTalkMsgList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysTargetMsgInfo::kUVersionFieldNumber;
const int SysTargetMsgInfo::kUTargetIDFieldNumber;
#endif  // !_MSC_VER

SysTargetMsgInfo::SysTargetMsgInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysTargetMsgInfo::InitAsDefaultInstance() {
}

SysTargetMsgInfo::SysTargetMsgInfo(const SysTargetMsgInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysTargetMsgInfo::SharedCtor() {
  _cached_size_ = 0;
  uversion_ = 0u;
  utargetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysTargetMsgInfo::~SysTargetMsgInfo() {
  SharedDtor();
}

void SysTargetMsgInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SysTargetMsgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysTargetMsgInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysTargetMsgInfo_descriptor_;
}

const SysTargetMsgInfo& SysTargetMsgInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

SysTargetMsgInfo* SysTargetMsgInfo::default_instance_ = NULL;

SysTargetMsgInfo* SysTargetMsgInfo::New() const {
  return new SysTargetMsgInfo;
}

void SysTargetMsgInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uversion_ = 0u;
    utargetid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysTargetMsgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uVersion = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uversion_)));
          set_has_uversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uTargetID;
        break;
      }

      // required uint32 uTargetID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uTargetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysTargetMsgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uVersion = 1 [default = 0];
  if (has_uversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uversion(), output);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->utargetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysTargetMsgInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uVersion = 1 [default = 0];
  if (has_uversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uversion(), target);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->utargetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysTargetMsgInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uVersion = 1 [default = 0];
    if (has_uversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uversion());
    }

    // required uint32 uTargetID = 2 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysTargetMsgInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysTargetMsgInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysTargetMsgInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysTargetMsgInfo::MergeFrom(const SysTargetMsgInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uversion()) {
      set_uversion(from.uversion());
    }
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysTargetMsgInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysTargetMsgInfo::CopyFrom(const SysTargetMsgInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysTargetMsgInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SysTargetMsgInfo::Swap(SysTargetMsgInfo* other) {
  if (other != this) {
    std::swap(uversion_, other->uversion_);
    std::swap(utargetid_, other->utargetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysTargetMsgInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysTargetMsgInfo_descriptor_;
  metadata.reflection = SysTargetMsgInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysTargetMsgInfoList::kNodesFieldNumber;
#endif  // !_MSC_VER

SysTargetMsgInfoList::SysTargetMsgInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysTargetMsgInfoList::InitAsDefaultInstance() {
}

SysTargetMsgInfoList::SysTargetMsgInfoList(const SysTargetMsgInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysTargetMsgInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysTargetMsgInfoList::~SysTargetMsgInfoList() {
  SharedDtor();
}

void SysTargetMsgInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SysTargetMsgInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysTargetMsgInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysTargetMsgInfoList_descriptor_;
}

const SysTargetMsgInfoList& SysTargetMsgInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

SysTargetMsgInfoList* SysTargetMsgInfoList::default_instance_ = NULL;

SysTargetMsgInfoList* SysTargetMsgInfoList::New() const {
  return new SysTargetMsgInfoList;
}

void SysTargetMsgInfoList::Clear() {
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysTargetMsgInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.SysTargetMsgInfo nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysTargetMsgInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.SysTargetMsgInfo nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysTargetMsgInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.SysTargetMsgInfo nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysTargetMsgInfoList::ByteSize() const {
  int total_size = 0;

  // repeated .tms.SysTargetMsgInfo nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysTargetMsgInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysTargetMsgInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysTargetMsgInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysTargetMsgInfoList::MergeFrom(const SysTargetMsgInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysTargetMsgInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysTargetMsgInfoList::CopyFrom(const SysTargetMsgInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysTargetMsgInfoList::IsInitialized() const {

  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void SysTargetMsgInfoList::Swap(SysTargetMsgInfoList* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysTargetMsgInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysTargetMsgInfoList_descriptor_;
  metadata.reflection = SysTargetMsgInfoList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tms

// @@protoc_insertion_point(global_scope)
