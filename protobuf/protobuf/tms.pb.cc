// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tms.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tms.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tms {

namespace {

const ::google::protobuf::Descriptor* StateServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateServerReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StateServerReq_cmd_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargtServerID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargtServerID_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargtServerIDList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargtServerIDList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetOnlineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetOnlineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLoginFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLoginFlagList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginFlagList_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserOnlineNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserOnlineNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalkMsgBaseList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalkMsgBaseList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalkMsgBaseList_TalkMsgBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalkMsgBaseList_TalkMsgBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMsgBaseList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMsgBaseList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMsgBaseList_ChatMsgBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMsgBaseList_ChatMsgBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserMsgIDList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserMsgIDList_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserMsgIDList_UserMsgID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserMsgIDList_UserMsgID_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tms_2eproto() {
  protobuf_AddDesc_tms_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tms.proto");
  GOOGLE_CHECK(file != NULL);
  StateServerReq_descriptor_ = file->message_type(0);
  static const int StateServerReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateServerReq, ncmd_),
  };
  StateServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateServerReq_descriptor_,
      StateServerReq::default_instance_,
      StateServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateServerReq));
  StateServerReq_cmd_descriptor_ = StateServerReq_descriptor_->enum_type(0);
  ServerInfo_descriptor_ = file->message_type(1);
  static const int ServerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, userverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, strserverip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, usserverport_),
  };
  ServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfo_descriptor_,
      ServerInfo::default_instance_,
      ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfo));
  ServerOut_descriptor_ = file->message_type(2);
  static const int ServerOut_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOut, userverid_),
  };
  ServerOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerOut_descriptor_,
      ServerOut::default_instance_,
      ServerOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerOut));
  ServerInfoList_descriptor_ = file->message_type(3);
  static const int ServerInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoList, serverinfos_),
  };
  ServerInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfoList_descriptor_,
      ServerInfoList::default_instance_,
      ServerInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfoList));
  TargtServerID_descriptor_ = file->message_type(4);
  static const int TargtServerID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargtServerID, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargtServerID, userverid_),
  };
  TargtServerID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargtServerID_descriptor_,
      TargtServerID::default_instance_,
      TargtServerID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargtServerID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargtServerID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargtServerID));
  TargtServerIDList_descriptor_ = file->message_type(5);
  static const int TargtServerIDList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargtServerIDList, targtserverids_),
  };
  TargtServerIDList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargtServerIDList_descriptor_,
      TargtServerIDList::default_instance_,
      TargtServerIDList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargtServerIDList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargtServerIDList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargtServerIDList));
  TargetOnlineInfo_descriptor_ = file->message_type(6);
  static const int TargetOnlineInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetOnlineInfo, uaccountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetOnlineInfo, usessionid_),
  };
  TargetOnlineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetOnlineInfo_descriptor_,
      TargetOnlineInfo::default_instance_,
      TargetOnlineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetOnlineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetOnlineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetOnlineInfo));
  UserLoginFlag_descriptor_ = file->message_type(7);
  static const int UserLoginFlag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginFlag, uaccountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginFlag, uloginflags_),
  };
  UserLoginFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginFlag_descriptor_,
      UserLoginFlag::default_instance_,
      UserLoginFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginFlag));
  UserLoginFlagList_descriptor_ = file->message_type(8);
  static const int UserLoginFlagList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginFlagList, userloginflags_),
  };
  UserLoginFlagList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginFlagList_descriptor_,
      UserLoginFlagList::default_instance_,
      UserLoginFlagList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginFlagList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginFlagList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginFlagList));
  UserOnlineNotify_descriptor_ = file->message_type(9);
  static const int UserOnlineNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineNotify, uaccountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineNotify, userverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineNotify, uloginflag_),
  };
  UserOnlineNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserOnlineNotify_descriptor_,
      UserOnlineNotify::default_instance_,
      UserOnlineNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserOnlineNotify));
  TalkMsgBaseList_descriptor_ = file->message_type(10);
  static const int TalkMsgBaseList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgBaseList, talkmsgbases_),
  };
  TalkMsgBaseList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalkMsgBaseList_descriptor_,
      TalkMsgBaseList::default_instance_,
      TalkMsgBaseList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgBaseList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgBaseList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalkMsgBaseList));
  TalkMsgBaseList_TalkMsgBase_descriptor_ = TalkMsgBaseList_descriptor_->nested_type(0);
  static const int TalkMsgBaseList_TalkMsgBase_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgBaseList_TalkMsgBase, utalkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgBaseList_TalkMsgBase, umsgid_),
  };
  TalkMsgBaseList_TalkMsgBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalkMsgBaseList_TalkMsgBase_descriptor_,
      TalkMsgBaseList_TalkMsgBase::default_instance_,
      TalkMsgBaseList_TalkMsgBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgBaseList_TalkMsgBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgBaseList_TalkMsgBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalkMsgBaseList_TalkMsgBase));
  ChatMsgBaseList_descriptor_ = file->message_type(11);
  static const int ChatMsgBaseList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgBaseList, chatmsgbases_),
  };
  ChatMsgBaseList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatMsgBaseList_descriptor_,
      ChatMsgBaseList::default_instance_,
      ChatMsgBaseList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgBaseList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgBaseList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatMsgBaseList));
  ChatMsgBaseList_ChatMsgBase_descriptor_ = ChatMsgBaseList_descriptor_->nested_type(0);
  static const int ChatMsgBaseList_ChatMsgBase_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgBaseList_ChatMsgBase, uchatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgBaseList_ChatMsgBase, umsgid_),
  };
  ChatMsgBaseList_ChatMsgBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatMsgBaseList_ChatMsgBase_descriptor_,
      ChatMsgBaseList_ChatMsgBase::default_instance_,
      ChatMsgBaseList_ChatMsgBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgBaseList_ChatMsgBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgBaseList_ChatMsgBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatMsgBaseList_ChatMsgBase));
  UserMsgIDList_descriptor_ = file->message_type(12);
  static const int UserMsgIDList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMsgIDList, usermsgids_),
  };
  UserMsgIDList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserMsgIDList_descriptor_,
      UserMsgIDList::default_instance_,
      UserMsgIDList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMsgIDList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMsgIDList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserMsgIDList));
  UserMsgIDList_UserMsgID_descriptor_ = UserMsgIDList_descriptor_->nested_type(0);
  static const int UserMsgIDList_UserMsgID_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMsgIDList_UserMsgID, usendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMsgIDList_UserMsgID, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMsgIDList_UserMsgID, umsgid_),
  };
  UserMsgIDList_UserMsgID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserMsgIDList_UserMsgID_descriptor_,
      UserMsgIDList_UserMsgID::default_instance_,
      UserMsgIDList_UserMsgID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMsgIDList_UserMsgID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMsgIDList_UserMsgID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserMsgIDList_UserMsgID));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tms_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateServerReq_descriptor_, &StateServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfo_descriptor_, &ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerOut_descriptor_, &ServerOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfoList_descriptor_, &ServerInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargtServerID_descriptor_, &TargtServerID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargtServerIDList_descriptor_, &TargtServerIDList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetOnlineInfo_descriptor_, &TargetOnlineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginFlag_descriptor_, &UserLoginFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginFlagList_descriptor_, &UserLoginFlagList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserOnlineNotify_descriptor_, &UserOnlineNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalkMsgBaseList_descriptor_, &TalkMsgBaseList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalkMsgBaseList_TalkMsgBase_descriptor_, &TalkMsgBaseList_TalkMsgBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatMsgBaseList_descriptor_, &ChatMsgBaseList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatMsgBaseList_ChatMsgBase_descriptor_, &ChatMsgBaseList_ChatMsgBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserMsgIDList_descriptor_, &UserMsgIDList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserMsgIDList_UserMsgID_descriptor_, &UserMsgIDList_UserMsgID::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tms_2eproto() {
  delete StateServerReq::default_instance_;
  delete StateServerReq_reflection_;
  delete ServerInfo::default_instance_;
  delete ServerInfo_reflection_;
  delete ServerOut::default_instance_;
  delete ServerOut_reflection_;
  delete ServerInfoList::default_instance_;
  delete ServerInfoList_reflection_;
  delete TargtServerID::default_instance_;
  delete TargtServerID_reflection_;
  delete TargtServerIDList::default_instance_;
  delete TargtServerIDList_reflection_;
  delete TargetOnlineInfo::default_instance_;
  delete TargetOnlineInfo_reflection_;
  delete UserLoginFlag::default_instance_;
  delete UserLoginFlag_reflection_;
  delete UserLoginFlagList::default_instance_;
  delete UserLoginFlagList_reflection_;
  delete UserOnlineNotify::default_instance_;
  delete UserOnlineNotify_reflection_;
  delete TalkMsgBaseList::default_instance_;
  delete TalkMsgBaseList_reflection_;
  delete TalkMsgBaseList_TalkMsgBase::default_instance_;
  delete TalkMsgBaseList_TalkMsgBase_reflection_;
  delete ChatMsgBaseList::default_instance_;
  delete ChatMsgBaseList_reflection_;
  delete ChatMsgBaseList_ChatMsgBase::default_instance_;
  delete ChatMsgBaseList_ChatMsgBase_reflection_;
  delete UserMsgIDList::default_instance_;
  delete UserMsgIDList_reflection_;
  delete UserMsgIDList_UserMsgID::default_instance_;
  delete UserMsgIDList_UserMsgID_reflection_;
}

void protobuf_AddDesc_tms_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ttms.proto\022\003tms\"\263\001\n\016StateServerReq\022%\n\004n"
    "cmd\030\001 \002(\0162\027.tms.StateServerReq.cmd\"z\n\003cm"
    "d\022\020\n\014ChatMsgIDALL\020\001\022\020\n\014TalkMsgIDALL\020\002\022\020\n"
    "\014UserMsgIDALL\020\003\022\021\n\rTargetInfoALL\020\004\022\024\n\020Ta"
    "rgtServerIDALL\020\005\022\024\n\020UserLoginFlagALL\020\006\"J"
    "\n\nServerInfo\022\021\n\tuServerID\030\001 \002(\r\022\023\n\013strSe"
    "rverIP\030\002 \002(\t\022\024\n\014usServerPort\030\003 \002(\r\"\036\n\tSe"
    "rverOut\022\021\n\tuServerID\030\001 \002(\r\"6\n\016ServerInfo"
    "List\022$\n\013ServerInfos\030\001 \003(\0132\017.tms.ServerIn"
    "fo\";\n\rTargtServerID\022\024\n\tuTargetID\030\001 \002(\r:\001"
    "0\022\024\n\tuServerID\030\002 \002(\r:\0010\"\?\n\021TargtServerID"
    "List\022*\n\016TargtServerIDs\030\001 \003(\0132\022.tms.Targt"
    "ServerID\"@\n\020TargetOnlineInfo\022\025\n\nuAccount"
    "ID\030\001 \002(\r:\0010\022\025\n\nuSessionID\030\002 \002(\r:\0010\">\n\rUs"
    "erLoginFlag\022\025\n\nuAccountID\030\001 \002(\r:\0010\022\026\n\013uL"
    "oginFlags\030\002 \002(\r:\0010\"\?\n\021UserLoginFlagList\022"
    "*\n\016UserLoginFlags\030\001 \003(\0132\022.tms.UserLoginF"
    "lag\"V\n\020UserOnlineNotify\022\025\n\nuAccountID\030\001 "
    "\002(\r:\0010\022\024\n\tuServerID\030\002 \002(\r:\0010\022\025\n\nuLoginFl"
    "ag\030\003 \002(\r:\0010\"\177\n\017TalkMsgBaseList\0226\n\014TalkMs"
    "gBases\030\001 \003(\0132 .tms.TalkMsgBaseList.TalkM"
    "sgBase\0324\n\013TalkMsgBase\022\022\n\007uTalkID\030\001 \002(\004:\001"
    "0\022\021\n\006uMsgID\030\002 \002(\r:\0010\"\177\n\017ChatMsgBaseList\022"
    "6\n\014ChatMsgBases\030\001 \003(\0132 .tms.ChatMsgBaseL"
    "ist.ChatMsgBase\0324\n\013ChatMsgBase\022\022\n\007uChatI"
    "D\030\001 \002(\r:\0010\022\021\n\006uMsgID\030\002 \002(\r:\0010\"\213\001\n\rUserMs"
    "gIDList\0220\n\nUserMsgIDs\030\001 \003(\0132\034.tms.UserMs"
    "gIDList.UserMsgID\032H\n\tUserMsgID\022\022\n\007uSendI"
    "D\030\001 \002(\r:\0010\022\024\n\tuTargetID\030\002 \002(\r:\0010\022\021\n\006uMsg"
    "ID\030\003 \002(\r:\0010", 1171);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tms.proto", &protobuf_RegisterTypes);
  StateServerReq::default_instance_ = new StateServerReq();
  ServerInfo::default_instance_ = new ServerInfo();
  ServerOut::default_instance_ = new ServerOut();
  ServerInfoList::default_instance_ = new ServerInfoList();
  TargtServerID::default_instance_ = new TargtServerID();
  TargtServerIDList::default_instance_ = new TargtServerIDList();
  TargetOnlineInfo::default_instance_ = new TargetOnlineInfo();
  UserLoginFlag::default_instance_ = new UserLoginFlag();
  UserLoginFlagList::default_instance_ = new UserLoginFlagList();
  UserOnlineNotify::default_instance_ = new UserOnlineNotify();
  TalkMsgBaseList::default_instance_ = new TalkMsgBaseList();
  TalkMsgBaseList_TalkMsgBase::default_instance_ = new TalkMsgBaseList_TalkMsgBase();
  ChatMsgBaseList::default_instance_ = new ChatMsgBaseList();
  ChatMsgBaseList_ChatMsgBase::default_instance_ = new ChatMsgBaseList_ChatMsgBase();
  UserMsgIDList::default_instance_ = new UserMsgIDList();
  UserMsgIDList_UserMsgID::default_instance_ = new UserMsgIDList_UserMsgID();
  StateServerReq::default_instance_->InitAsDefaultInstance();
  ServerInfo::default_instance_->InitAsDefaultInstance();
  ServerOut::default_instance_->InitAsDefaultInstance();
  ServerInfoList::default_instance_->InitAsDefaultInstance();
  TargtServerID::default_instance_->InitAsDefaultInstance();
  TargtServerIDList::default_instance_->InitAsDefaultInstance();
  TargetOnlineInfo::default_instance_->InitAsDefaultInstance();
  UserLoginFlag::default_instance_->InitAsDefaultInstance();
  UserLoginFlagList::default_instance_->InitAsDefaultInstance();
  UserOnlineNotify::default_instance_->InitAsDefaultInstance();
  TalkMsgBaseList::default_instance_->InitAsDefaultInstance();
  TalkMsgBaseList_TalkMsgBase::default_instance_->InitAsDefaultInstance();
  ChatMsgBaseList::default_instance_->InitAsDefaultInstance();
  ChatMsgBaseList_ChatMsgBase::default_instance_->InitAsDefaultInstance();
  UserMsgIDList::default_instance_->InitAsDefaultInstance();
  UserMsgIDList_UserMsgID::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tms_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tms_2eproto {
  StaticDescriptorInitializer_tms_2eproto() {
    protobuf_AddDesc_tms_2eproto();
  }
} static_descriptor_initializer_tms_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* StateServerReq_cmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateServerReq_cmd_descriptor_;
}
bool StateServerReq_cmd_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StateServerReq_cmd StateServerReq::ChatMsgIDALL;
const StateServerReq_cmd StateServerReq::TalkMsgIDALL;
const StateServerReq_cmd StateServerReq::UserMsgIDALL;
const StateServerReq_cmd StateServerReq::TargetInfoALL;
const StateServerReq_cmd StateServerReq::TargtServerIDALL;
const StateServerReq_cmd StateServerReq::UserLoginFlagALL;
const StateServerReq_cmd StateServerReq::cmd_MIN;
const StateServerReq_cmd StateServerReq::cmd_MAX;
const int StateServerReq::cmd_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StateServerReq::kNcmdFieldNumber;
#endif  // !_MSC_VER

StateServerReq::StateServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StateServerReq::InitAsDefaultInstance() {
}

StateServerReq::StateServerReq(const StateServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StateServerReq::SharedCtor() {
  _cached_size_ = 0;
  ncmd_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateServerReq::~StateServerReq() {
  SharedDtor();
}

void StateServerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StateServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateServerReq_descriptor_;
}

const StateServerReq& StateServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

StateServerReq* StateServerReq::default_instance_ = NULL;

StateServerReq* StateServerReq::New() const {
  return new StateServerReq;
}

void StateServerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ncmd_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tms.StateServerReq.cmd ncmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tms::StateServerReq_cmd_IsValid(value)) {
            set_ncmd(static_cast< ::tms::StateServerReq_cmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StateServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .tms.StateServerReq.cmd ncmd = 1;
  if (has_ncmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ncmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StateServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .tms.StateServerReq.cmd ncmd = 1;
  if (has_ncmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ncmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StateServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tms.StateServerReq.cmd ncmd = 1;
    if (has_ncmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ncmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateServerReq::MergeFrom(const StateServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ncmd()) {
      set_ncmd(from.ncmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateServerReq::CopyFrom(const StateServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateServerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StateServerReq::Swap(StateServerReq* other) {
  if (other != this) {
    std::swap(ncmd_, other->ncmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateServerReq_descriptor_;
  metadata.reflection = StateServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfo::kUServerIDFieldNumber;
const int ServerInfo::kStrServerIPFieldNumber;
const int ServerInfo::kUsServerPortFieldNumber;
#endif  // !_MSC_VER

ServerInfo::ServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerInfo::InitAsDefaultInstance() {
}

ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  userverid_ = 0u;
  strserverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usserverport_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfo::~ServerInfo() {
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  if (strserverip_ != &::google::protobuf::internal::kEmptyString) {
    delete strserverip_;
  }
  if (this != default_instance_) {
  }
}

void ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfo_descriptor_;
}

const ServerInfo& ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

ServerInfo* ServerInfo::default_instance_ = NULL;

ServerInfo* ServerInfo::New() const {
  return new ServerInfo;
}

void ServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userverid_ = 0u;
    if (has_strserverip()) {
      if (strserverip_ != &::google::protobuf::internal::kEmptyString) {
        strserverip_->clear();
      }
    }
    usserverport_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uServerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userverid_)));
          set_has_userverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strServerIP;
        break;
      }

      // required string strServerIP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strServerIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strserverip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strserverip().data(), this->strserverip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usServerPort;
        break;
      }

      // required uint32 usServerPort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usServerPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usserverport_)));
          set_has_usserverport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uServerID = 1;
  if (has_userverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userverid(), output);
  }

  // required string strServerIP = 2;
  if (has_strserverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strserverip().data(), this->strserverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strserverip(), output);
  }

  // required uint32 usServerPort = 3;
  if (has_usserverport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usserverport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uServerID = 1;
  if (has_userverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userverid(), target);
  }

  // required string strServerIP = 2;
  if (has_strserverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strserverip().data(), this->strserverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strserverip(), target);
  }

  // required uint32 usServerPort = 3;
  if (has_usserverport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usserverport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uServerID = 1;
    if (has_userverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userverid());
    }

    // required string strServerIP = 2;
    if (has_strserverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strserverip());
    }

    // required uint32 usServerPort = 3;
    if (has_usserverport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usserverport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userverid()) {
      set_userverid(from.userverid());
    }
    if (from.has_strserverip()) {
      set_strserverip(from.strserverip());
    }
    if (from.has_usserverport()) {
      set_usserverport(from.usserverport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other != this) {
    std::swap(userverid_, other->userverid_);
    std::swap(strserverip_, other->strserverip_);
    std::swap(usserverport_, other->usserverport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfo_descriptor_;
  metadata.reflection = ServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerOut::kUServerIDFieldNumber;
#endif  // !_MSC_VER

ServerOut::ServerOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerOut::InitAsDefaultInstance() {
}

ServerOut::ServerOut(const ServerOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerOut::SharedCtor() {
  _cached_size_ = 0;
  userverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerOut::~ServerOut() {
  SharedDtor();
}

void ServerOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerOut_descriptor_;
}

const ServerOut& ServerOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

ServerOut* ServerOut::default_instance_ = NULL;

ServerOut* ServerOut::New() const {
  return new ServerOut;
}

void ServerOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uServerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userverid_)));
          set_has_userverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uServerID = 1;
  if (has_userverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uServerID = 1;
  if (has_userverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uServerID = 1;
    if (has_userverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerOut::MergeFrom(const ServerOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userverid()) {
      set_userverid(from.userverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerOut::CopyFrom(const ServerOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerOut::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerOut::Swap(ServerOut* other) {
  if (other != this) {
    std::swap(userverid_, other->userverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerOut_descriptor_;
  metadata.reflection = ServerOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfoList::kServerInfosFieldNumber;
#endif  // !_MSC_VER

ServerInfoList::ServerInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerInfoList::InitAsDefaultInstance() {
}

ServerInfoList::ServerInfoList(const ServerInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfoList::~ServerInfoList() {
  SharedDtor();
}

void ServerInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfoList_descriptor_;
}

const ServerInfoList& ServerInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

ServerInfoList* ServerInfoList::default_instance_ = NULL;

ServerInfoList* ServerInfoList::New() const {
  return new ServerInfoList;
}

void ServerInfoList::Clear() {
  serverinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.ServerInfo ServerInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServerInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serverinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ServerInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.ServerInfo ServerInfos = 1;
  for (int i = 0; i < this->serverinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->serverinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.ServerInfo ServerInfos = 1;
  for (int i = 0; i < this->serverinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->serverinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfoList::ByteSize() const {
  int total_size = 0;

  // repeated .tms.ServerInfo ServerInfos = 1;
  total_size += 1 * this->serverinfos_size();
  for (int i = 0; i < this->serverinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serverinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfoList::MergeFrom(const ServerInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  serverinfos_.MergeFrom(from.serverinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfoList::CopyFrom(const ServerInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoList::IsInitialized() const {

  for (int i = 0; i < serverinfos_size(); i++) {
    if (!this->serverinfos(i).IsInitialized()) return false;
  }
  return true;
}

void ServerInfoList::Swap(ServerInfoList* other) {
  if (other != this) {
    serverinfos_.Swap(&other->serverinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfoList_descriptor_;
  metadata.reflection = ServerInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargtServerID::kUTargetIDFieldNumber;
const int TargtServerID::kUServerIDFieldNumber;
#endif  // !_MSC_VER

TargtServerID::TargtServerID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargtServerID::InitAsDefaultInstance() {
}

TargtServerID::TargtServerID(const TargtServerID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargtServerID::SharedCtor() {
  _cached_size_ = 0;
  utargetid_ = 0u;
  userverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargtServerID::~TargtServerID() {
  SharedDtor();
}

void TargtServerID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TargtServerID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargtServerID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargtServerID_descriptor_;
}

const TargtServerID& TargtServerID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

TargtServerID* TargtServerID::default_instance_ = NULL;

TargtServerID* TargtServerID::New() const {
  return new TargtServerID;
}

void TargtServerID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utargetid_ = 0u;
    userverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargtServerID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uTargetID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uServerID;
        break;
      }

      // required uint32 uServerID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userverid_)));
          set_has_userverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargtServerID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->utargetid(), output);
  }

  // required uint32 uServerID = 2 [default = 0];
  if (has_userverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargtServerID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->utargetid(), target);
  }

  // required uint32 uServerID = 2 [default = 0];
  if (has_userverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargtServerID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uTargetID = 1 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // required uint32 uServerID = 2 [default = 0];
    if (has_userverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargtServerID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargtServerID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargtServerID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargtServerID::MergeFrom(const TargtServerID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_userverid()) {
      set_userverid(from.userverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargtServerID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargtServerID::CopyFrom(const TargtServerID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargtServerID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TargtServerID::Swap(TargtServerID* other) {
  if (other != this) {
    std::swap(utargetid_, other->utargetid_);
    std::swap(userverid_, other->userverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargtServerID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargtServerID_descriptor_;
  metadata.reflection = TargtServerID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargtServerIDList::kTargtServerIDsFieldNumber;
#endif  // !_MSC_VER

TargtServerIDList::TargtServerIDList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargtServerIDList::InitAsDefaultInstance() {
}

TargtServerIDList::TargtServerIDList(const TargtServerIDList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargtServerIDList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargtServerIDList::~TargtServerIDList() {
  SharedDtor();
}

void TargtServerIDList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TargtServerIDList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargtServerIDList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargtServerIDList_descriptor_;
}

const TargtServerIDList& TargtServerIDList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

TargtServerIDList* TargtServerIDList::default_instance_ = NULL;

TargtServerIDList* TargtServerIDList::New() const {
  return new TargtServerIDList;
}

void TargtServerIDList::Clear() {
  targtserverids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargtServerIDList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.TargtServerID TargtServerIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TargtServerIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targtserverids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_TargtServerIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargtServerIDList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.TargtServerID TargtServerIDs = 1;
  for (int i = 0; i < this->targtserverids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->targtserverids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargtServerIDList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.TargtServerID TargtServerIDs = 1;
  for (int i = 0; i < this->targtserverids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->targtserverids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargtServerIDList::ByteSize() const {
  int total_size = 0;

  // repeated .tms.TargtServerID TargtServerIDs = 1;
  total_size += 1 * this->targtserverids_size();
  for (int i = 0; i < this->targtserverids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targtserverids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargtServerIDList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargtServerIDList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargtServerIDList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargtServerIDList::MergeFrom(const TargtServerIDList& from) {
  GOOGLE_CHECK_NE(&from, this);
  targtserverids_.MergeFrom(from.targtserverids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargtServerIDList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargtServerIDList::CopyFrom(const TargtServerIDList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargtServerIDList::IsInitialized() const {

  for (int i = 0; i < targtserverids_size(); i++) {
    if (!this->targtserverids(i).IsInitialized()) return false;
  }
  return true;
}

void TargtServerIDList::Swap(TargtServerIDList* other) {
  if (other != this) {
    targtserverids_.Swap(&other->targtserverids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargtServerIDList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargtServerIDList_descriptor_;
  metadata.reflection = TargtServerIDList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargetOnlineInfo::kUAccountIDFieldNumber;
const int TargetOnlineInfo::kUSessionIDFieldNumber;
#endif  // !_MSC_VER

TargetOnlineInfo::TargetOnlineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargetOnlineInfo::InitAsDefaultInstance() {
}

TargetOnlineInfo::TargetOnlineInfo(const TargetOnlineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargetOnlineInfo::SharedCtor() {
  _cached_size_ = 0;
  uaccountid_ = 0u;
  usessionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetOnlineInfo::~TargetOnlineInfo() {
  SharedDtor();
}

void TargetOnlineInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TargetOnlineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetOnlineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetOnlineInfo_descriptor_;
}

const TargetOnlineInfo& TargetOnlineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

TargetOnlineInfo* TargetOnlineInfo::default_instance_ = NULL;

TargetOnlineInfo* TargetOnlineInfo::New() const {
  return new TargetOnlineInfo;
}

void TargetOnlineInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uaccountid_ = 0u;
    usessionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargetOnlineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uAccountID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uaccountid_)));
          set_has_uaccountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uSessionID;
        break;
      }

      // required uint32 uSessionID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uSessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usessionid_)));
          set_has_usessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargetOnlineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uAccountID = 1 [default = 0];
  if (has_uaccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uaccountid(), output);
  }

  // required uint32 uSessionID = 2 [default = 0];
  if (has_usessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargetOnlineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uAccountID = 1 [default = 0];
  if (has_uaccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uaccountid(), target);
  }

  // required uint32 uSessionID = 2 [default = 0];
  if (has_usessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargetOnlineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uAccountID = 1 [default = 0];
    if (has_uaccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uaccountid());
    }

    // required uint32 uSessionID = 2 [default = 0];
    if (has_usessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usessionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetOnlineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetOnlineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetOnlineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargetOnlineInfo::MergeFrom(const TargetOnlineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uaccountid()) {
      set_uaccountid(from.uaccountid());
    }
    if (from.has_usessionid()) {
      set_usessionid(from.usessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargetOnlineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetOnlineInfo::CopyFrom(const TargetOnlineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetOnlineInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TargetOnlineInfo::Swap(TargetOnlineInfo* other) {
  if (other != this) {
    std::swap(uaccountid_, other->uaccountid_);
    std::swap(usessionid_, other->usessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargetOnlineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetOnlineInfo_descriptor_;
  metadata.reflection = TargetOnlineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLoginFlag::kUAccountIDFieldNumber;
const int UserLoginFlag::kULoginFlagsFieldNumber;
#endif  // !_MSC_VER

UserLoginFlag::UserLoginFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserLoginFlag::InitAsDefaultInstance() {
}

UserLoginFlag::UserLoginFlag(const UserLoginFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginFlag::SharedCtor() {
  _cached_size_ = 0;
  uaccountid_ = 0u;
  uloginflags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginFlag::~UserLoginFlag() {
  SharedDtor();
}

void UserLoginFlag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserLoginFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginFlag_descriptor_;
}

const UserLoginFlag& UserLoginFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

UserLoginFlag* UserLoginFlag::default_instance_ = NULL;

UserLoginFlag* UserLoginFlag::New() const {
  return new UserLoginFlag;
}

void UserLoginFlag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uaccountid_ = 0u;
    uloginflags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uAccountID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uaccountid_)));
          set_has_uaccountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uLoginFlags;
        break;
      }

      // required uint32 uLoginFlags = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uLoginFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uloginflags_)));
          set_has_uloginflags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uAccountID = 1 [default = 0];
  if (has_uaccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uaccountid(), output);
  }

  // required uint32 uLoginFlags = 2 [default = 0];
  if (has_uloginflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uloginflags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLoginFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uAccountID = 1 [default = 0];
  if (has_uaccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uaccountid(), target);
  }

  // required uint32 uLoginFlags = 2 [default = 0];
  if (has_uloginflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uloginflags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLoginFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uAccountID = 1 [default = 0];
    if (has_uaccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uaccountid());
    }

    // required uint32 uLoginFlags = 2 [default = 0];
    if (has_uloginflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uloginflags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginFlag::MergeFrom(const UserLoginFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uaccountid()) {
      set_uaccountid(from.uaccountid());
    }
    if (from.has_uloginflags()) {
      set_uloginflags(from.uloginflags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginFlag::CopyFrom(const UserLoginFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginFlag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserLoginFlag::Swap(UserLoginFlag* other) {
  if (other != this) {
    std::swap(uaccountid_, other->uaccountid_);
    std::swap(uloginflags_, other->uloginflags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginFlag_descriptor_;
  metadata.reflection = UserLoginFlag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLoginFlagList::kUserLoginFlagsFieldNumber;
#endif  // !_MSC_VER

UserLoginFlagList::UserLoginFlagList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserLoginFlagList::InitAsDefaultInstance() {
}

UserLoginFlagList::UserLoginFlagList(const UserLoginFlagList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginFlagList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginFlagList::~UserLoginFlagList() {
  SharedDtor();
}

void UserLoginFlagList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserLoginFlagList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginFlagList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginFlagList_descriptor_;
}

const UserLoginFlagList& UserLoginFlagList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

UserLoginFlagList* UserLoginFlagList::default_instance_ = NULL;

UserLoginFlagList* UserLoginFlagList::New() const {
  return new UserLoginFlagList;
}

void UserLoginFlagList::Clear() {
  userloginflags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginFlagList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.UserLoginFlag UserLoginFlags = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserLoginFlags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userloginflags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_UserLoginFlags;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginFlagList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.UserLoginFlag UserLoginFlags = 1;
  for (int i = 0; i < this->userloginflags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userloginflags(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLoginFlagList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.UserLoginFlag UserLoginFlags = 1;
  for (int i = 0; i < this->userloginflags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userloginflags(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLoginFlagList::ByteSize() const {
  int total_size = 0;

  // repeated .tms.UserLoginFlag UserLoginFlags = 1;
  total_size += 1 * this->userloginflags_size();
  for (int i = 0; i < this->userloginflags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userloginflags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginFlagList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginFlagList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginFlagList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginFlagList::MergeFrom(const UserLoginFlagList& from) {
  GOOGLE_CHECK_NE(&from, this);
  userloginflags_.MergeFrom(from.userloginflags_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginFlagList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginFlagList::CopyFrom(const UserLoginFlagList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginFlagList::IsInitialized() const {

  for (int i = 0; i < userloginflags_size(); i++) {
    if (!this->userloginflags(i).IsInitialized()) return false;
  }
  return true;
}

void UserLoginFlagList::Swap(UserLoginFlagList* other) {
  if (other != this) {
    userloginflags_.Swap(&other->userloginflags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginFlagList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginFlagList_descriptor_;
  metadata.reflection = UserLoginFlagList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserOnlineNotify::kUAccountIDFieldNumber;
const int UserOnlineNotify::kUServerIDFieldNumber;
const int UserOnlineNotify::kULoginFlagFieldNumber;
#endif  // !_MSC_VER

UserOnlineNotify::UserOnlineNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserOnlineNotify::InitAsDefaultInstance() {
}

UserOnlineNotify::UserOnlineNotify(const UserOnlineNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserOnlineNotify::SharedCtor() {
  _cached_size_ = 0;
  uaccountid_ = 0u;
  userverid_ = 0u;
  uloginflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserOnlineNotify::~UserOnlineNotify() {
  SharedDtor();
}

void UserOnlineNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserOnlineNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserOnlineNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserOnlineNotify_descriptor_;
}

const UserOnlineNotify& UserOnlineNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

UserOnlineNotify* UserOnlineNotify::default_instance_ = NULL;

UserOnlineNotify* UserOnlineNotify::New() const {
  return new UserOnlineNotify;
}

void UserOnlineNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uaccountid_ = 0u;
    userverid_ = 0u;
    uloginflag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserOnlineNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uAccountID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uaccountid_)));
          set_has_uaccountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uServerID;
        break;
      }

      // required uint32 uServerID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userverid_)));
          set_has_userverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uLoginFlag;
        break;
      }

      // required uint32 uLoginFlag = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uLoginFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uloginflag_)));
          set_has_uloginflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserOnlineNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uAccountID = 1 [default = 0];
  if (has_uaccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uaccountid(), output);
  }

  // required uint32 uServerID = 2 [default = 0];
  if (has_userverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userverid(), output);
  }

  // required uint32 uLoginFlag = 3 [default = 0];
  if (has_uloginflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uloginflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserOnlineNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uAccountID = 1 [default = 0];
  if (has_uaccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uaccountid(), target);
  }

  // required uint32 uServerID = 2 [default = 0];
  if (has_userverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userverid(), target);
  }

  // required uint32 uLoginFlag = 3 [default = 0];
  if (has_uloginflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uloginflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserOnlineNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uAccountID = 1 [default = 0];
    if (has_uaccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uaccountid());
    }

    // required uint32 uServerID = 2 [default = 0];
    if (has_userverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userverid());
    }

    // required uint32 uLoginFlag = 3 [default = 0];
    if (has_uloginflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uloginflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserOnlineNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserOnlineNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserOnlineNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserOnlineNotify::MergeFrom(const UserOnlineNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uaccountid()) {
      set_uaccountid(from.uaccountid());
    }
    if (from.has_userverid()) {
      set_userverid(from.userverid());
    }
    if (from.has_uloginflag()) {
      set_uloginflag(from.uloginflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserOnlineNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserOnlineNotify::CopyFrom(const UserOnlineNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOnlineNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserOnlineNotify::Swap(UserOnlineNotify* other) {
  if (other != this) {
    std::swap(uaccountid_, other->uaccountid_);
    std::swap(userverid_, other->userverid_);
    std::swap(uloginflag_, other->uloginflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserOnlineNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserOnlineNotify_descriptor_;
  metadata.reflection = UserOnlineNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalkMsgBaseList_TalkMsgBase::kUTalkIDFieldNumber;
const int TalkMsgBaseList_TalkMsgBase::kUMsgIDFieldNumber;
#endif  // !_MSC_VER

TalkMsgBaseList_TalkMsgBase::TalkMsgBaseList_TalkMsgBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalkMsgBaseList_TalkMsgBase::InitAsDefaultInstance() {
}

TalkMsgBaseList_TalkMsgBase::TalkMsgBaseList_TalkMsgBase(const TalkMsgBaseList_TalkMsgBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalkMsgBaseList_TalkMsgBase::SharedCtor() {
  _cached_size_ = 0;
  utalkid_ = GOOGLE_ULONGLONG(0);
  umsgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalkMsgBaseList_TalkMsgBase::~TalkMsgBaseList_TalkMsgBase() {
  SharedDtor();
}

void TalkMsgBaseList_TalkMsgBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TalkMsgBaseList_TalkMsgBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkMsgBaseList_TalkMsgBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalkMsgBaseList_TalkMsgBase_descriptor_;
}

const TalkMsgBaseList_TalkMsgBase& TalkMsgBaseList_TalkMsgBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

TalkMsgBaseList_TalkMsgBase* TalkMsgBaseList_TalkMsgBase::default_instance_ = NULL;

TalkMsgBaseList_TalkMsgBase* TalkMsgBaseList_TalkMsgBase::New() const {
  return new TalkMsgBaseList_TalkMsgBase;
}

void TalkMsgBaseList_TalkMsgBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utalkid_ = GOOGLE_ULONGLONG(0);
    umsgid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalkMsgBaseList_TalkMsgBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uTalkID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utalkid_)));
          set_has_utalkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uMsgID;
        break;
      }

      // required uint32 uMsgID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uMsgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &umsgid_)));
          set_has_umsgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalkMsgBaseList_TalkMsgBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uTalkID = 1 [default = 0];
  if (has_utalkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->utalkid(), output);
  }

  // required uint32 uMsgID = 2 [default = 0];
  if (has_umsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->umsgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalkMsgBaseList_TalkMsgBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uTalkID = 1 [default = 0];
  if (has_utalkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->utalkid(), target);
  }

  // required uint32 uMsgID = 2 [default = 0];
  if (has_umsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->umsgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalkMsgBaseList_TalkMsgBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uTalkID = 1 [default = 0];
    if (has_utalkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utalkid());
    }

    // required uint32 uMsgID = 2 [default = 0];
    if (has_umsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->umsgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkMsgBaseList_TalkMsgBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalkMsgBaseList_TalkMsgBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalkMsgBaseList_TalkMsgBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalkMsgBaseList_TalkMsgBase::MergeFrom(const TalkMsgBaseList_TalkMsgBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utalkid()) {
      set_utalkid(from.utalkid());
    }
    if (from.has_umsgid()) {
      set_umsgid(from.umsgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalkMsgBaseList_TalkMsgBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkMsgBaseList_TalkMsgBase::CopyFrom(const TalkMsgBaseList_TalkMsgBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkMsgBaseList_TalkMsgBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TalkMsgBaseList_TalkMsgBase::Swap(TalkMsgBaseList_TalkMsgBase* other) {
  if (other != this) {
    std::swap(utalkid_, other->utalkid_);
    std::swap(umsgid_, other->umsgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalkMsgBaseList_TalkMsgBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalkMsgBaseList_TalkMsgBase_descriptor_;
  metadata.reflection = TalkMsgBaseList_TalkMsgBase_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TalkMsgBaseList::kTalkMsgBasesFieldNumber;
#endif  // !_MSC_VER

TalkMsgBaseList::TalkMsgBaseList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalkMsgBaseList::InitAsDefaultInstance() {
}

TalkMsgBaseList::TalkMsgBaseList(const TalkMsgBaseList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalkMsgBaseList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalkMsgBaseList::~TalkMsgBaseList() {
  SharedDtor();
}

void TalkMsgBaseList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TalkMsgBaseList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkMsgBaseList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalkMsgBaseList_descriptor_;
}

const TalkMsgBaseList& TalkMsgBaseList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

TalkMsgBaseList* TalkMsgBaseList::default_instance_ = NULL;

TalkMsgBaseList* TalkMsgBaseList::New() const {
  return new TalkMsgBaseList;
}

void TalkMsgBaseList::Clear() {
  talkmsgbases_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalkMsgBaseList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.TalkMsgBaseList.TalkMsgBase TalkMsgBases = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TalkMsgBases:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_talkmsgbases()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_TalkMsgBases;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalkMsgBaseList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.TalkMsgBaseList.TalkMsgBase TalkMsgBases = 1;
  for (int i = 0; i < this->talkmsgbases_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->talkmsgbases(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalkMsgBaseList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.TalkMsgBaseList.TalkMsgBase TalkMsgBases = 1;
  for (int i = 0; i < this->talkmsgbases_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->talkmsgbases(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalkMsgBaseList::ByteSize() const {
  int total_size = 0;

  // repeated .tms.TalkMsgBaseList.TalkMsgBase TalkMsgBases = 1;
  total_size += 1 * this->talkmsgbases_size();
  for (int i = 0; i < this->talkmsgbases_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->talkmsgbases(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkMsgBaseList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalkMsgBaseList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalkMsgBaseList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalkMsgBaseList::MergeFrom(const TalkMsgBaseList& from) {
  GOOGLE_CHECK_NE(&from, this);
  talkmsgbases_.MergeFrom(from.talkmsgbases_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalkMsgBaseList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkMsgBaseList::CopyFrom(const TalkMsgBaseList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkMsgBaseList::IsInitialized() const {

  for (int i = 0; i < talkmsgbases_size(); i++) {
    if (!this->talkmsgbases(i).IsInitialized()) return false;
  }
  return true;
}

void TalkMsgBaseList::Swap(TalkMsgBaseList* other) {
  if (other != this) {
    talkmsgbases_.Swap(&other->talkmsgbases_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalkMsgBaseList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalkMsgBaseList_descriptor_;
  metadata.reflection = TalkMsgBaseList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatMsgBaseList_ChatMsgBase::kUChatIDFieldNumber;
const int ChatMsgBaseList_ChatMsgBase::kUMsgIDFieldNumber;
#endif  // !_MSC_VER

ChatMsgBaseList_ChatMsgBase::ChatMsgBaseList_ChatMsgBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatMsgBaseList_ChatMsgBase::InitAsDefaultInstance() {
}

ChatMsgBaseList_ChatMsgBase::ChatMsgBaseList_ChatMsgBase(const ChatMsgBaseList_ChatMsgBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatMsgBaseList_ChatMsgBase::SharedCtor() {
  _cached_size_ = 0;
  uchatid_ = 0u;
  umsgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMsgBaseList_ChatMsgBase::~ChatMsgBaseList_ChatMsgBase() {
  SharedDtor();
}

void ChatMsgBaseList_ChatMsgBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatMsgBaseList_ChatMsgBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMsgBaseList_ChatMsgBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMsgBaseList_ChatMsgBase_descriptor_;
}

const ChatMsgBaseList_ChatMsgBase& ChatMsgBaseList_ChatMsgBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

ChatMsgBaseList_ChatMsgBase* ChatMsgBaseList_ChatMsgBase::default_instance_ = NULL;

ChatMsgBaseList_ChatMsgBase* ChatMsgBaseList_ChatMsgBase::New() const {
  return new ChatMsgBaseList_ChatMsgBase;
}

void ChatMsgBaseList_ChatMsgBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uchatid_ = 0u;
    umsgid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatMsgBaseList_ChatMsgBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uChatID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uchatid_)));
          set_has_uchatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uMsgID;
        break;
      }

      // required uint32 uMsgID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uMsgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &umsgid_)));
          set_has_umsgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatMsgBaseList_ChatMsgBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uChatID = 1 [default = 0];
  if (has_uchatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uchatid(), output);
  }

  // required uint32 uMsgID = 2 [default = 0];
  if (has_umsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->umsgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatMsgBaseList_ChatMsgBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uChatID = 1 [default = 0];
  if (has_uchatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uchatid(), target);
  }

  // required uint32 uMsgID = 2 [default = 0];
  if (has_umsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->umsgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatMsgBaseList_ChatMsgBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uChatID = 1 [default = 0];
    if (has_uchatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uchatid());
    }

    // required uint32 uMsgID = 2 [default = 0];
    if (has_umsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->umsgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMsgBaseList_ChatMsgBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatMsgBaseList_ChatMsgBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatMsgBaseList_ChatMsgBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatMsgBaseList_ChatMsgBase::MergeFrom(const ChatMsgBaseList_ChatMsgBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uchatid()) {
      set_uchatid(from.uchatid());
    }
    if (from.has_umsgid()) {
      set_umsgid(from.umsgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatMsgBaseList_ChatMsgBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMsgBaseList_ChatMsgBase::CopyFrom(const ChatMsgBaseList_ChatMsgBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMsgBaseList_ChatMsgBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChatMsgBaseList_ChatMsgBase::Swap(ChatMsgBaseList_ChatMsgBase* other) {
  if (other != this) {
    std::swap(uchatid_, other->uchatid_);
    std::swap(umsgid_, other->umsgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatMsgBaseList_ChatMsgBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMsgBaseList_ChatMsgBase_descriptor_;
  metadata.reflection = ChatMsgBaseList_ChatMsgBase_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ChatMsgBaseList::kChatMsgBasesFieldNumber;
#endif  // !_MSC_VER

ChatMsgBaseList::ChatMsgBaseList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatMsgBaseList::InitAsDefaultInstance() {
}

ChatMsgBaseList::ChatMsgBaseList(const ChatMsgBaseList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatMsgBaseList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMsgBaseList::~ChatMsgBaseList() {
  SharedDtor();
}

void ChatMsgBaseList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatMsgBaseList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMsgBaseList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMsgBaseList_descriptor_;
}

const ChatMsgBaseList& ChatMsgBaseList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

ChatMsgBaseList* ChatMsgBaseList::default_instance_ = NULL;

ChatMsgBaseList* ChatMsgBaseList::New() const {
  return new ChatMsgBaseList;
}

void ChatMsgBaseList::Clear() {
  chatmsgbases_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatMsgBaseList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.ChatMsgBaseList.ChatMsgBase ChatMsgBases = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChatMsgBases:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chatmsgbases()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ChatMsgBases;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatMsgBaseList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.ChatMsgBaseList.ChatMsgBase ChatMsgBases = 1;
  for (int i = 0; i < this->chatmsgbases_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chatmsgbases(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatMsgBaseList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.ChatMsgBaseList.ChatMsgBase ChatMsgBases = 1;
  for (int i = 0; i < this->chatmsgbases_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chatmsgbases(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatMsgBaseList::ByteSize() const {
  int total_size = 0;

  // repeated .tms.ChatMsgBaseList.ChatMsgBase ChatMsgBases = 1;
  total_size += 1 * this->chatmsgbases_size();
  for (int i = 0; i < this->chatmsgbases_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chatmsgbases(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMsgBaseList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatMsgBaseList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatMsgBaseList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatMsgBaseList::MergeFrom(const ChatMsgBaseList& from) {
  GOOGLE_CHECK_NE(&from, this);
  chatmsgbases_.MergeFrom(from.chatmsgbases_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatMsgBaseList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMsgBaseList::CopyFrom(const ChatMsgBaseList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMsgBaseList::IsInitialized() const {

  for (int i = 0; i < chatmsgbases_size(); i++) {
    if (!this->chatmsgbases(i).IsInitialized()) return false;
  }
  return true;
}

void ChatMsgBaseList::Swap(ChatMsgBaseList* other) {
  if (other != this) {
    chatmsgbases_.Swap(&other->chatmsgbases_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatMsgBaseList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMsgBaseList_descriptor_;
  metadata.reflection = ChatMsgBaseList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserMsgIDList_UserMsgID::kUSendIDFieldNumber;
const int UserMsgIDList_UserMsgID::kUTargetIDFieldNumber;
const int UserMsgIDList_UserMsgID::kUMsgIDFieldNumber;
#endif  // !_MSC_VER

UserMsgIDList_UserMsgID::UserMsgIDList_UserMsgID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserMsgIDList_UserMsgID::InitAsDefaultInstance() {
}

UserMsgIDList_UserMsgID::UserMsgIDList_UserMsgID(const UserMsgIDList_UserMsgID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserMsgIDList_UserMsgID::SharedCtor() {
  _cached_size_ = 0;
  usendid_ = 0u;
  utargetid_ = 0u;
  umsgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserMsgIDList_UserMsgID::~UserMsgIDList_UserMsgID() {
  SharedDtor();
}

void UserMsgIDList_UserMsgID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserMsgIDList_UserMsgID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserMsgIDList_UserMsgID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserMsgIDList_UserMsgID_descriptor_;
}

const UserMsgIDList_UserMsgID& UserMsgIDList_UserMsgID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

UserMsgIDList_UserMsgID* UserMsgIDList_UserMsgID::default_instance_ = NULL;

UserMsgIDList_UserMsgID* UserMsgIDList_UserMsgID::New() const {
  return new UserMsgIDList_UserMsgID;
}

void UserMsgIDList_UserMsgID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usendid_ = 0u;
    utargetid_ = 0u;
    umsgid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserMsgIDList_UserMsgID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uSendID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usendid_)));
          set_has_usendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uTargetID;
        break;
      }

      // required uint32 uTargetID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uTargetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uMsgID;
        break;
      }

      // required uint32 uMsgID = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uMsgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &umsgid_)));
          set_has_umsgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserMsgIDList_UserMsgID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uSendID = 1 [default = 0];
  if (has_usendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->usendid(), output);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->utargetid(), output);
  }

  // required uint32 uMsgID = 3 [default = 0];
  if (has_umsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->umsgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserMsgIDList_UserMsgID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uSendID = 1 [default = 0];
  if (has_usendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->usendid(), target);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->utargetid(), target);
  }

  // required uint32 uMsgID = 3 [default = 0];
  if (has_umsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->umsgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserMsgIDList_UserMsgID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uSendID = 1 [default = 0];
    if (has_usendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usendid());
    }

    // required uint32 uTargetID = 2 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // required uint32 uMsgID = 3 [default = 0];
    if (has_umsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->umsgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMsgIDList_UserMsgID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserMsgIDList_UserMsgID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserMsgIDList_UserMsgID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserMsgIDList_UserMsgID::MergeFrom(const UserMsgIDList_UserMsgID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usendid()) {
      set_usendid(from.usendid());
    }
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_umsgid()) {
      set_umsgid(from.umsgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserMsgIDList_UserMsgID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMsgIDList_UserMsgID::CopyFrom(const UserMsgIDList_UserMsgID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMsgIDList_UserMsgID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserMsgIDList_UserMsgID::Swap(UserMsgIDList_UserMsgID* other) {
  if (other != this) {
    std::swap(usendid_, other->usendid_);
    std::swap(utargetid_, other->utargetid_);
    std::swap(umsgid_, other->umsgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserMsgIDList_UserMsgID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserMsgIDList_UserMsgID_descriptor_;
  metadata.reflection = UserMsgIDList_UserMsgID_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserMsgIDList::kUserMsgIDsFieldNumber;
#endif  // !_MSC_VER

UserMsgIDList::UserMsgIDList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserMsgIDList::InitAsDefaultInstance() {
}

UserMsgIDList::UserMsgIDList(const UserMsgIDList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserMsgIDList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserMsgIDList::~UserMsgIDList() {
  SharedDtor();
}

void UserMsgIDList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserMsgIDList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserMsgIDList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserMsgIDList_descriptor_;
}

const UserMsgIDList& UserMsgIDList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

UserMsgIDList* UserMsgIDList::default_instance_ = NULL;

UserMsgIDList* UserMsgIDList::New() const {
  return new UserMsgIDList;
}

void UserMsgIDList::Clear() {
  usermsgids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserMsgIDList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.UserMsgIDList.UserMsgID UserMsgIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserMsgIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usermsgids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_UserMsgIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserMsgIDList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.UserMsgIDList.UserMsgID UserMsgIDs = 1;
  for (int i = 0; i < this->usermsgids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->usermsgids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserMsgIDList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.UserMsgIDList.UserMsgID UserMsgIDs = 1;
  for (int i = 0; i < this->usermsgids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->usermsgids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserMsgIDList::ByteSize() const {
  int total_size = 0;

  // repeated .tms.UserMsgIDList.UserMsgID UserMsgIDs = 1;
  total_size += 1 * this->usermsgids_size();
  for (int i = 0; i < this->usermsgids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usermsgids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMsgIDList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserMsgIDList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserMsgIDList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserMsgIDList::MergeFrom(const UserMsgIDList& from) {
  GOOGLE_CHECK_NE(&from, this);
  usermsgids_.MergeFrom(from.usermsgids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserMsgIDList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMsgIDList::CopyFrom(const UserMsgIDList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMsgIDList::IsInitialized() const {

  for (int i = 0; i < usermsgids_size(); i++) {
    if (!this->usermsgids(i).IsInitialized()) return false;
  }
  return true;
}

void UserMsgIDList::Swap(UserMsgIDList* other) {
  if (other != this) {
    usermsgids_.Swap(&other->usermsgids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserMsgIDList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserMsgIDList_descriptor_;
  metadata.reflection = UserMsgIDList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tms

// @@protoc_insertion_point(global_scope)
