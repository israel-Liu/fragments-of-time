// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tms {

namespace {

const ::google::protobuf::Descriptor* AnsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Targets_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Targets_reflection_ = NULL;
const ::google::protobuf::Descriptor* UTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Member_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrivateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrivateInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OnlineState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TargetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* cmd_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_2eproto() {
  protobuf_AddDesc_base_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base.proto");
  GOOGLE_CHECK(file != NULL);
  AnsInfo_descriptor_ = file->message_type(0);
  static const int AnsInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnsInfo, uerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnsInfo, tcmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnsInfo, straccountno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnsInfo, uaccountid_),
  };
  AnsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnsInfo_descriptor_,
      AnsInfo::default_instance_,
      AnsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnsInfo));
  TargetInfo_descriptor_ = file->message_type(1);
  static const int TargetInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfo, straccountno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfo, strnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfo, nface_),
  };
  TargetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetInfo_descriptor_,
      TargetInfo::default_instance_,
      TargetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetInfo));
  Targets_descriptor_ = file->message_type(2);
  static const int Targets_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Targets, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Targets, targetinfos_),
  };
  Targets_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Targets_descriptor_,
      Targets::default_instance_,
      Targets_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Targets, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Targets, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Targets));
  UTarget_descriptor_ = file->message_type(3);
  static const int UTarget_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTarget, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTarget, uright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTarget, selfparam_),
  };
  UTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UTarget_descriptor_,
      UTarget::default_instance_,
      UTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UTarget));
  MemberInfo_descriptor_ = file->message_type(4);
  static const int MemberInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberInfo, uright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberInfo, selfparam_),
  };
  MemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberInfo_descriptor_,
      MemberInfo::default_instance_,
      MemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberInfo));
  Member_descriptor_ = file->message_type(5);
  static const int Member_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, memberinfos_),
  };
  Member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Member_descriptor_,
      Member::default_instance_,
      Member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Member));
  MemberList_descriptor_ = file->message_type(6);
  static const int MemberList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberList, uversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberList, members_),
  };
  MemberList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberList_descriptor_,
      MemberList::default_instance_,
      MemberList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberList));
  PrivateInfo_descriptor_ = file->message_type(7);
  static const int PrivateInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateInfo, selfparam_),
  };
  PrivateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrivateInfo_descriptor_,
      PrivateInfo::default_instance_,
      PrivateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrivateInfo));
  OnlineState_descriptor_ = file->enum_type(0);
  TargetType_descriptor_ = file->enum_type(1);
  cmd_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnsInfo_descriptor_, &AnsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetInfo_descriptor_, &TargetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Targets_descriptor_, &Targets::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UTarget_descriptor_, &UTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberInfo_descriptor_, &MemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Member_descriptor_, &Member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberList_descriptor_, &MemberList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrivateInfo_descriptor_, &PrivateInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_2eproto() {
  delete AnsInfo::default_instance_;
  delete AnsInfo_reflection_;
  delete TargetInfo::default_instance_;
  delete TargetInfo_reflection_;
  delete Targets::default_instance_;
  delete Targets_reflection_;
  delete UTarget::default_instance_;
  delete UTarget_reflection_;
  delete MemberInfo::default_instance_;
  delete MemberInfo_reflection_;
  delete Member::default_instance_;
  delete Member_reflection_;
  delete MemberList::default_instance_;
  delete MemberList_reflection_;
  delete PrivateInfo::default_instance_;
  delete PrivateInfo_reflection_;
}

void protobuf_AddDesc_base_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nbase.proto\022\003tms\"[\n\007AnsInfo\022\016\n\006uError\030\001"
    " \002(\r\022\026\n\004tCmd\030\002 \002(\0162\010.tms.cmd\022\024\n\014strAccou"
    "ntNo\030\003 \001(\t\022\022\n\nuAccountID\030\004 \002(\r\"I\n\nTarget"
    "Info\022\024\n\014strAccountNo\030\001 \002(\t\022\023\n\013strNickNam"
    "e\030\002 \002(\014\022\020\n\005nFace\030\003 \002(\r:\0010\"E\n\007Targets\022\024\n\t"
    "uTargetID\030\001 \002(\r:\0010\022$\n\013TargetInfos\030\002 \002(\0132"
    "\017.tms.TargetInfo\"E\n\007UTarget\022\024\n\tuTargetID"
    "\030\001 \002(\r:\0010\022\021\n\006uRight\030\002 \001(\r:\0010\022\021\n\tselfpara"
    "m\030\003 \001(\014\"2\n\nMemberInfo\022\021\n\006uRight\030\002 \001(\r:\0010"
    "\022\021\n\tselfparam\030\003 \001(\014\"D\n\006Member\022\024\n\tuTarget"
    "ID\030\001 \002(\r:\0010\022$\n\013MemberInfos\030\002 \001(\0132\017.tms.M"
    "emberInfo\"\?\n\nMemberList\022\023\n\010uVersion\030\001 \002("
    "\r:\0010\022\034\n\007Members\030\002 \003(\0132\013.tms.Member\" \n\013Pr"
    "ivateInfo\022\021\n\tselfparam\030\001 \001(\014*>\n\013OnlineSt"
    "ate\022\027\n\023OnlineState_Offline\020\000\022\026\n\022OnlineSt"
    "ate_Online\020\001*7\n\nTargetType\022\023\n\017TargetType"
    "_User\020\000\022\024\n\020TargetType_Group\020\001*\206\n\n\003cmd\022\r\n"
    "\tn_AnsInfo\020\000\022\r\n\tn_TalkMsg\020\001\022\020\n\014n_TalkMsg"
    "Ans\020\002\022\024\n\020n_PullTalkMsgReq\020\003\022\023\n\017n_MsgInfo"
    "Notify\020\013\022\020\n\014n_TargetInfo\020\"\022\020\n\014n_FriendIn"
    "fo\020#\022\021\n\rn_UserTargets\020$\022\025\n\021n_UserPrivate"
    "Info\020%\022\016\n\nn_UserInfo\020&\022\024\n\020n_UserOnlineIn"
    "fo\020\'\022\017\n\013n_LoginInfo\020(\022\022\n\016n_RegisterInfo\020"
    ")\022\021\n\rn_UserInfoReq\020*\022\022\n\016n_TargetsQuery\020+"
    "\022\024\n\020n_UpdateUserInfo\020,\022\020\n\014n_TargetsAdd\020-"
    "\022\026\n\022n_UpdateTargetInfo\020.\022\024\n\020n_StateServe"
    "rReq\020/\022\022\n\016n_UserInfo_Old\0200\022\022\n\016n_UTargetI"
    "nfos\0201\022\023\n\017n_SysTargetInfo\0202\022\027\n\023n_SysTarg"
    "etInfoList\0203\022\022\n\016n_SysGroupInfo\0204\022\026\n\022n_Sy"
    "sGroupInfoList\0205\022\021\n\rn_SysUserInfo\0206\022\020\n\014n"
    "_SysTalkMsg\0207\022\024\n\020n_SysTalkMsgList\0208\022\026\n\022n"
    "_SysTargetMsgInfo\0209\022\032\n\026n_SysTargetMsgInf"
    "oList\020:\022\023\n\017n_SysMemberInfo\020;\022\027\n\023n_SysMem"
    "berInfoList\020<\022\026\n\022n_SysGTalkInfoList\020=\022\030\n"
    "\024n_SysUserPrivateInfo\020G\022\020\n\014n_MemberList\020"
    "H\022\034\n\030n_SysUserPrivateInfoList\020I\022\024\n\020n_Use"
    "rInfoNotify\020e\022\030\n\024n_UserBaseInfoNotify\020f\022"
    "\026\n\022n_TargetsAddNotify\020g\022\023\n\017n_TargetsNoti"
    "fy\020h\022\026\n\022n_UserOnlineNotify\020i\022\017\n\013n_JoinGT"
    "alk\020n\022\022\n\016n_AnsJoinGTalk\020o\022\017\n\013n_QuitGTalk"
    "\020p\022\023\n\016n_ReqHeartbeat\020\351\007\022\023\n\016n_AnsHeartbea"
    "t\020\352\007\022\021\n\014n_ServerTime\020\353\007\022\023\n\016n_FileLoadDat"
    "a\020\357\007\022\023\n\016n_FileLoadInfo\020\360\007\022\033\n\026n_UserOnlin"
    "eNotifyList\020\374\007\022\026\n\021n_TalkMsgBaseList\020\375\007\022\026"
    "\n\021n_ChatMsgBaseList\020\376\007\022\024\n\017n_UserMsgIDLis"
    "t\020\377\007\022\021\n\014n_ServerInfo\020\200\010\022\025\n\020n_ServerInfoL"
    "ist\020\201\010\022\020\n\013n_ServerOut\020\202\010\022\030\n\023n_TargtServe"
    "rIDList\020\203\010\022\030\n\023n_UserLoginFlagList\020\204\010\022\027\n\022"
    "n_TargetOnlineInfo\020\205\010\022\017\n\nn_ChatUser\020\206\010", 1958);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base.proto", &protobuf_RegisterTypes);
  AnsInfo::default_instance_ = new AnsInfo();
  TargetInfo::default_instance_ = new TargetInfo();
  Targets::default_instance_ = new Targets();
  UTarget::default_instance_ = new UTarget();
  MemberInfo::default_instance_ = new MemberInfo();
  Member::default_instance_ = new Member();
  MemberList::default_instance_ = new MemberList();
  PrivateInfo::default_instance_ = new PrivateInfo();
  AnsInfo::default_instance_->InitAsDefaultInstance();
  TargetInfo::default_instance_->InitAsDefaultInstance();
  Targets::default_instance_->InitAsDefaultInstance();
  UTarget::default_instance_->InitAsDefaultInstance();
  MemberInfo::default_instance_->InitAsDefaultInstance();
  Member::default_instance_->InitAsDefaultInstance();
  MemberList::default_instance_->InitAsDefaultInstance();
  PrivateInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_2eproto {
  StaticDescriptorInitializer_base_2eproto() {
    protobuf_AddDesc_base_2eproto();
  }
} static_descriptor_initializer_base_2eproto_;
const ::google::protobuf::EnumDescriptor* OnlineState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineState_descriptor_;
}
bool OnlineState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TargetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetType_descriptor_;
}
bool TargetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* cmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmd_descriptor_;
}
bool cmd_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 11:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 71:
    case 72:
    case 73:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 110:
    case 111:
    case 112:
    case 1001:
    case 1002:
    case 1003:
    case 1007:
    case 1008:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AnsInfo::kUErrorFieldNumber;
const int AnsInfo::kTCmdFieldNumber;
const int AnsInfo::kStrAccountNoFieldNumber;
const int AnsInfo::kUAccountIDFieldNumber;
#endif  // !_MSC_VER

AnsInfo::AnsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnsInfo::InitAsDefaultInstance() {
}

AnsInfo::AnsInfo(const AnsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnsInfo::SharedCtor() {
  _cached_size_ = 0;
  uerror_ = 0u;
  tcmd_ = 0;
  straccountno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uaccountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnsInfo::~AnsInfo() {
  SharedDtor();
}

void AnsInfo::SharedDtor() {
  if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
    delete straccountno_;
  }
  if (this != default_instance_) {
  }
}

void AnsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnsInfo_descriptor_;
}

const AnsInfo& AnsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

AnsInfo* AnsInfo::default_instance_ = NULL;

AnsInfo* AnsInfo::New() const {
  return new AnsInfo;
}

void AnsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uerror_ = 0u;
    tcmd_ = 0;
    if (has_straccountno()) {
      if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
        straccountno_->clear();
      }
    }
    uaccountid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uError = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uerror_)));
          set_has_uerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tCmd;
        break;
      }

      // required .tms.cmd tCmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tCmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tms::cmd_IsValid(value)) {
            set_tcmd(static_cast< ::tms::cmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strAccountNo;
        break;
      }

      // optional string strAccountNo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strAccountNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccountno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccountno().data(), this->straccountno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uAccountID;
        break;
      }

      // required uint32 uAccountID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uAccountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uaccountid_)));
          set_has_uaccountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uError = 1;
  if (has_uerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uerror(), output);
  }

  // required .tms.cmd tCmd = 2;
  if (has_tcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tcmd(), output);
  }

  // optional string strAccountNo = 3;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->straccountno(), output);
  }

  // required uint32 uAccountID = 4;
  if (has_uaccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uaccountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uError = 1;
  if (has_uerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uerror(), target);
  }

  // required .tms.cmd tCmd = 2;
  if (has_tcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tcmd(), target);
  }

  // optional string strAccountNo = 3;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->straccountno(), target);
  }

  // required uint32 uAccountID = 4;
  if (has_uaccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uaccountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uError = 1;
    if (has_uerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uerror());
    }

    // required .tms.cmd tCmd = 2;
    if (has_tcmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcmd());
    }

    // optional string strAccountNo = 3;
    if (has_straccountno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccountno());
    }

    // required uint32 uAccountID = 4;
    if (has_uaccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uaccountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnsInfo::MergeFrom(const AnsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uerror()) {
      set_uerror(from.uerror());
    }
    if (from.has_tcmd()) {
      set_tcmd(from.tcmd());
    }
    if (from.has_straccountno()) {
      set_straccountno(from.straccountno());
    }
    if (from.has_uaccountid()) {
      set_uaccountid(from.uaccountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnsInfo::CopyFrom(const AnsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnsInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void AnsInfo::Swap(AnsInfo* other) {
  if (other != this) {
    std::swap(uerror_, other->uerror_);
    std::swap(tcmd_, other->tcmd_);
    std::swap(straccountno_, other->straccountno_);
    std::swap(uaccountid_, other->uaccountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnsInfo_descriptor_;
  metadata.reflection = AnsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargetInfo::kStrAccountNoFieldNumber;
const int TargetInfo::kStrNickNameFieldNumber;
const int TargetInfo::kNFaceFieldNumber;
#endif  // !_MSC_VER

TargetInfo::TargetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargetInfo::InitAsDefaultInstance() {
}

TargetInfo::TargetInfo(const TargetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargetInfo::SharedCtor() {
  _cached_size_ = 0;
  straccountno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nface_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetInfo::~TargetInfo() {
  SharedDtor();
}

void TargetInfo::SharedDtor() {
  if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
    delete straccountno_;
  }
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (this != default_instance_) {
  }
}

void TargetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetInfo_descriptor_;
}

const TargetInfo& TargetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

TargetInfo* TargetInfo::default_instance_ = NULL;

TargetInfo* TargetInfo::New() const {
  return new TargetInfo;
}

void TargetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_straccountno()) {
      if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
        straccountno_->clear();
      }
    }
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
    nface_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string strAccountNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccountno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccountno().data(), this->straccountno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strNickName;
        break;
      }

      // required bytes strNickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strnickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nFace;
        break;
      }

      // required uint32 nFace = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nface_)));
          set_has_nface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string strAccountNo = 1;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->straccountno(), output);
  }

  // required bytes strNickName = 2;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->strnickname(), output);
  }

  // required uint32 nFace = 3 [default = 0];
  if (has_nface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nface(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string strAccountNo = 1;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->straccountno(), target);
  }

  // required bytes strNickName = 2;
  if (has_strnickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->strnickname(), target);
  }

  // required uint32 nFace = 3 [default = 0];
  if (has_nface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nface(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string strAccountNo = 1;
    if (has_straccountno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccountno());
    }

    // required bytes strNickName = 2;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strnickname());
    }

    // required uint32 nFace = 3 [default = 0];
    if (has_nface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nface());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargetInfo::MergeFrom(const TargetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_straccountno()) {
      set_straccountno(from.straccountno());
    }
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
    if (from.has_nface()) {
      set_nface(from.nface());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetInfo::CopyFrom(const TargetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TargetInfo::Swap(TargetInfo* other) {
  if (other != this) {
    std::swap(straccountno_, other->straccountno_);
    std::swap(strnickname_, other->strnickname_);
    std::swap(nface_, other->nface_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetInfo_descriptor_;
  metadata.reflection = TargetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Targets::kUTargetIDFieldNumber;
const int Targets::kTargetInfosFieldNumber;
#endif  // !_MSC_VER

Targets::Targets()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Targets::InitAsDefaultInstance() {
  targetinfos_ = const_cast< ::tms::TargetInfo*>(&::tms::TargetInfo::default_instance());
}

Targets::Targets(const Targets& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Targets::SharedCtor() {
  _cached_size_ = 0;
  utargetid_ = 0u;
  targetinfos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Targets::~Targets() {
  SharedDtor();
}

void Targets::SharedDtor() {
  if (this != default_instance_) {
    delete targetinfos_;
  }
}

void Targets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Targets::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Targets_descriptor_;
}

const Targets& Targets::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

Targets* Targets::default_instance_ = NULL;

Targets* Targets::New() const {
  return new Targets;
}

void Targets::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utargetid_ = 0u;
    if (has_targetinfos()) {
      if (targetinfos_ != NULL) targetinfos_->::tms::TargetInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Targets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uTargetID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TargetInfos;
        break;
      }

      // required .tms.TargetInfo TargetInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TargetInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Targets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->utargetid(), output);
  }

  // required .tms.TargetInfo TargetInfos = 2;
  if (has_targetinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targetinfos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Targets::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->utargetid(), target);
  }

  // required .tms.TargetInfo TargetInfos = 2;
  if (has_targetinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->targetinfos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Targets::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uTargetID = 1 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // required .tms.TargetInfo TargetInfos = 2;
    if (has_targetinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetinfos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Targets::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Targets* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Targets*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Targets::MergeFrom(const Targets& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_targetinfos()) {
      mutable_targetinfos()->::tms::TargetInfo::MergeFrom(from.targetinfos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Targets::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Targets::CopyFrom(const Targets& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Targets::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_targetinfos()) {
    if (!this->targetinfos().IsInitialized()) return false;
  }
  return true;
}

void Targets::Swap(Targets* other) {
  if (other != this) {
    std::swap(utargetid_, other->utargetid_);
    std::swap(targetinfos_, other->targetinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Targets::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Targets_descriptor_;
  metadata.reflection = Targets_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UTarget::kUTargetIDFieldNumber;
const int UTarget::kURightFieldNumber;
const int UTarget::kSelfparamFieldNumber;
#endif  // !_MSC_VER

UTarget::UTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UTarget::InitAsDefaultInstance() {
}

UTarget::UTarget(const UTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UTarget::SharedCtor() {
  _cached_size_ = 0;
  utargetid_ = 0u;
  uright_ = 0u;
  selfparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UTarget::~UTarget() {
  SharedDtor();
}

void UTarget::SharedDtor() {
  if (selfparam_ != &::google::protobuf::internal::kEmptyString) {
    delete selfparam_;
  }
  if (this != default_instance_) {
  }
}

void UTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UTarget_descriptor_;
}

const UTarget& UTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

UTarget* UTarget::default_instance_ = NULL;

UTarget* UTarget::New() const {
  return new UTarget;
}

void UTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utargetid_ = 0u;
    uright_ = 0u;
    if (has_selfparam()) {
      if (selfparam_ != &::google::protobuf::internal::kEmptyString) {
        selfparam_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uTargetID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uRight;
        break;
      }

      // optional uint32 uRight = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uright_)));
          set_has_uright();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_selfparam;
        break;
      }

      // optional bytes selfparam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfparam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_selfparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->utargetid(), output);
  }

  // optional uint32 uRight = 2 [default = 0];
  if (has_uright()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uright(), output);
  }

  // optional bytes selfparam = 3;
  if (has_selfparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->selfparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->utargetid(), target);
  }

  // optional uint32 uRight = 2 [default = 0];
  if (has_uright()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uright(), target);
  }

  // optional bytes selfparam = 3;
  if (has_selfparam()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->selfparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uTargetID = 1 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // optional uint32 uRight = 2 [default = 0];
    if (has_uright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uright());
    }

    // optional bytes selfparam = 3;
    if (has_selfparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->selfparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UTarget::MergeFrom(const UTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_uright()) {
      set_uright(from.uright());
    }
    if (from.has_selfparam()) {
      set_selfparam(from.selfparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UTarget::CopyFrom(const UTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UTarget::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UTarget::Swap(UTarget* other) {
  if (other != this) {
    std::swap(utargetid_, other->utargetid_);
    std::swap(uright_, other->uright_);
    std::swap(selfparam_, other->selfparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UTarget_descriptor_;
  metadata.reflection = UTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemberInfo::kURightFieldNumber;
const int MemberInfo::kSelfparamFieldNumber;
#endif  // !_MSC_VER

MemberInfo::MemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MemberInfo::InitAsDefaultInstance() {
}

MemberInfo::MemberInfo(const MemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MemberInfo::SharedCtor() {
  _cached_size_ = 0;
  uright_ = 0u;
  selfparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberInfo::~MemberInfo() {
  SharedDtor();
}

void MemberInfo::SharedDtor() {
  if (selfparam_ != &::google::protobuf::internal::kEmptyString) {
    delete selfparam_;
  }
  if (this != default_instance_) {
  }
}

void MemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberInfo_descriptor_;
}

const MemberInfo& MemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

MemberInfo* MemberInfo::default_instance_ = NULL;

MemberInfo* MemberInfo::New() const {
  return new MemberInfo;
}

void MemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uright_ = 0u;
    if (has_selfparam()) {
      if (selfparam_ != &::google::protobuf::internal::kEmptyString) {
        selfparam_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uRight = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uright_)));
          set_has_uright();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_selfparam;
        break;
      }

      // optional bytes selfparam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfparam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_selfparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uRight = 2 [default = 0];
  if (has_uright()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uright(), output);
  }

  // optional bytes selfparam = 3;
  if (has_selfparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->selfparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uRight = 2 [default = 0];
  if (has_uright()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uright(), target);
  }

  // optional bytes selfparam = 3;
  if (has_selfparam()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->selfparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uRight = 2 [default = 0];
    if (has_uright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uright());
    }

    // optional bytes selfparam = 3;
    if (has_selfparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->selfparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberInfo::MergeFrom(const MemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uright()) {
      set_uright(from.uright());
    }
    if (from.has_selfparam()) {
      set_selfparam(from.selfparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberInfo::CopyFrom(const MemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberInfo::IsInitialized() const {

  return true;
}

void MemberInfo::Swap(MemberInfo* other) {
  if (other != this) {
    std::swap(uright_, other->uright_);
    std::swap(selfparam_, other->selfparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberInfo_descriptor_;
  metadata.reflection = MemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Member::kUTargetIDFieldNumber;
const int Member::kMemberInfosFieldNumber;
#endif  // !_MSC_VER

Member::Member()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Member::InitAsDefaultInstance() {
  memberinfos_ = const_cast< ::tms::MemberInfo*>(&::tms::MemberInfo::default_instance());
}

Member::Member(const Member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Member::SharedCtor() {
  _cached_size_ = 0;
  utargetid_ = 0u;
  memberinfos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Member::~Member() {
  SharedDtor();
}

void Member::SharedDtor() {
  if (this != default_instance_) {
    delete memberinfos_;
  }
}

void Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Member_descriptor_;
}

const Member& Member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

Member* Member::default_instance_ = NULL;

Member* Member::New() const {
  return new Member;
}

void Member::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utargetid_ = 0u;
    if (has_memberinfos()) {
      if (memberinfos_ != NULL) memberinfos_->::tms::MemberInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uTargetID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MemberInfos;
        break;
      }

      // optional .tms.MemberInfo MemberInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MemberInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memberinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->utargetid(), output);
  }

  // optional .tms.MemberInfo MemberInfos = 2;
  if (has_memberinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->memberinfos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->utargetid(), target);
  }

  // optional .tms.MemberInfo MemberInfos = 2;
  if (has_memberinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->memberinfos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uTargetID = 1 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // optional .tms.MemberInfo MemberInfos = 2;
    if (has_memberinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberinfos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Member::MergeFrom(const Member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_memberinfos()) {
      mutable_memberinfos()->::tms::MemberInfo::MergeFrom(from.memberinfos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Member::CopyFrom(const Member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Member::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Member::Swap(Member* other) {
  if (other != this) {
    std::swap(utargetid_, other->utargetid_);
    std::swap(memberinfos_, other->memberinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Member_descriptor_;
  metadata.reflection = Member_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemberList::kUVersionFieldNumber;
const int MemberList::kMembersFieldNumber;
#endif  // !_MSC_VER

MemberList::MemberList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MemberList::InitAsDefaultInstance() {
}

MemberList::MemberList(const MemberList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MemberList::SharedCtor() {
  _cached_size_ = 0;
  uversion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberList::~MemberList() {
  SharedDtor();
}

void MemberList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemberList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberList_descriptor_;
}

const MemberList& MemberList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

MemberList* MemberList::default_instance_ = NULL;

MemberList* MemberList::New() const {
  return new MemberList;
}

void MemberList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uversion_ = 0u;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uVersion = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uversion_)));
          set_has_uversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Members;
        break;
      }

      // repeated .tms.Member Members = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Members;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemberList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uVersion = 1 [default = 0];
  if (has_uversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uversion(), output);
  }

  // repeated .tms.Member Members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MemberList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uVersion = 1 [default = 0];
  if (has_uversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uversion(), target);
  }

  // repeated .tms.Member Members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MemberList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uVersion = 1 [default = 0];
    if (has_uversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uversion());
    }

  }
  // repeated .tms.Member Members = 2;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberList::MergeFrom(const MemberList& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uversion()) {
      set_uversion(from.uversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberList::CopyFrom(const MemberList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < members_size(); i++) {
    if (!this->members(i).IsInitialized()) return false;
  }
  return true;
}

void MemberList::Swap(MemberList* other) {
  if (other != this) {
    std::swap(uversion_, other->uversion_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberList_descriptor_;
  metadata.reflection = MemberList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrivateInfo::kSelfparamFieldNumber;
#endif  // !_MSC_VER

PrivateInfo::PrivateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrivateInfo::InitAsDefaultInstance() {
}

PrivateInfo::PrivateInfo(const PrivateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrivateInfo::SharedCtor() {
  _cached_size_ = 0;
  selfparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrivateInfo::~PrivateInfo() {
  SharedDtor();
}

void PrivateInfo::SharedDtor() {
  if (selfparam_ != &::google::protobuf::internal::kEmptyString) {
    delete selfparam_;
  }
  if (this != default_instance_) {
  }
}

void PrivateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrivateInfo_descriptor_;
}

const PrivateInfo& PrivateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

PrivateInfo* PrivateInfo::default_instance_ = NULL;

PrivateInfo* PrivateInfo::New() const {
  return new PrivateInfo;
}

void PrivateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selfparam()) {
      if (selfparam_ != &::google::protobuf::internal::kEmptyString) {
        selfparam_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrivateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes selfparam = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_selfparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrivateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes selfparam = 1;
  if (has_selfparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->selfparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrivateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes selfparam = 1;
  if (has_selfparam()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->selfparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrivateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes selfparam = 1;
    if (has_selfparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->selfparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrivateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrivateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrivateInfo::MergeFrom(const PrivateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfparam()) {
      set_selfparam(from.selfparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrivateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivateInfo::CopyFrom(const PrivateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateInfo::IsInitialized() const {

  return true;
}

void PrivateInfo::Swap(PrivateInfo* other) {
  if (other != this) {
    std::swap(selfparam_, other->selfparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrivateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrivateInfo_descriptor_;
  metadata.reflection = PrivateInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tms

// @@protoc_insertion_point(global_scope)
